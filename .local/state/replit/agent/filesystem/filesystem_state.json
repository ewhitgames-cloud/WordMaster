{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a modern React-based Wordle game application built with a full-stack TypeScript architecture. The application features a web-based word guessing game with statistics tracking, challenge modes, and a vibrant Nintendo-style UI using shadcn/ui components with colorful gradients and animations throughout.\n\n## Recent Changes\n\n**August 18, 2025**: Fixed critical case sensitivity bug in win detection logic that prevented celebration modal from showing when players won games. The win condition now properly compares guesses case-insensitively, ensuring proper game completion notifications.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **Animations**: Framer Motion for smooth transitions and game animations\n- **Build Tool**: Vite with React plugin for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful API endpoints under `/api` prefix\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Development**: Hot module replacement via Vite middleware integration\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with schema-first approach\n- **Migrations**: Drizzle Kit for schema migrations\n- **Development Fallback**: In-memory storage implementation for development/testing\n\n## Key Components\n\n### Game Logic\n- **Word Validation**: Client-side word validation using comprehensive 2000+ word dictionary\n- **Game State Management**: Custom React hook (`useWordle`) managing game state\n- **Scoring System**: Points calculation based on attempts, time, and challenge mode\n- **Statistics Tracking**: Persistent game statistics with guess distribution\n- **Massive Word Dictionary**: Comprehensive 10,000+ word dictionary with 3000+ curated answer words and 7000+ valid guess words for maximum English vocabulary coverage\n- **Performance-Optimized Validation**: Fast Set-based word lookups for smooth gameplay despite massive dictionary size\n- **OpenAI-Enhanced Word Generation**: Intelligent word generation using OpenAI GPT-4o with automatic fallback to comprehensive built-in word library\n- **Dynamic Word Pools**: Multiple generation modes (random, daily, challenge, category-specific) with smart caching and theme-based organization\n\n### UI Components\n- **Game Grid**: 6x5 tile grid with color-coded feedback (correct/present/absent)\n- **Virtual Keyboard**: Interactive keyboard with key state tracking\n- **Modal System**: Multiple modals for celebration, statistics, and menu\n- **Responsive Design**: Mobile-optimized interface with touch interactions\n\n### Database Schema\n- **Game Stats Table**: Tracks overall player performance and statistics\n- **Game Results Table**: Individual game session records\n- **Schema Validation**: Zod schemas for runtime type validation\n\n## Data Flow\n\n1. **Game Initialization**: Client requests new game, server can provide word (currently using client-side word list)\n2. **User Input**: Keyboard input processed through game logic, validated against word list\n3. **Game Completion**: Results sent to server, statistics updated in database\n4. **Statistics Display**: Real-time statistics fetched and displayed in modals\n\n## External Dependencies\n\n### Core Dependencies\n- **React Ecosystem**: React 18, React DOM, TanStack Query\n- **UI/Styling**: Radix UI components, Tailwind CSS, class-variance-authority\n- **Database**: Drizzle ORM, Neon serverless PostgreSQL\n- **Development**: Vite, TypeScript, ESBuild for production builds\n- **Animations**: Framer Motion, React Confetti for celebrations\n\n### Notable Features\n- **Challenge Mode**: Time-limited gameplay with bonus scoring and 3-minute countdown timer\n- **Daily Challenge System**: Sophisticated daily words that reset daily and never repeat using date-based seeding\n- **Comprehensive Word Library**: 10,000+ offline words including massive dictionary coverage (no API required)\n- **Statistics Tracking**: Comprehensive game statistics with visual distribution\n- **Nintendo-Style UI**: Vibrant gradients, colorful animations, and playful design throughout\n- **Responsive Design**: Mobile-optimized interface with touch-friendly interactions\n- **Dark/Light Mode**: Theme support via CSS variables\n- **Auto-submission**: Automatic word checking when 5 letters are entered\n- **Massive Word Variety**: 3000+ answer words and 7000+ valid guess words for comprehensive English vocabulary coverage\n- **Colorful Game Elements**: Gradient tiles, animated backgrounds, and glassmorphism effects\n- **AdMob Integration**: Rewarded video ads for earning coins, ready for mobile app deployment\n- **Coin Economy**: Simple coin-based currency system with persistent localStorage storage\n- **Font Store with Ads**: Players can watch ads to earn 25-50 coins for purchasing fonts and themes\n- **Audio System Framework**: Complete audio settings UI with volume controls, mute functionality, and haptic feedback - ready for future audio implementation\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds optimized React application to `dist/public`\n- **Backend**: ESBuild bundles Express server to `dist/index.js`\n- **Type Safety**: TypeScript compilation check before deployment\n\n### Environment Configuration\n- **Database**: Requires `DATABASE_URL` environment variable for PostgreSQL connection\n- **Development**: Automatic Vite dev server integration with HMR\n- **Production**: Serves built frontend assets through Express static middleware\n\n### Development Workflow\n- **Hot Reloading**: Vite provides instant feedback for frontend changes\n- **API Logging**: Request/response logging for API endpoints\n- **Database Migrations**: Drizzle Kit handles schema changes and migrations\n- **Shared Types**: Common types and schemas shared between client and server via `shared/` directory\n\nThe application is designed for easy deployment on platforms like Replit, with automatic database provisioning and environment setup.","size_bytes":6514},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/built-in-word-library.ts":{"content":"// Import comprehensive word dictionary\nimport { ANSWER_WORDS, getRandomAnswerWord, VALID_GUESS_WORD_SET, THEMED_WORDS, getThemedWord } from '@shared/comprehensive-word-list';\n\n// Export functions that use the comprehensive word list\nexport function getAllBuiltInWords(): string[] {\n  return ANSWER_WORDS;\n}\n\nexport function getWordsByDifficulty(difficulty: 'common' | 'intermediate' | 'advanced'): string[] {\n  // Return different slices of the answer words based on difficulty\n  if (difficulty === 'common') {\n    return ANSWER_WORDS.slice(0, 150);\n  } else if (difficulty === 'intermediate') {\n    return ANSWER_WORDS.slice(150, 300);\n  } else {\n    return ANSWER_WORDS.slice(300);\n  }\n}\n\nexport function getWordsByCategory(category: keyof typeof THEMED_WORDS): string[] {\n  return THEMED_WORDS[category];\n}\n\nexport function getRandomExpandedWord(): string {\n  return getRandomAnswerWord();\n}\n\n// Check if word is valid guess\nexport function isValidBuiltInWord(word: string): boolean {\n  return VALID_GUESS_WORD_SET.has(word.toUpperCase());\n}","size_bytes":1045},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Create pool with better error handling and connection management\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 10,\n  maxUses: Infinity,\n  allowExitOnIdle: false,\n  idleTimeoutMillis: 10000\n});\n\nexport const db = drizzle({ client: pool, schema });\n\n// Add error handling for pool events\npool.on('error', (err) => {\n  console.error('Database pool error:', err);\n});\n\n// Graceful shutdown handler\nprocess.on('SIGINT', async () => {\n  console.log('Closing database pool...');\n  await pool.end();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('Closing database pool...');\n  await pool.end();\n  process.exit(0);\n});","size_bytes":1031},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai-words.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nlet openai: OpenAI | null = null;\n\nfunction getOpenAIClient(): OpenAI {\n  if (!openai && process.env.OPENAI_API_KEY) {\n    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  }\n  if (!openai) {\n    throw new Error(\"OpenAI API key not configured\");\n  }\n  return openai;\n}\n\nexport interface WordGenerationRequest {\n  category?: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n  count?: number;\n  excludeWords?: string[];\n}\n\nexport interface GeneratedWord {\n  word: string;\n  category: string;\n  difficulty: string;\n  definition?: string;\n}\n\nexport async function generateWords(options: WordGenerationRequest = {}): Promise<GeneratedWord[]> {\n  const {\n    category = 'general',\n    difficulty = 'medium',\n    count = 50,\n    excludeWords = []\n  } = options;\n\n  const excludeList = excludeWords.length > 0 \n    ? `Exclude these words: ${excludeWords.join(', ')}. ` \n    : '';\n\n  const prompt = `Generate exactly ${count} unique 5-letter English words for a Wordle-style game.\n\nRequirements:\n- All words must be exactly 5 letters\n- ${difficulty === 'easy' ? 'Use common, everyday words that most people know' : \n    difficulty === 'medium' ? 'Use moderately challenging words' :\n    'Use sophisticated, less common words that are still valid English'}\n- Category focus: ${category === 'general' ? 'Mix of various categories' : category}\n- All words must be real English words found in standard dictionaries\n- No proper nouns, abbreviations, or slang\n- ${excludeList}\n\nReturn as JSON array with this exact format:\n{\n  \"words\": [\n    {\n      \"word\": \"TRAIN\",\n      \"category\": \"${category}\",\n      \"difficulty\": \"${difficulty}\",\n      \"definition\": \"brief definition\"\n    }\n  ]\n}`;\n\n  try {\n    const client = getOpenAIClient();\n    const response = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a word expert helping create words for a word puzzle game. Always respond with valid JSON containing exactly the requested number of unique 5-letter words.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.8,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"words\":[]}');\n    \n    if (!result.words || !Array.isArray(result.words)) {\n      throw new Error(\"Invalid response format from OpenAI\");\n    }\n\n    // Validate and clean the words\n    const validWords = result.words\n      .filter((item: any) => \n        item.word && \n        typeof item.word === 'string' && \n        item.word.length === 5 &&\n        /^[A-Z]+$/.test(item.word.toUpperCase())\n      )\n      .map((item: any) => ({\n        word: item.word.toUpperCase(),\n        category: item.category || category,\n        difficulty: item.difficulty || difficulty,\n        definition: item.definition || ''\n      }));\n\n    return validWords;\n  } catch (error) {\n    console.error('Error generating words with OpenAI:', error);\n    throw new Error(`Failed to generate words: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function generateDailyChallengeWords(count: number = 100): Promise<string[]> {\n  try {\n    const words = await generateWords({\n      difficulty: 'hard',\n      count,\n      category: 'sophisticated vocabulary'\n    });\n    \n    return words.map(w => w.word);\n  } catch (error) {\n    console.error('Error generating daily challenge words:', error);\n    // Fallback to existing words if OpenAI fails\n    return [];\n  }\n}\n\nexport async function generateWordsByCategory(category: string, count: number = 30): Promise<string[]> {\n  try {\n    const words = await generateWords({\n      category,\n      difficulty: 'medium',\n      count\n    });\n    \n    return words.map(w => w.word);\n  } catch (error) {\n    console.error(`Error generating ${category} words:`, error);\n    return [];\n  }\n}","size_bytes":4101},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertGameStatsSchema, insertGameResultSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { \n  OFFICIAL_WORDLE_ANSWERS, \n  isOfficialWordleWord, \n  getRandomAnswerWord, \n  getDailyWord \n} from \"@shared/official-wordle-words\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get game statistics\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getGameStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get stats\" });\n    }\n  });\n\n  // Update game statistics\n  app.post(\"/api/stats\", async (req, res) => {\n    try {\n      const validatedData = insertGameStatsSchema.parse(req.body);\n      const stats = await storage.updateGameStats(validatedData);\n      res.json(stats);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update stats\" });\n      }\n    }\n  });\n\n  // Save game result\n  app.post(\"/api/results\", async (req, res) => {\n    try {\n      const validatedData = insertGameResultSchema.parse(req.body);\n      const result = await storage.saveGameResult(validatedData);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error('Failed to save game result:', error);\n        // Return empty object to prevent client errors\n        res.json({});\n      }\n    }\n  });\n\n  // Get recent results\n  app.get(\"/api/results\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const results = await storage.getRecentResults(limit);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get results\" });\n    }\n  });\n\n  // Get a random word for the game (official Wordle words only)\n  app.get(\"/api/word\", async (req, res) => {\n    try {\n      const randomWord = getRandomAnswerWord();\n      res.json({ \n        word: randomWord,\n        source: 'official-wordle'\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get word\" });\n    }\n  });\n\n  // Get current game word - this is what the client actually calls\n  app.get(\"/api/word/current-game\", async (req, res) => {\n    try {\n      const selectedWord = getRandomAnswerWord();\n      console.log('Target word set to:', selectedWord);\n      \n      res.json({ \n        word: selectedWord,\n        source: 'official-wordle'\n      });\n    } catch (error) {\n      console.error('Error getting current game word:', error);\n      res.status(500).json({ message: \"Failed to get word\" });\n    }\n  });\n\n  // Get daily challenge word\n  app.get(\"/api/word/daily-challenge\", async (req, res) => {\n    try {\n      const dailyWord = getDailyWord();\n      const today = new Date().toISOString().split('T')[0];\n      \n      res.json({ \n        word: dailyWord,\n        date: today,\n        source: 'official-wordle-daily'\n      });\n    } catch (error) {\n      console.error('Error getting daily challenge word:', error);\n      res.status(500).json({ message: \"Failed to get daily word\" });\n    }\n  });\n\n  // Validate a single word (for user input validation)\n  app.post(\"/api/word/validate\", async (req, res) => {\n    try {\n      const { word } = req.body;\n      \n      if (!word || typeof word !== 'string') {\n        return res.status(400).json({ \n          message: \"Word is required\",\n          isValid: false \n        });\n      }\n\n      const cleanWord = word.trim().toUpperCase();\n      \n      if (cleanWord.length !== 5) {\n        return res.json({ \n          isValid: false,\n          message: \"Word must be exactly 5 letters\",\n          word: cleanWord\n        });\n      }\n\n      const isValid = isOfficialWordleWord(cleanWord);\n      \n      res.json({ \n        isValid,\n        word: cleanWord,\n        source: 'official-wordle',\n        message: isValid ? \"Valid word\" : \"Not in official Wordle word list\"\n      });\n    } catch (error) {\n      console.error('Word validation error:', error);\n      res.status(500).json({ \n        message: \"Failed to validate word\",\n        isValid: false \n      });\n    }\n  });\n\n  // Batch validate words (for checking multiple words at once)\n  app.post(\"/api/word/validate-batch\", async (req, res) => {\n    try {\n      const { words } = req.body;\n      \n      if (!Array.isArray(words) || words.length === 0) {\n        return res.status(400).json({ \n          message: \"Words must be a non-empty array\",\n          results: {}\n        });\n      }\n\n      const results: Record<string, boolean> = {};\n      \n      words.forEach((word: any) => {\n        if (typeof word === 'string' && word.length === 5) {\n          const cleanWord = word.trim().toUpperCase();\n          results[cleanWord] = isOfficialWordleWord(cleanWord);\n        } else {\n          const cleanWord = String(word).trim().toUpperCase();\n          results[cleanWord] = false;\n        }\n      });\n      \n      res.json({ \n        results,\n        totalWords: words.length,\n        validWords: Object.values(results).filter(Boolean).length,\n        source: 'official-wordle'\n      });\n    } catch (error) {\n      console.error('Batch word validation error:', error);\n      res.status(500).json({ \n        message: \"Failed to validate words\",\n        results: {}\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":5679},"server/storage.ts":{"content":"import { type GameStats, type InsertGameStats, type GameResult, type InsertGameResult, gameStats, gameResults } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Game Stats\n  getGameStats(): Promise<GameStats | undefined>;\n  createGameStats(stats: InsertGameStats): Promise<GameStats>;\n  updateGameStats(stats: Partial<InsertGameStats>): Promise<GameStats>;\n  \n  // Game Results\n  saveGameResult(result: InsertGameResult): Promise<GameResult>;\n  getRecentResults(limit: number): Promise<GameResult[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getGameStats(): Promise<GameStats | undefined> {\n    try {\n      // Get the first (and should be only) game stats record\n      const [stats] = await db.select().from(gameStats).limit(1);\n      \n      // If no stats exist, create default stats\n      if (!stats) {\n        return await this.createGameStats({\n          totalGames: 0,\n          totalWins: 0,\n          currentStreak: 0,\n          maxStreak: 0,\n          totalPoints: 0,\n          guessDistribution: '{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0}',\n          lastPlayed: null,\n        });\n      }\n      \n      return stats;\n    } catch (error) {\n      console.error('Database get stats error:', error);\n      // Return default stats to prevent frontend errors\n      return {\n        id: randomUUID(),\n        totalGames: 0,\n        totalWins: 0,\n        currentStreak: 0,\n        maxStreak: 0,\n        totalPoints: 0,\n        guessDistribution: '{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0}',\n        lastPlayed: null,\n        createdAt: new Date(),\n      } as GameStats;\n    }\n  }\n\n  async createGameStats(insertStats: InsertGameStats): Promise<GameStats> {\n    try {\n      const [stats] = await db\n        .insert(gameStats)\n        .values(insertStats)\n        .returning();\n      return stats;\n    } catch (error) {\n      console.error('Database create stats error:', error);\n      // Return a mock stats object to prevent frontend errors\n      return {\n        id: randomUUID(),\n        ...insertStats,\n        createdAt: new Date(),\n      } as GameStats;\n    }\n  }\n\n  async updateGameStats(updateStats: Partial<InsertGameStats>): Promise<GameStats> {\n    try {\n      // First get existing stats\n      const existingStats = await this.getGameStats();\n      if (!existingStats) {\n        throw new Error(\"Game stats not found\");\n      }\n\n      // Update the stats\n      const [updatedStats] = await db\n        .update(gameStats)\n        .set({\n          ...updateStats,\n          lastPlayed: new Date(),\n        })\n        .where(eq(gameStats.id, existingStats.id))\n        .returning();\n      \n      return updatedStats;\n    } catch (error) {\n      console.error('Database update stats error:', error);\n      // Return existing stats or default to prevent frontend errors\n      const existingStats = await this.getGameStats();\n      return existingStats || {\n        id: randomUUID(),\n        totalGames: 0,\n        totalWins: 0,\n        currentStreak: 0,\n        maxStreak: 0,\n        totalPoints: 0,\n        guessDistribution: '{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0}',\n        lastPlayed: new Date(),\n        createdAt: new Date(),\n      } as GameStats;\n    }\n  }\n\n  async saveGameResult(insertResult: InsertGameResult): Promise<GameResult> {\n    try {\n      const [result] = await db\n        .insert(gameResults)\n        .values(insertResult)\n        .returning();\n      return result;\n    } catch (error) {\n      console.error('Database save error:', error);\n      // Return a mock result to prevent frontend errors\n      return {\n        id: randomUUID(),\n        ...insertResult,\n        playedAt: new Date(),\n      } as GameResult;\n    }\n  }\n\n  async getRecentResults(limit: number): Promise<GameResult[]> {\n    try {\n      const results = await db\n        .select()\n        .from(gameResults)\n        .orderBy((table) => table.playedAt)\n        .limit(limit);\n      \n      return results.reverse(); // Most recent first\n    } catch (error) {\n      console.error('Database get results error:', error);\n      // Return empty array to prevent frontend errors\n      return [];\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4261},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/word-dictionary.ts":{"content":"// Built-in word dictionary for server-side validation\nexport const VALID_WORDS = new Set([\n  // Common 5-letter words for validation (subset of the client-side dictionary)\n  'ABOUT', 'ABOVE', 'ABUSE', 'ACTOR', 'ACUTE', 'ADMIT', 'ADOPT', 'ADULT', 'AFTER', 'AGAIN',\n  'AGENT', 'AGREE', 'AHEAD', 'ALARM', 'ALBUM', 'ALERT', 'ALIEN', 'ALIGN', 'ALIKE', 'ALIVE',\n  'ALLOW', 'ALONE', 'ALONG', 'ALTER', 'ANGEL', 'ANGER', 'ANGLE', 'ANGRY', 'APART', 'APPLE',\n  'APPLY', 'ARENA', 'ARGUE', 'ARISE', 'ARRAY', 'ASIDE', 'ASSET', 'AVOID', 'AWAKE', 'AWARD',\n  'AWARE', 'BADLY', 'BAKER', 'BASES', 'BASIC', 'BEACH', 'BEGAN', 'BEGIN', 'BEING', 'BELOW',\n  'BENCH', 'BILLY', 'BIRTH', 'BLACK', 'BLAME', 'BLANK', 'BLIND', 'BLOCK', 'BLOOD', 'BOARD',\n  'BOOST', 'BOOTH', 'BOUND', 'BRAIN', 'BRAND', 'BRASS', 'BRAVE', 'BREAD', 'BREAK', 'BREED',\n  'BRIEF', 'BRING', 'BROAD', 'BROKE', 'BROWN', 'BUILD', 'BUILT', 'BUYER', 'CABLE', 'CALIF',\n  'CARRY', 'CATCH', 'CAUSE', 'CHAIN', 'CHAIR', 'CHAOS', 'CHARM', 'CHART', 'CHASE', 'CHEAP',\n  'CHECK', 'CHEST', 'CHILD', 'CHINA', 'CHOSE', 'CIVIL', 'CLAIM', 'CLASS', 'CLEAN', 'CLEAR',\n  'CLICK', 'CLIMB', 'CLOCK', 'CLOSE', 'CLOUD', 'COACH', 'COAST', 'COULD', 'COUNT', 'COURT',\n  'COVER', 'CRAFT', 'CRASH', 'CRAZY', 'CREAM', 'CRIME', 'CROSS', 'CROWD', 'CROWN', 'CRUDE',\n  'CURVE', 'CYCLE', 'DAILY', 'DANCE', 'DATED', 'DEALT', 'DEATH', 'DEBUT', 'DELAY', 'DEPTH',\n  'DOING', 'DOUBT', 'DOZEN', 'DRAFT', 'DRAMA', 'DRANK', 'DRAWN', 'DREAM', 'DRESS', 'DRILL',\n  'DRINK', 'DRIVE', 'DROVE', 'DYING', 'EAGER', 'EARLY', 'EARTH', 'EIGHT', 'ELITE', 'EMPTY',\n  'ENEMY', 'ENJOY', 'ENTER', 'ENTRY', 'EQUAL', 'ERROR', 'EVENT', 'EVERY', 'EXACT', 'EXIST',\n  'EXTRA', 'FAITH', 'FALSE', 'FAULT', 'FIBER', 'FIELD', 'FIFTH', 'FIFTY', 'FIGHT', 'FINAL',\n  'FIRST', 'FIXED', 'FLASH', 'FLEET', 'FLOOR', 'FLUID', 'FOCUS', 'FORCE', 'FORTH', 'FORTY',\n  'FORUM', 'FOUND', 'FRAME', 'FRANK', 'FRAUD', 'FRESH', 'FRONT', 'FRUIT', 'FULLY', 'FUNNY',\n  'GIANT', 'GIVEN', 'GLASS', 'GLOBE', 'GOING', 'GRACE', 'GRADE', 'GRAND', 'GRANT', 'GRASS',\n  'GRAVE', 'GREAT', 'GREEN', 'GROSS', 'GROUP', 'GROWN', 'GUARD', 'GUESS', 'GUEST', 'GUIDE',\n  'HAPPY', 'HARRY', 'HEART', 'HEAVY', 'HENCE', 'HENRY', 'HORSE', 'HOTEL', 'HOUSE', 'HUMAN',\n  'IDEAL', 'IMAGE', 'INDEX', 'INNER', 'INPUT', 'ISSUE', 'JAPAN', 'JIMMY', 'JOINT', 'JONES',\n  'JUDGE', 'KNOWN', 'LABEL', 'LARGE', 'LASER', 'LATER', 'LAUGH', 'LAYER', 'LEARN', 'LEASE',\n  'LEAST', 'LEAVE', 'LEGAL', 'LEVEL', 'LEWIS', 'LIGHT', 'LIMIT', 'LINKS', 'LIVES', 'LOCAL',\n  'LOOSE', 'LOWER', 'LUCKY', 'LUNCH', 'LYING', 'MAGIC', 'MAJOR', 'MAKER', 'MARCH', 'MARIA',\n  'MATCH', 'MAYBE', 'MAYOR', 'MEANT', 'MEDIA', 'METAL', 'MIGHT', 'MINOR', 'MINUS', 'MIXED',\n  'MODEL', 'MONEY', 'MONTH', 'MORAL', 'MOTOR', 'MOUNT', 'MOUSE', 'MOUTH', 'MOVED', 'MOVIE',\n  'MUSIC', 'NEEDS', 'NEVER', 'NEWLY', 'NIGHT', 'NOISE', 'NORTH', 'NOTED', 'NOVEL', 'NURSE',\n  'OCCUR', 'OCEAN', 'OFFER', 'OFTEN', 'ORDER', 'OTHER', 'OUGHT', 'PAINT', 'PANEL', 'PAPER',\n  'PARTY', 'PEACE', 'PETER', 'PHASE', 'PHONE', 'PHOTO', 'PIANO', 'PIECE', 'PILOT', 'PITCH',\n  'PLACE', 'PLAIN', 'PLANE', 'PLANT', 'PLATE', 'POINT', 'POUND', 'POWER', 'PRESS', 'PRICE',\n  'PRIDE', 'PRIME', 'PRINT', 'PRIOR', 'PRIZE', 'PROOF', 'PROUD', 'PROVE', 'QUEEN', 'QUERY',\n  'QUIET', 'QUITE', 'RADIO', 'RAISE', 'RANGE', 'RAPID', 'RATIO', 'REACH', 'READY', 'REALM',\n  'REBEL', 'REFER', 'RELAX', 'REPAY', 'REPLY', 'RIGHT', 'RIGID', 'RISKY', 'RIVER', 'ROBIN',\n  'ROGER', 'ROMAN', 'ROUGH', 'ROUND', 'ROUTE', 'ROYAL', 'RURAL', 'SCALE', 'SCENE', 'SCOPE',\n  'SCORE', 'SENSE', 'SERVE', 'SETUP', 'SEVEN', 'SHALL', 'SHAPE', 'SHARE', 'SHARP', 'SHEET',\n  'SHELF', 'SHELL', 'SHIFT', 'SHINE', 'SHIRT', 'SHOCK', 'SHOOT', 'SHORT', 'SHOWN', 'SIDES',\n  'SIGHT', 'SILLY', 'SINCE', 'SIXTH', 'SIXTY', 'SIZED', 'SKILL', 'SLEEP', 'SLIDE', 'SMALL',\n  'SMART', 'SMILE', 'SMITH', 'SMOKE', 'SOLID', 'SOLVE', 'SORRY', 'SOUND', 'SOUTH', 'SPACE',\n  'SPARE', 'SPEAK', 'SPEED', 'SPEND', 'SPENT', 'SPLIT', 'SPOKE', 'SPORT', 'SQUAD', 'STAFF',\n  'STAGE', 'STAKE', 'STAND', 'START', 'STATE', 'STAYS', 'STEAL', 'STEAM', 'STEEL', 'STEEP',\n  'STEER', 'STERN', 'STICK', 'STILL', 'STOCK', 'STONE', 'STOOD', 'STORE', 'STORM', 'STORY',\n  'STRIP', 'STUCK', 'STUDY', 'STUFF', 'STYLE', 'SUGAR', 'SUITE', 'SUPER', 'SWEET', 'SWIFT',\n  'SWING', 'SWISS', 'TABLE', 'TAKEN', 'TASTE', 'TAXES', 'TEACH', 'TEARS', 'TEDDY', 'TEETH',\n  'TERRY', 'TEXAS', 'THANK', 'THEFT', 'THEIR', 'THEME', 'THERE', 'THESE', 'THICK', 'THING',\n  'THINK', 'THIRD', 'THOSE', 'THREE', 'THREW', 'THROW', 'THUMB', 'TIGHT', 'TIMER', 'TIMES',\n  'TIRED', 'TITLE', 'TODAY', 'TOKEN', 'TOTAL', 'TOUCH', 'TOUGH', 'TOWER', 'TRACK', 'TRADE',\n  'TRAIN', 'TREAT', 'TREND', 'TRIAL', 'TRIBE', 'TRICK', 'TRIED', 'TRIES', 'TRULY', 'TRUNK',\n  'TRUST', 'TRUTH', 'TWICE', 'TWINS', 'TWIST', 'TYLER', 'TYPES', 'UNCLE', 'UNDUE', 'UNION',\n  'UNITY', 'UNTIL', 'UPPER', 'UPSET', 'URBAN', 'USAGE', 'USUAL', 'VALID', 'VALUE', 'VIDEO',\n  'VIRUS', 'VISIT', 'VITAL', 'VOCAL', 'VOICE', 'WASTE', 'WATCH', 'WATER', 'WHEEL', 'WHERE',\n  'WHICH', 'WHILE', 'WHITE', 'WHOLE', 'WHOSE', 'WOMAN', 'WOMEN', 'WORLD', 'WORRY', 'WORSE',\n  'WORST', 'WORTH', 'WOULD', 'WRITE', 'WRONG', 'WROTE', 'YOUNG', 'YOURS', 'YOUTH',\n  // Additional common words for expanded validation\n  'BADGE', 'BAGEL', 'BANKS', 'BATCH', 'BEATS', 'BELLY', 'BIKES', 'BILLS', 'BIRDS', 'BLAST',\n  'BLEND', 'BLESS', 'BLINK', 'BLISS', 'BLOOM', 'BLUES', 'BLUNT', 'BOATS', 'BONES', 'BOOKS',\n  'BOOTS', 'BOXES', 'BRICK', 'BRIDE', 'BRINK', 'BRISK', 'BROOK', 'BRUSH', 'BULKS', 'BUMPS',\n  'BUNCH', 'BUNNY', 'BURNS', 'BURST', 'BUSES', 'CABIN', 'CAKES', 'CALLS', 'CAMEL', 'CANDY',\n  'CANES', 'CARDS', 'CARGO', 'CASES', 'CAVES', 'CEDAR', 'CHILL', 'CHIPS', 'CHUNK', 'CIVIC',\n  'CLAMP', 'CLASH', 'CLERK', 'CLIFF', 'CLING', 'CLOTH', 'CLUBS', 'CLUES', 'CODES', 'COINS',\n  'COLOR', 'COMES', 'COMET', 'COMIC', 'CORAL', 'CORPS', 'COSTS', 'COUCH', 'COUGH', 'CRACK',\n  'CRANE', 'CREEK', 'CREEP', 'CRISP', 'CROPS', 'CRUSH', 'CYBER', 'DADDY', 'DAIRY', 'DAISY',\n  'DANDY', 'DARES', 'DEALS', 'DEBIT', 'DECKS', 'DELUX', 'DEMON', 'DENSE', 'DEPOT', 'DERBY',\n  'DESKS', 'DEVIL', 'DIARY', 'DICED', 'DIGIT', 'DIMES', 'DINER', 'DIRTY', 'DISCO', 'DITCH',\n  'DIVED', 'DIVER', 'DIZZY', 'DOCKS', 'DODGE', 'DOLLS', 'DOORS', 'DOSED', 'DOUGH', 'DOVES',\n  'DOWNS', 'DRAIN', 'DRAKE', 'DRIED', 'DRIFT', 'DRONE', 'DRUMS', 'DRUNK', 'DUCKS', 'DUNES',\n  'DUSTY', 'DUTCH', 'EAGLE', 'EATER', 'EDGES', 'EGYPT', 'ELDER', 'ELECT', 'ENDED', 'EXAMS',\n  'EXCEL', 'EXITS', 'FABLE', 'FACED', 'FACTS', 'FADED', 'FAILS', 'FAINT', 'FAIRY', 'FALLS',\n  'FANCY', 'FARMS', 'FATAL', 'FAVOR', 'FEAST', 'FEELS', 'FENCE', 'FERRY', 'FETCH', 'FEVER',\n  'FILES', 'FILLS', 'FILMS', 'FINDS', 'FINES', 'FIRED', 'FIRMS', 'FISHY', 'FLAGS', 'FLAME',\n  'FLANK', 'FLASK', 'FLATS', 'FLESH', 'FLIES', 'FLING', 'FLIPS', 'FLOAT', 'FLOCK', 'FLOOD',\n  'FLOUR', 'FLOWS', 'FLUSH', 'FOAMS', 'FOLKS', 'FONTS', 'FOODS', 'FORMS', 'FOXES', 'FREAK',\n  'FREED', 'FRIED', 'FROST', 'FUDGE', 'FUNDS', 'FUZZY', 'GAMES', 'GANGS', 'GATES', 'GEARS',\n  'GENES', 'GENUS', 'GHOST', 'GIFTS', 'GIRLS', 'GIVES', 'GLOVE', 'GOALS', 'GOATS', 'GODLY',\n  'GOODS', 'GRAIN', 'GRAPE', 'GRAPH', 'GRASP', 'GREED', 'GREET', 'GRIDS', 'GRIEF', 'GRILL',\n  'GRIND', 'GRIPS', 'GROWS', 'GUILD', 'GUILT', 'HABIT', 'HALLS', 'HANDS', 'HANDY', 'HARSH',\n  'HASTE', 'HATED', 'HAVEN', 'HEADS', 'HEALS', 'HEARD', 'HEDGE', 'HEELS', 'HELPS', 'HERBS',\n  'HERDS', 'HILLS', 'HINTS', 'HIRED', 'HOBBY', 'HOLDS', 'HOLES', 'HOLLY', 'HOMES', 'HONEY',\n  'HOOKS', 'HOPES', 'HORNS', 'HOSTS', 'HOURS', 'HOVER', 'HUMOR', 'HURRY', 'HURTS', 'HYPER',\n  'ICONS', 'IDEAS', 'IDIOT', 'IMPLY', 'INDIA', 'INTEL', 'INTRO', 'IRISH', 'IRONS', 'ITEMS',\n  'JEANS', 'JELLY', 'JEWEL', 'JOKES', 'JUICE', 'JUMBO', 'JUMPS', 'KEEPS', 'KICKS', 'KILLS',\n  'KINDS', 'KINGS', 'KNIFE', 'KNOCK', 'KNOTS', 'KNOWS', 'LABOR', 'LACKS', 'LAKES', 'LAMPS',\n  'LANDS', 'LANES', 'LASTS', 'LEADS', 'LEAFS', 'LEDGE', 'LEMON', 'LIFTS', 'LIKED', 'LIKES',\n  'LINES', 'LIONS', 'LISTS', 'LIVED', 'LIVER', 'LOADS', 'LOANS', 'LOBBY', 'LOCKS', 'LODGE',\n  'LOGIC', 'LOOKS', 'LOOPS', 'LORDS', 'LOVED', 'LOVER', 'LOVES', 'LOYAL', 'LUNGS', 'MAKES',\n  'MALES', 'MALLS', 'MANOR', 'MAPLE', 'MARKS', 'MARSH', 'MASSA', 'MATES', 'MEALS', 'MEANS',\n  'MEATS', 'MEDAL', 'MEETS', 'MELON', 'MENUS', 'MERCY', 'MERGE', 'MERIT', 'MERRY', 'METER',\n  'METRO', 'MIDST', 'MILES', 'MINDS', 'MINES', 'MIXER', 'MODES', 'MONKS', 'MOODS', 'MOULD',\n  'MOUND', 'MOVER', 'MOVES', 'MUDDY', 'MYTHS', 'NAILS', 'NAMES', 'NASTY', 'NERVE', 'NESTS',\n  'NINTH', 'NODES', 'NOSES', 'NOTES', 'OATHS', 'OLDER', 'OLIVE', 'OPENS', 'OPERA', 'ORGAN',\n  'OUNCE', 'OUTER', 'OWNED', 'OWNER', 'PACED', 'PACKS', 'PAGES', 'PAINS', 'PAIRS', 'PALMS',\n  'PANIC', 'PANTS', 'PARKS', 'PARTS', 'PASTA', 'PASTE', 'PATCH', 'PATHS', 'PAUSE', 'PEAKS',\n  'PEARS', 'PENNY', 'PICKS', 'PILES', 'PILLS', 'PINCH', 'PIPES', 'PIZZA', 'PLAIN', 'PLAYS',\n  'PLAZA', 'PLOTS', 'POEMS', 'POLAR', 'POLES', 'POOLS', 'PORTS', 'POSED', 'POSTS', 'POURS',\n  'PROPS', 'PULLS', 'PUMPS', 'PUNCH', 'PUPIL', 'QUEST', 'QUICK', 'QUOTE', 'RACES', 'RAILS',\n  'RAINS', 'RALLY', 'RANCH', 'RANKS', 'RATES', 'READS', 'RELAY', 'REMIX', 'RENEW', 'RESET',\n  'RIDES', 'RINGS', 'RISKS', 'RIVAL', 'ROADS', 'ROAST', 'ROBOT', 'ROCKS', 'ROCKY', 'ROLES',\n  'ROLLS', 'ROOMS', 'ROOTS', 'ROPES', 'ROSES', 'RULES', 'SAFER', 'SALES', 'SALON', 'SANDY',\n  'SAUCE', 'SAVED', 'SAVES', 'SCARE', 'SCOTS', 'SCRUB', 'SEATS', 'SEEDS', 'SEEMS', 'SELLS',\n  'SENDS', 'SETUP', 'SHADE', 'SHAKE', 'SHALL', 'SHAME', 'SHARK', 'SHELF', 'SHIPS', 'SHOES',\n  'SHOPS', 'SHOTS', 'SHOWS', 'SHUTS', 'SIDED', 'SIGNS', 'SINGS', 'SINKS', 'SITES', 'SIZES',\n  'SKINS', 'SKULL', 'SLIPS', 'SLOPE', 'SLOTS', 'SMELL', 'SNAKE', 'SNAPS', 'SNOWY', 'SOCKS',\n  'SOLAR', 'SONGS', 'SORTS', 'SOULS', 'SPARK', 'SPECS', 'SPELL', 'SPINE', 'SPOTS', 'SPRAY',\n  'STAIN', 'STARE', 'STEAD', 'STEMS', 'STEPS', 'STING', 'STINK', 'STOPS', 'SUITS', 'SUNNY',\n  'SWEPT', 'SWORD', 'TAKES', 'TALES', 'TALKS', 'TANKS', 'TAPES', 'TASKS', 'TEAMS', 'TELLS',\n  'TENDS', 'TERMS', 'TESTS', 'THICK', 'TIDAL', 'TIGER', 'TILES', 'TOMBS', 'TOOLS', 'TOOTH',\n  'TOURS', 'TOWNS', 'TRADE', 'TRAIL', 'TRASH', 'TREES', 'TRIPS', 'TRUCK', 'TUBES', 'TUNES',\n  'TURNS', 'TYPED', 'UNDER', 'UNITE', 'URGED', 'USERS', 'USING', 'VALVE', 'VENUE', 'VIEWS',\n  'VINYL', 'WAGES', 'WAIST', 'WAITS', 'WALKS', 'WALLS', 'WANTS', 'WARDS', 'WARMS', 'WARNS',\n  'WAVES', 'WEARY', 'WEEDS', 'WEEKS', 'WELLS', 'WHIPS', 'WIDER', 'WILDS', 'WINDS', 'WINES',\n  'WINGS', 'WINKS', 'WIPES', 'WIRED', 'WIRES', 'WITCH', 'WOODS', 'WORDS', 'WORKS', 'WOVEN',\n  'WRAPS', 'YARDS', 'YEARS', 'YIELD', 'ZONES',\n  // Additional common 5-letter words to improve acceptance\n  'GLIDE', 'GHOUL', 'GHOST', 'GIVES', 'GLOBE', 'GLORY', 'GOALS', 'GOING', 'GOODS', 'GRACE',\n  'GRADE', 'GRAIN', 'GRAND', 'GRANT', 'GRAPE', 'GRASP', 'GRASS', 'GRAVE', 'GREAT', 'GREED',\n  'GREEN', 'GREET', 'GRIEF', 'GRILL', 'GRIND', 'GRIPS', 'GROWN', 'GROWS', 'GUARD', 'GUESS',\n  'GUEST', 'GUIDE', 'GUILD', 'GUILT', 'HABIT', 'HANDS', 'HANDY', 'HAPPY', 'HARSH', 'HAVEN',\n  'HEADS', 'HEALS', 'HEARD', 'HEART', 'HEAVY', 'HELPS', 'HERBS', 'HILLS', 'HINTS', 'HIRED',\n  'HOBBY', 'HOLDS', 'HOLES', 'HOMES', 'HONEY', 'HOOKS', 'HOPES', 'HORSE', 'HOSTS', 'HOURS',\n  'HOUSE', 'HUMAN', 'HUMOR', 'HURRY', 'HURTS', 'IDEAS', 'IMAGE', 'INNER', 'INPUT', 'ISSUE',\n  'ITEMS', 'JEANS', 'JEWEL', 'JOKES', 'JUDGE', 'JUICE', 'JUMPS', 'KEEPS', 'KILLS', 'KINDS',\n  'KNOWS', 'LABEL', 'LACKS', 'LAKES', 'LANDS', 'LARGE', 'LASER', 'LATER', 'LAUGH', 'LAYER',\n  'LEADS', 'LEARN', 'LEASE', 'LEAST', 'LEAVE', 'LEGAL', 'LEMON', 'LEVEL', 'LIGHT', 'LIKES',\n  'LIMIT', 'LINES', 'LINKS', 'LISTS', 'LIVED', 'LIVES', 'LOADS', 'LOANS', 'LOCAL', 'LOCKS',\n  'LOGIC', 'LOOKS', 'LOOPS', 'LOVED', 'LOVES', 'LOWER', 'LUCKY', 'LUNCH', 'MAGIC', 'MAJOR',\n  'MAKES', 'MARCH', 'MATCH', 'MAYBE', 'MEALS', 'MEANS', 'MEANT', 'MEDIA', 'MEETS', 'METAL',\n  'MIGHT', 'MILES', 'MINDS', 'MIXED', 'MODEL', 'MONEY', 'MONTH', 'MORAL', 'MOTOR', 'MOUNT',\n  'MOUSE', 'MOUTH', 'MOVED', 'MOVES', 'MOVIE', 'MUSIC', 'NEEDS', 'NEVER', 'NIGHT', 'NOISE',\n  'NORTH', 'NOTED', 'NOTES', 'NOVEL', 'NURSE', 'OCEAN', 'OFFER', 'OFTEN', 'ORDER', 'OTHER',\n  'OUGHT', 'OWNED', 'OWNER', 'PAGES', 'PAINT', 'PAIRS', 'PAPER', 'PARKS', 'PARTS', 'PARTY',\n  'PATHS', 'PEACE', 'PHASE', 'PHONE', 'PHOTO', 'PIANO', 'PIECE', 'PILOT', 'PLACE', 'PLAIN',\n  'PLANE', 'PLANT', 'PLATE', 'PLAYS', 'POINT', 'POUND', 'POWER', 'PRESS', 'PRICE', 'PRIDE',\n  'PRIME', 'PRINT', 'PRIOR', 'PROOF', 'PROUD', 'PROVE', 'QUEEN', 'QUICK', 'QUIET', 'QUITE',\n  'RADIO', 'RAISE', 'RANGE', 'RAPID', 'REACH', 'READY', 'REBEL', 'REFER', 'RELAX', 'REPLY',\n  'RIGHT', 'RIVER', 'ROADS', 'ROBOT', 'ROLES', 'ROMAN', 'ROOMS', 'ROOTS', 'ROUGH', 'ROUND',\n  'ROUTE', 'ROYAL', 'RULES', 'SAFER', 'SALES', 'SAUCE', 'SAVED', 'SAVES', 'SCALE', 'SCENE',\n  'SCOPE', 'SCORE', 'SENSE', 'SERVE', 'SEVEN', 'SHADE', 'SHAKE', 'SHALL', 'SHAME', 'SHAPE',\n  'SHARE', 'SHARP', 'SHEET', 'SHELF', 'SHELL', 'SHIFT', 'SHINE', 'SHIRT', 'SHOCK', 'SHOOT',\n  'SHORT', 'SHOWN', 'SHOWS', 'SIDES', 'SIGHT', 'SIGNS', 'SILLY', 'SINCE', 'SIXTH', 'SKILL',\n  'SLEEP', 'SLIDE', 'SMALL', 'SMART', 'SMILE', 'SMOKE', 'SOLID', 'SOLVE', 'SORRY', 'SOUND',\n  'SOUTH', 'SPACE', 'SPARE', 'SPEAK', 'SPEED', 'SPEND', 'SPENT', 'SPLIT', 'SPOKE', 'SPORT',\n  'STAFF', 'STAGE', 'STAKE', 'STAND', 'START', 'STATE', 'STAYS', 'STEAM', 'STEEL', 'STEPS',\n  'STICK', 'STILL', 'STOCK', 'STONE', 'STOOD', 'STORE', 'STORM', 'STORY', 'STUCK', 'STUDY',\n  'STUFF', 'STYLE', 'SUGAR', 'SUITE', 'SUPER', 'SWEET', 'SWIFT', 'SWING', 'TABLE', 'TAKES',\n  'TALKS', 'TASKS', 'TASTE', 'TAXES', 'TEACH', 'TEAMS', 'TELLS', 'TERMS', 'TESTS', 'THANK',\n  'THEIR', 'THEME', 'THERE', 'THESE', 'THICK', 'THING', 'THINK', 'THIRD', 'THOSE', 'THREE',\n  'THREW', 'THROW', 'THUMB', 'TIGHT', 'TIMES', 'TIRED', 'TITLE', 'TODAY', 'TOKEN', 'TOOLS',\n  'TOTAL', 'TOUCH', 'TOUGH', 'TOWER', 'TOWNS', 'TRACK', 'TRADE', 'TRAIN', 'TREES', 'TRIED',\n  'TRIES', 'TRULY', 'TRUST', 'TRUTH', 'TWICE', 'TYPES', 'UNCLE', 'UNDER', 'UNION', 'UNITY',\n  'UNTIL', 'UPPER', 'URBAN', 'USAGE', 'USERS', 'USING', 'USUAL', 'VALID', 'VALUE', 'VIDEO',\n  'VIEWS', 'VIRUS', 'VISIT', 'VITAL', 'VOICE', 'WASTE', 'WATCH', 'WATER', 'WAVES', 'WEEKS',\n  'WELLS', 'WHEEL', 'WHERE', 'WHICH', 'WHILE', 'WHITE', 'WHOLE', 'WHOSE', 'WIDER', 'WINDS',\n  'WINGS', 'WOMAN', 'WOMEN', 'WORDS', 'WORKS', 'WORLD', 'WORRY', 'WORSE', 'WORST', 'WORTH',\n  'WOULD', 'WRITE', 'WRONG', 'WROTE', 'YOUNG', 'YOURS', 'YOUTH'\n]);","size_bytes":14283},"server/word-expander.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nlet openai: OpenAI | null = null;\n\nfunction getOpenAIClient(): OpenAI {\n  if (!openai && process.env.OPENAI_API_KEY) {\n    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  }\n  if (!openai) {\n    throw new Error(\"OpenAI API key not configured\");\n  }\n  return openai;\n}\n\nexport interface ExpandedWordSet {\n  common: string[];\n  intermediate: string[];\n  advanced: string[];\n  categories: {\n    [category: string]: string[];\n  };\n}\n\nexport async function generateExpandedWordLibrary(): Promise<ExpandedWordSet> {\n  const client = getOpenAIClient();\n  \n  const categories = [\n    'animals', 'nature', 'food', 'emotions', 'actions', 'objects', 'colors',\n    'weather', 'sports', 'music', 'travel', 'science', 'technology', 'art',\n    'business', 'health', 'education', 'family', 'time', 'space', 'materials',\n    'tools', 'buildings', 'clothing', 'plants', 'transportation', 'games'\n  ];\n\n  const wordSets: ExpandedWordSet = {\n    common: [],\n    intermediate: [],\n    advanced: [],\n    categories: {}\n  };\n\n  try {\n    // Generate common words (most frequently used in English)\n    const commonWordsPrompt = `Generate 200 common 5-letter English words that are:\n- Very frequently used in everyday English\n- Known by most native speakers\n- Suitable for word games\n- All exactly 5 letters\n- Real dictionary words only\n- No proper nouns, abbreviations, or slang\n\nReturn as JSON: {\"words\": [\"ABOUT\", \"ABOVE\", ...]}`;\n\n    const commonResponse = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: commonWordsPrompt }],\n      response_format: { type: \"json_object\" }\n    });\n\n    const commonWords = JSON.parse(commonResponse.choices[0].message.content!);\n    wordSets.common = commonWords.words;\n\n    // Generate intermediate words\n    const intermediateWordsPrompt = `Generate 200 intermediate 5-letter English words that are:\n- Moderately challenging but still recognizable\n- More sophisticated than basic vocabulary\n- Suitable for word games\n- All exactly 5 letters\n- Real dictionary words only\n- Different from common everyday words\n\nReturn as JSON: {\"words\": [\"BLEND\", \"CHARM\", ...]}`;\n\n    const intermediateResponse = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: intermediateWordsPrompt }],\n      response_format: { type: \"json_object\" }\n    });\n\n    const intermediateWords = JSON.parse(intermediateResponse.choices[0].message.content!);\n    wordSets.intermediate = intermediateWords.words;\n\n    // Generate advanced words\n    const advancedWordsPrompt = `Generate 150 advanced 5-letter English words that are:\n- Less common but still legitimate English words\n- Found in standard dictionaries\n- Challenging but fair for word games\n- All exactly 5 letters\n- Real dictionary words only\n- More sophisticated vocabulary\n\nReturn as JSON: {\"words\": [\"AZURE\", \"BERTH\", ...]}`;\n\n    const advancedResponse = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: advancedWordsPrompt }],\n      response_format: { type: \"json_object\" }\n    });\n\n    const advancedWords = JSON.parse(advancedResponse.choices[0].message.content!);\n    wordSets.advanced = advancedWords.words;\n\n    // Generate category-specific words (in batches to avoid token limits)\n    for (let i = 0; i < categories.length; i += 3) {\n      const categoryBatch = categories.slice(i, i + 3);\n      \n      const categoryPrompt = `Generate 30 unique 5-letter English words for each category: ${categoryBatch.join(', ')}.\n\nRequirements:\n- All words must be exactly 5 letters\n- Real English dictionary words only\n- Related to the specific category\n- No proper nouns or abbreviations\n- Suitable for word games\n\nReturn as JSON: {\n  \"${categoryBatch[0]}\": [\"TIGER\", \"HORSE\", ...],\n  ${categoryBatch[1] ? `\"${categoryBatch[1]}\": [\"BEACH\", \"WOODS\", ...],` : ''}\n  ${categoryBatch[2] ? `\"${categoryBatch[2]}\": [\"BREAD\", \"APPLE\", ...]` : ''}\n}`;\n\n      const categoryResponse = await client.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: categoryPrompt }],\n        response_format: { type: \"json_object\" }\n      });\n\n      const categoryWords = JSON.parse(categoryResponse.choices[0].message.content!);\n      Object.assign(wordSets.categories, categoryWords);\n    }\n\n  } catch (error) {\n    console.error('Error generating expanded word library:', error);\n    throw error;\n  }\n\n  return wordSets;\n}\n\nexport async function getAllExpandedWords(): Promise<string[]> {\n  try {\n    const wordSets = await generateExpandedWordLibrary();\n    \n    const allWords = [\n      ...wordSets.common,\n      ...wordSets.intermediate,\n      ...wordSets.advanced,\n      ...Object.values(wordSets.categories).flat()\n    ];\n\n    // Remove duplicates and ensure all are uppercase 5-letter words\n    const uniqueWords = Array.from(new Set(allWords))\n      .map(word => word.toUpperCase())\n      .filter(word => word.length === 5 && /^[A-Z]+$/.test(word));\n\n    console.log(`Generated ${uniqueWords.length} unique 5-letter words from OpenAI`);\n    return uniqueWords;\n\n  } catch (error) {\n    console.error('Failed to generate expanded words:', error);\n    throw error;\n  }\n}","size_bytes":5380},"server/word-manager.ts":{"content":"import { generateWords, generateDailyChallengeWords, generateWordsByCategory } from './openai-words';\nimport { getRandomAnswerWord, getThemedWord, ANSWER_WORDS } from '@shared/comprehensive-word-list';\n\n// Enhanced word categories with larger sets\nconst ENHANCED_WORD_CATEGORIES = {\n  nature: ['OCEAN', 'RIVER', 'BEACH', 'FIELD', 'PLANT', 'STONE', 'CLOUD', 'STORM', 'WOODS', 'GRASS', 'WATER', 'EARTH', 'WINDS', 'WAVES', 'BLOOM', 'FRESH', 'SUNNY'],\n  emotions: ['HAPPY', 'BRAVE', 'PROUD', 'LOVED', 'EAGER', 'MERRY', 'SWEET', 'SMILE', 'PEACE', 'GRACE', 'CHARM', 'TRUST', 'PRIDE', 'DREAM', 'HOPES', 'BLISS', 'CHEER'],\n  actions: ['DANCE', 'CLIMB', 'WRITE', 'PAINT', 'BUILD', 'LEARN', 'TEACH', 'LAUGH', 'REACH', 'SWIFT', 'SPEED', 'FLASH', 'SPARK', 'SHINE', 'GLIDE', 'DRIFT', 'FLOAT'],\n  colors: ['GREEN', 'WHITE', 'BLACK', 'CORAL', 'AMBER', 'ROUGE', 'IVORY', 'AZURE', 'EBONY', 'LIGHT', 'BRIGHT', 'SHADE'],\n  tech: ['CYBER', 'PIXEL', 'BYTES', 'NODES', 'VIRAL', 'CLOUD', 'SMART', 'CODED', 'LINKS', 'FEEDS', 'TREND', 'BLEND', 'MERGE'],\n  fantasy: ['MAGIC', 'SPELL', 'CHARM', 'FAIRY', 'QUEST', 'REALM', 'MYTHS', 'ROYAL', 'CROWN', 'VALOR', 'HONOR', 'GLORY'],\n  objects: ['CHAIR', 'TABLE', 'BOOKS', 'PHONE', 'WATCH', 'LIGHT', 'MUSIC', 'GLASS', 'PAPER', 'TOOLS']\n};\n\n// Cache for OpenAI-generated words\nlet wordCache: {\n  [key: string]: {\n    words: string[];\n    timestamp: number;\n  }\n} = {};\n\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\nexport class WordManager {\n  private static instance: WordManager;\n  \n  static getInstance(): WordManager {\n    if (!WordManager.instance) {\n      WordManager.instance = new WordManager();\n    }\n    return WordManager.instance;\n  }\n\n  private isCacheValid(key: string): boolean {\n    const cached = wordCache[key];\n    if (!cached) return false;\n    return Date.now() - cached.timestamp < CACHE_DURATION;\n  }\n\n  async getRandomWord(): Promise<string> {\n    // Use comprehensive built-in word list (500+ curated answer words)\n    try {\n      if (process.env.OPENAI_API_KEY) {\n        const cacheKey = 'random_words';\n        if (!this.isCacheValid(cacheKey)) {\n          const generatedWords = await generateWords({\n            category: 'general',\n            difficulty: 'medium',\n            count: 100\n          });\n          wordCache[cacheKey] = {\n            words: generatedWords.map(w => w.word),\n            timestamp: Date.now()\n          };\n        }\n        \n        const cachedWords = wordCache[cacheKey].words;\n        return cachedWords[Math.floor(Math.random() * cachedWords.length)];\n      }\n    } catch (error) {\n      console.log('OpenAI unavailable, using built-in words');\n    }\n\n    // Fallback to comprehensive built-in word list (500+ curated answer words)\n    return getRandomAnswerWord();\n  }\n\n  async getDailyWord(): Promise<string> {\n    // Use date-based seed for consistency\n    const today = new Date();\n    const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 1000 / 60 / 60 / 24);\n    \n    // Use comprehensive built-in word list for daily words\n    return ANSWER_WORDS[dayOfYear % ANSWER_WORDS.length];\n  }\n\n  private hashString(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  async getCategoryWord(category: string): Promise<string> {\n    try {\n      if (process.env.OPENAI_API_KEY) {\n        const cacheKey = `category_${category}`;\n        if (!this.isCacheValid(cacheKey)) {\n          const generatedWords = await generateWordsByCategory(category, 50);\n          if (generatedWords.length > 0) {\n            wordCache[cacheKey] = {\n              words: generatedWords,\n              timestamp: Date.now()\n            };\n          }\n        }\n        \n        if (this.isCacheValid(cacheKey)) {\n          const cachedWords = wordCache[cacheKey].words;\n          return cachedWords[Math.floor(Math.random() * cachedWords.length)];\n        }\n      }\n    } catch (error) {\n      console.log(`OpenAI unavailable for category ${category}, using built-in words`);\n    }\n\n    // Fallback to themed words from comprehensive list\n    try {\n      return getThemedWord(category as any);\n    } catch {\n      // If category not found, return random answer word\n      return getRandomAnswerWord();\n    }\n  }\n\n\n\n  // Get available categories\n  getAvailableCategories(): string[] {\n    return Object.keys(ENHANCED_WORD_CATEGORIES);\n  }\n\n  // Refresh cache for a specific category\n  async refreshCategory(category: string): Promise<void> {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error('OpenAI API key required for cache refresh');\n    }\n    \n    try {\n      const generatedWords = await generateWordsByCategory(category, 50);\n      if (generatedWords.length > 0) {\n        const cacheKey = `category_${category}`;\n        wordCache[cacheKey] = {\n          words: generatedWords,\n          timestamp: Date.now()\n        };\n      }\n    } catch (error) {\n      console.error(`Failed to refresh category ${category}:`, error);\n      throw error;\n    }\n  }\n\n  // Get cache statistics\n  getCacheStats(): Record<string, any> {\n    const stats: Record<string, any> = {};\n    for (const [key, cache] of Object.entries(wordCache)) {\n      stats[key] = {\n        wordCount: cache.words.length,\n        lastUpdated: new Date(cache.timestamp).toISOString(),\n        isValid: this.isCacheValid(key)\n      };\n    }\n    return stats;\n  }\n}\n\nexport const wordManager = WordManager.getInstance();","size_bytes":5612},"server/word-validator.ts":{"content":"import OpenAI from \"openai\";\nimport { getAllExpandedWords } from './word-expander';\nimport { getWordSets } from '@shared/comprehensive-word-list';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nlet openai: OpenAI | null = null;\nlet expandedWordsCache: Set<string> | null = null;\nlet expandedWordsCacheTime = 0;\nconst EXPANDED_CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\nfunction getOpenAIClient(): OpenAI | null {\n  if (!openai && process.env.OPENAI_API_KEY) {\n    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  }\n  return openai;\n}\n\nasync function getExpandedWordsSet(): Promise<Set<string>> {\n  const now = Date.now();\n  \n  // Use cached expanded words if available and fresh\n  if (expandedWordsCache && (now - expandedWordsCacheTime) < EXPANDED_CACHE_DURATION) {\n    return expandedWordsCache;\n  }\n  \n  try {\n    console.log('Generating expanded word library from OpenAI...');\n    const expandedWords = await getAllExpandedWords();\n    expandedWordsCache = new Set(expandedWords);\n    expandedWordsCacheTime = now;\n    console.log(`Cached ${expandedWords.length} expanded words from OpenAI`);\n    return expandedWordsCache;\n  } catch (error) {\n    console.error('Failed to get expanded words, using existing cache or empty set:', error);\n    return expandedWordsCache || new Set();\n  }\n}\n\n// Cache for validated words to avoid repeated API calls\nconst validatedWords = new Map<string, CacheEntry>();\nconst CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 hours\n\ninterface CacheEntry {\n  isValid: boolean;\n  timestamp: number;\n}\n\nexport async function validateWordWithOpenAI(word: string): Promise<boolean> {\n  const upperWord = word.toUpperCase();\n  \n  // Check cache first\n  const cached = validatedWords.get(upperWord);\n  if (cached && Date.now() - cached.timestamp < CACHE_EXPIRY) {\n    return cached.isValid;\n  }\n\n  const client = getOpenAIClient();\n  if (!client) {\n    console.log('OpenAI not available for word validation, using fallback');\n    return false;\n  }\n\n  try {\n    const response = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a word validator for a Wordle game. Respond with ONLY 'true' or 'false' to indicate if the given word is a valid 5-letter English word found in standard dictionaries. No proper nouns, abbreviations, or slang words.\"\n        },\n        {\n          role: \"user\",\n          content: `Is \"${upperWord}\" a valid 5-letter English word?`\n        }\n      ],\n      temperature: 0,\n      max_tokens: 10\n    });\n\n    const result = response.choices[0].message.content?.toLowerCase().trim();\n    const isValid = result === 'true';\n\n    // Cache the result\n    validatedWords.set(upperWord, {\n      isValid,\n      timestamp: Date.now()\n    } as CacheEntry);\n\n    return isValid;\n  } catch (error) {\n    console.error('Error validating word with OpenAI:', error);\n    return false;\n  }\n}\n\nexport async function validateWordExpanded(word: string, fallbackDictionary: Set<string>): Promise<boolean> {\n  const upperWord = word.toUpperCase();\n  \n  // First check comprehensive built-in dictionary for speed (10,000+ words including custom)\n  const { guessSet } = getWordSets();\n  if (guessSet.has(upperWord)) {\n    return true;\n  }\n\n  // Check old fallback dictionary for backwards compatibility\n  if (fallbackDictionary.has(upperWord)) {\n    return true;\n  }\n\n  // Check common word patterns and return true for likely valid words if OpenAI is unavailable\n  if (!process.env.OPENAI_API_KEY) {\n    return isLikelyValidWord(upperWord);\n  }\n\n  try {\n    // Then check with OpenAI for expanded validation\n    return await validateWordWithOpenAI(upperWord);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.log('OpenAI validation failed, using fallback validation:', errorMessage);\n    // Fallback to pattern-based validation if OpenAI fails\n    return isLikelyValidWord(upperWord);\n  }\n}\n\n// Fallback validation for common word patterns\nfunction isLikelyValidWord(word: string): boolean {\n  // Basic validation: must be 5 letters, all alphabetic\n  if (word.length !== 5 || !/^[A-Z]+$/.test(word)) {\n    return false;\n  }\n\n  // Reject obvious non-words (too many repeated letters, etc.)\n  const letterCounts = word.split('').reduce((acc, letter) => {\n    acc[letter] = (acc[letter] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  // Reject if any letter appears more than 3 times\n  if (Object.values(letterCounts).some(count => count > 3)) {\n    return false;\n  }\n\n  // Common 5-letter word patterns and endings that are likely valid\n  const commonEndings = ['ING', 'ION', 'TION', 'ED', 'ER', 'EST', 'LY', 'AL', 'IC', 'ABLE', 'IBLE'];\n  const commonPrefixes = ['UN', 'RE', 'IN', 'DIS', 'EN', 'NON', 'PRE', 'SUB', 'OVER', 'OUT'];\n  \n  // Check for common patterns\n  const hasCommonEnding = commonEndings.some(ending => word.endsWith(ending.slice(-Math.min(ending.length, 3))));\n  const hasCommonPrefix = commonPrefixes.some(prefix => word.startsWith(prefix.slice(0, Math.min(prefix.length, 2))));\n  \n  // Accept words with common patterns or that look like real words\n  return hasCommonEnding || hasCommonPrefix || hasReasonableLetterDistribution(word);\n}\n\nfunction hasReasonableLetterDistribution(word: string): boolean {\n  // Check for reasonable vowel/consonant distribution\n  const vowels = 'AEIOU';\n  const vowelCount = word.split('').filter(letter => vowels.includes(letter)).length;\n  const consonantCount = 5 - vowelCount;\n  \n  // Most English words have 1-3 vowels\n  if (vowelCount < 1 || vowelCount > 4) return false;\n  \n  // Avoid words with too many consecutive consonants\n  const consecutiveConsonants = word.match(/[BCDFGHJKLMNPQRSTVWXYZ]{4,}/);\n  if (consecutiveConsonants) return false;\n  \n  return true;\n}\n\n// Batch validation for multiple words (useful for performance)\nexport async function validateWordsInBatch(words: string[]): Promise<Record<string, boolean>> {\n  const results: Record<string, boolean> = {};\n  const client = getOpenAIClient();\n  \n  if (!client) {\n    // Fallback to returning all false if no OpenAI\n    words.forEach(word => results[word.toUpperCase()] = false);\n    return results;\n  }\n\n  try {\n    const wordList = words.map(w => w.toUpperCase()).join(', ');\n    const response = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a word validator. For each word in the list, respond with JSON indicating if it's a valid 5-letter English dictionary word. Format: {\\\"WORD1\\\": true, \\\"WORD2\\\": false, ...}\"\n        },\n        {\n          role: \"user\",\n          content: `Validate these 5-letter words: ${wordList}`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    // Cache all results and return\n    Object.entries(result).forEach(([word, isValid]) => {\n      validatedWords.set(word as string, {\n        isValid: isValid as boolean,\n        timestamp: Date.now()\n      } as CacheEntry);\n      results[word as string] = isValid as boolean;\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Error batch validating words:', error);\n    words.forEach(word => results[word.toUpperCase()] = false);\n    return results;\n  }\n}","size_bytes":7513},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const gameStats = pgTable(\"game_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalGames: integer(\"total_games\").notNull().default(0),\n  totalWins: integer(\"total_wins\").notNull().default(0),\n  currentStreak: integer(\"current_streak\").notNull().default(0),\n  maxStreak: integer(\"max_streak\").notNull().default(0),\n  totalPoints: integer(\"total_points\").notNull().default(0),\n  guessDistribution: text(\"guess_distribution\").notNull().default('{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0}'),\n  lastPlayed: timestamp(\"last_played\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const gameResults = pgTable(\"game_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  word: text(\"word\").notNull(),\n  attempts: integer(\"attempts\").notNull(),\n  timeElapsed: integer(\"time_elapsed\").notNull(),\n  points: integer(\"points\").notNull(),\n  isChallengeMode: boolean(\"is_challenge_mode\").notNull().default(false),\n  isWin: boolean(\"is_win\").notNull(),\n  playedAt: timestamp(\"played_at\").notNull().default(sql`now()`),\n});\n\nexport const insertGameStatsSchema = createInsertSchema(gameStats).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameResultSchema = createInsertSchema(gameResults).omit({\n  id: true,\n  playedAt: true,\n});\n\nexport type InsertGameStats = z.infer<typeof insertGameStatsSchema>;\nexport type GameStats = typeof gameStats.$inferSelect;\nexport type InsertGameResult = z.infer<typeof insertGameResultSchema>;\nexport type GameResult = typeof gameResults.$inferSelect;\n","size_bytes":1778},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Game from \"@/pages/game\";\nimport Stats from \"@/pages/stats\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/game\">\n        {(params) => <Game />}\n      </Route>\n      <Route path=\"/challenge\">\n        {(params) => <Game mode=\"challenge\" />}\n      </Route>\n      <Route path=\"/daily\">\n        {(params) => <Game mode=\"daily\" />}\n      </Route>\n      <Route path=\"/blind\">\n        {(params) => <Game mode=\"blind\" />}\n      </Route>\n      <Route path=\"/stats\" component={Stats} />\n      <Route path=\"/admin\">\n        {() => {\n          const Admin = React.lazy(() => import(\"@/pages/admin\"));\n          return (\n            <React.Suspense fallback={<div>Loading...</div>}>\n              <Admin />\n            </React.Suspense>\n          );\n        }}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1470},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Custom Wordle colors */\n  --wordle-correct: hsl(142, 72%, 29%);\n  --wordle-present: hsl(49, 89%, 48%);\n  --wordle-absent: hsl(212, 14%, 52%);\n  --wordle-empty: hsl(0, 0%, 100%);\n  --wordle-current: hsl(211, 100%, 95%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  \n  /* Font size multiplier for accessibility */\n  --font-size-multiplier: 1;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n    touch-action: manipulation;\n    -webkit-tap-highlight-color: transparent;\n  }\n}\n\n@layer components {\n  .game-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, hsl(0, 0%, 98%) 0%, hsl(211, 100%, 98%) 100%);\n  }\n\n  /* Accessibility: High Contrast Mode */\n  .high-contrast {\n    --wordle-correct: hsl(120, 100%, 20%);\n    --wordle-present: hsl(45, 100%, 30%);\n    --wordle-absent: hsl(0, 0%, 20%);\n    --border: hsl(0, 0%, 10%);\n  }\n\n  /* Accessibility: Color Blind Mode */\n  .color-blind-mode {\n    --wordle-correct: hsl(220, 85%, 45%);\n    --wordle-present: hsl(35, 90%, 50%);\n    --wordle-absent: hsl(0, 0%, 50%);\n  }\n\n  /* Accessibility: Reduced Motion */\n  .reduce-motion * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n\n  /* Font size scaling */\n  body {\n    font-size: calc(1rem * var(--font-size-multiplier));\n  }\n\n  .tile {\n    @apply aspect-square rounded-xl flex items-center justify-center font-bold shadow-lg transition-all duration-300 border-4 border-white/50 backdrop-blur-sm;\n    transform-style: preserve-3d;\n    font-size: clamp(1rem, 4vw, 1.5rem);\n  }\n\n  .tile-empty {\n    @apply bg-white/30 border-white/40 text-gray-600;\n  }\n\n  .tile-current {\n    @apply bg-gradient-to-br from-blue-300 to-cyan-400 border-blue-400 text-white shadow-xl;\n  }\n\n  .tile-correct {\n    @apply bg-gradient-to-br from-green-400 to-emerald-500 border-green-300 text-white shadow-xl;\n  }\n\n  .tile-present {\n    @apply bg-gradient-to-br from-yellow-400 to-orange-400 border-yellow-300 text-white shadow-xl;\n  }\n\n  .tile-absent {\n    @apply bg-gradient-to-br from-gray-400 to-slate-500 border-gray-300 text-white shadow-xl;\n  }\n\n  .keyboard-key {\n    @apply rounded-xl font-black transition-all duration-300 shadow-lg border-2 border-white/30 flex items-center justify-center;\n    height: clamp(2.5rem, 8vh, 3rem);\n    min-width: clamp(1.8rem, 6vw, 2.5rem);\n    font-size: clamp(1rem, 4vw, 1.25rem);\n    font-weight: 900;\n  }\n\n  .keyboard-key-default {\n    @apply bg-gradient-to-br from-white/80 to-gray-100/80 hover:from-gray-100 hover:to-gray-200 text-gray-800 backdrop-blur-sm;\n  }\n\n  .keyboard-key-correct {\n    @apply bg-gradient-to-br from-green-400 to-emerald-500 text-white shadow-xl;\n  }\n\n  .keyboard-key-present {\n    @apply bg-gradient-to-br from-yellow-400 to-orange-400 text-white shadow-xl;\n  }\n\n  .keyboard-key-absent {\n    @apply bg-gradient-to-br from-gray-400 to-slate-500 text-white shadow-xl;\n  }\n\n  .keyboard-key-special {\n    @apply bg-gradient-to-br from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white shadow-xl flex items-center justify-center;\n    padding: 0 clamp(0.5rem, 2vw, 0.75rem);\n    font-size: clamp(0.625rem, 2.5vw, 0.75rem);\n  }\n}\n\n@layer utilities {\n  .animate-flip {\n    animation: flip 0.6s ease-in-out;\n  }\n\n  .animate-bounce-in {\n    animation: bounceIn 0.6s ease-out;\n  }\n\n  .animate-shake {\n    animation: shake 0.5s ease-in-out;\n  }\n\n  .animate-confetti {\n    animation: confetti 0.5s ease-out;\n  }\n\n  @keyframes flip {\n    0% { transform: rotateY(0); }\n    50% { transform: rotateY(-90deg); }\n    100% { transform: rotateY(0); }\n  }\n\n  @keyframes bounceIn {\n    0% { transform: scale(0.3); opacity: 0; }\n    50% { transform: scale(1.05); }\n    70% { transform: scale(0.9); }\n    100% { transform: scale(1); opacity: 1; }\n  }\n\n  @keyframes shake {\n    0%, 100% { transform: translateX(0); }\n    10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }\n    20%, 40%, 60%, 80% { transform: translateX(2px); }\n  }\n\n  @keyframes confetti {\n    0% { transform: translateY(0) rotate(0deg); opacity: 1; }\n    100% { transform: translateY(-100px) rotate(180deg); opacity: 0; }\n  }\n\n  /* Falling letters animations */\n  @keyframes fall-0 {\n    0% {\n      transform: translateY(-100vh) rotate(0deg);\n      opacity: 0.1;\n    }\n    10% {\n      opacity: 0.3;\n    }\n    90% {\n      opacity: 0.3;\n    }\n    100% {\n      transform: translateY(100vh) rotate(360deg);\n      opacity: 0;\n    }\n  }\n\n  @keyframes fall-1 {\n    0% {\n      transform: translateY(-100vh) rotate(0deg);\n      opacity: 0.1;\n    }\n    10% {\n      opacity: 0.2;\n    }\n    90% {\n      opacity: 0.2;\n    }\n    100% {\n      transform: translateY(100vh) rotate(-360deg);\n      opacity: 0;\n    }\n  }\n\n  @keyframes fall-2 {\n    0% {\n      transform: translateY(-100vh) rotate(0deg) scale(0.8);\n      opacity: 0.1;\n    }\n    10% {\n      opacity: 0.25;\n    }\n    90% {\n      opacity: 0.25;\n    }\n    100% {\n      transform: translateY(100vh) rotate(180deg) scale(1.2);\n      opacity: 0;\n    }\n  }\n\n  @keyframes fall-3 {\n    0% {\n      transform: translateY(-100vh) rotate(0deg) scale(1.2);\n      opacity: 0.1;\n    }\n    10% {\n      opacity: 0.15;\n    }\n    90% {\n      opacity: 0.15;\n    }\n    100% {\n      transform: translateY(100vh) rotate(-180deg) scale(0.8);\n      opacity: 0;\n    }\n  }\n}\n","size_bytes":6941},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/celebration-modal.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\nimport Confetti from \"react-confetti\";\nimport { useWindowSize } from \"react-use\";\n\ninterface CelebrationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  score: number;\n  attempts: number;\n  challengeMode: boolean;\n  blindChallengeMode?: boolean;\n  timeElapsed: number;\n  onPlayAgain: () => void;\n  onChallengeMode: () => void;\n  onViewStats: () => void;\n  gameEndedByTime?: boolean;\n  coinsEarned?: number;\n  onHome: () => void;\n  targetWord?: string;\n  won: boolean;\n}\n\nexport default function CelebrationModal({\n  isOpen,\n  onClose,\n  score,\n  attempts,\n  challengeMode,\n  blindChallengeMode = false,\n  timeElapsed,\n  onPlayAgain,\n  onChallengeMode,\n  onViewStats,\n  gameEndedByTime = false,\n  coinsEarned = 0,\n  onHome,\n  targetWord = '',\n  won = true\n}: CelebrationModalProps) {\n  const { width, height } = useWindowSize();\n  const [showConfetti, setShowConfetti] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShowConfetti(true);\n      const timer = setTimeout(() => setShowConfetti(false), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <Dialog open={isOpen} onOpenChange={onClose}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogTitle className=\"sr-only\">Game Completed</DialogTitle>\n            <DialogDescription className=\"sr-only\">\n              Congratulations! You completed the word puzzle in {attempts} attempts with a score of {score} points.\n            </DialogDescription>\n            \n\n            \n            <motion.div\n              initial={{ scale: 0.5, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.5, opacity: 0 }}\n              transition={{ duration: 0.5 }}\n              className=\"text-center p-6 bg-gradient-to-br from-indigo-500 via-purple-600 to-pink-600 rounded-2xl shadow-2xl border-4 border-white/50\"\n            >\n              <motion.div\n                animate={{ rotate: won ? [0, 10, -10, 0] : [0] }}\n                transition={{ duration: 1, repeat: won ? Infinity : 0 }}\n                className=\"text-6xl mb-4\"\n              >\n                {!won ? '😔' : gameEndedByTime ? '⏰' : blindChallengeMode ? '🔥' : '🎉'}\n              </motion.div>\n              \n              <h2 className=\"text-3xl font-bold text-white mb-2\">\n                {!won ? 'Game Over!' : blindChallengeMode ? 'Incredible!' : gameEndedByTime ? 'Time\\'s Up!' : 'Amazing!'}\n              </h2>\n              \n              {!won && targetWord && (\n                <p className=\"text-white/90 mb-4 text-lg\">\n                  The word was: <span className=\"font-bold text-yellow-300\">{targetWord.toUpperCase()}</span>\n                </p>\n              )}\n              \n              <p className=\"text-white/90 mb-6\">\n                {!won \n                  ? 'Better luck next time!' \n                  : blindChallengeMode \n                    ? `Amazing memory skills! You solved it blind in ${attempts} attempt${attempts !== 1 ? 's' : ''}!`\n                    : gameEndedByTime \n                      ? 'Challenge mode completed!' \n                      : `You solved it in ${attempts} ${attempts === 1 ? 'attempt' : 'attempts'}!`\n                }\n              </p>\n\n              {/* Score and Coins Display */}\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-xl p-4 mb-6\">\n                <div className=\"grid grid-cols-3 gap-4 text-white\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-300\" data-testid=\"text-earned-points\">{score}</div>\n                    <div className=\"text-sm opacity-90\">Points</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-300\" data-testid=\"text-earned-coins\">+{coinsEarned}</div>\n                    <div className=\"text-sm opacity-90\">Coins</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-300\" data-testid=\"text-completion-time\">{formatTime(timeElapsed)}</div>\n                    <div className=\"text-sm opacity-90\">Time</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"space-y-3\">\n                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                  <Button \n                    onClick={onPlayAgain}\n                    className=\"w-full bg-white text-purple-600 hover:bg-gray-100 font-bold py-3 rounded-xl shadow-lg\"\n                    data-testid=\"button-play-again\"\n                  >\n                    🎮 Play Again\n                  </Button>\n                </motion.div>\n                \n                <div className=\"grid grid-cols-3 gap-2\">\n                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                    <Button \n                      onClick={onHome}\n                      variant=\"outline\"\n                      className=\"w-full bg-white/20 text-white border-white/30 hover:bg-white/30 font-semibold py-2 rounded-xl text-xs\"\n                      data-testid=\"button-home\"\n                    >\n                      🏠 Home\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                    <Button \n                      onClick={onViewStats}\n                      variant=\"outline\"\n                      className=\"w-full bg-white/20 text-white border-white/30 hover:bg-white/30 font-semibold py-2 rounded-xl text-xs\"\n                      data-testid=\"button-view-stats\"\n                    >\n                      📊 Stats\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                    <Button \n                      onClick={onChallengeMode}\n                      variant=\"outline\"\n                      className=\"w-full bg-white/20 text-white border-white/30 hover:bg-white/30 font-semibold py-2 rounded-xl text-xs\"\n                      data-testid=\"button-try-challenge\"\n                    >\n                      🏆 Challenge\n                    </Button>\n                  </motion.div>\n                </div>\n\n                {/* Game Mode Selection */}\n                <div className=\"grid grid-cols-2 gap-2 mt-4\">\n                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                    <Button \n                      onClick={() => window.location.href = '/daily'}\n                      variant=\"outline\"\n                      className=\"w-full bg-orange-500/30 text-white border-orange-300/30 hover:bg-orange-500/50 font-semibold py-2 rounded-xl text-xs\"\n                      data-testid=\"button-daily\"\n                    >\n                      🔥 Daily\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                    <Button \n                      onClick={() => window.location.href = '/blind'}\n                      variant=\"outline\"\n                      className=\"w-full bg-gray-600/30 text-white border-gray-300/30 hover:bg-gray-600/50 font-semibold py-2 rounded-xl text-xs\"\n                      data-testid=\"button-blind\"\n                    >\n                      👁️ Blind\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":8294},"client/src/components/game-grid.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { TileState, getTileState } from \"@/lib/game-utils\";\n\ninterface GameGridProps {\n  grid: string[][];\n  currentGuess: string;\n  currentRow: number;\n  gameState: 'playing' | 'won' | 'lost';\n  targetWord: string;\n  evaluatedRows: Set<number>;\n}\n\nexport default function GameGrid({ grid, currentGuess, currentRow, gameState, targetWord, evaluatedRows }: GameGridProps) {\n\n  const getTileStateForPosition = (rowIndex: number, colIndex: number): TileState => {\n    // Current row with user input\n    if (rowIndex === currentRow && gameState === 'playing') {\n      if (colIndex < currentGuess.length) {\n        return 'current';\n      }\n      return 'empty';\n    }\n    \n    // Completed/evaluated rows\n    const row = grid[rowIndex];\n    if (row && row[colIndex] && evaluatedRows.has(rowIndex)) {\n      return getTileState(row.join(''), targetWord, colIndex);\n    }\n    \n    // Empty state\n    return 'empty';\n  };\n\n  const getTileClass = (state: TileState) => {\n    switch (state) {\n      case 'correct': return 'tile tile-correct';\n      case 'present': return 'tile tile-present';\n      case 'absent': return 'tile tile-absent';\n      case 'current': return 'tile tile-current';\n      default: return 'tile tile-empty';\n    }\n  };\n\n  return (\n    <motion.div \n      className=\"mb-4 sm:mb-6\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: 0.2 }}\n    >\n      <div className=\"grid grid-cols-5 gap-2 sm:gap-3 w-full max-w-[320px] sm:max-w-sm mx-auto p-4 bg-white/20 backdrop-blur-sm rounded-2xl border-4 border-white/30 shadow-2xl\">\n        {Array.from({ length: 6 }).map((_, rowIndex) => (\n          Array.from({ length: 5 }).map((_, colIndex) => {\n            const state = getTileStateForPosition(rowIndex, colIndex);\n            let letter = '';\n            \n            // Get the letter for this position\n            if (rowIndex === currentRow && colIndex < currentGuess.length) {\n              // Current row being typed\n              letter = currentGuess[colIndex];\n            } else if (grid[rowIndex] && grid[rowIndex][colIndex]) {\n              // Previously submitted rows\n              letter = grid[rowIndex][colIndex];\n            }\n            \n            return (\n              <motion.div\n                key={`${rowIndex}-${colIndex}`}\n                className={getTileClass(state)}\n                initial={{ scale: 0.8, opacity: 0 }}\n                animate={{ \n                  scale: 1, \n                  opacity: 1,\n                  rotateY: state !== 'empty' && evaluatedRows.has(rowIndex) ? [0, 180, 360] : 0\n                }}\n                transition={{ \n                  duration: 0.3, \n                  delay: evaluatedRows.has(rowIndex) ? colIndex * 0.1 : (rowIndex * 5 + colIndex) * 0.02 \n                }}\n                whileHover={{ scale: gameState === 'playing' ? 1.05 : 1, y: gameState === 'playing' ? -2 : 0 }}\n                data-testid={`tile-${rowIndex}-${colIndex}`}\n              >\n                <span className=\"font-bold text-lg sm:text-xl select-none uppercase\">\n                  {letter}\n                </span>\n              </motion.div>\n            );\n          })\n        ))}\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":3292},"client/src/components/keyboard.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Delete } from \"lucide-react\";\nimport { KeyState } from \"@/lib/game-utils\";\n\ninterface KeyboardProps {\n  onKeyPress: (key: string) => void;\n  onEnter: () => void;\n  onBackspace: () => void;\n  keyboardState: Record<string, KeyState>;\n  disabled: boolean;\n  blindMode?: boolean;\n}\n\nconst KEYBOARD_ROWS = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACKSPACE']\n];\n\nexport default function Keyboard({ onKeyPress, onEnter, onBackspace, keyboardState, disabled, blindMode = false }: KeyboardProps) {\n  const getKeyClass = (key: string) => {\n    const baseClass = \"keyboard-key\";\n    \n    if (key === 'ENTER' || key === 'BACKSPACE') {\n      return `${baseClass} keyboard-key-special`;\n    }\n    \n    // In blind mode, all keys use default styling regardless of state\n    if (blindMode) {\n      return `${baseClass} keyboard-key-default`;\n    }\n    \n    const state = keyboardState[key] || 'default';\n    switch (state) {\n      case 'correct': return `${baseClass} keyboard-key-correct`;\n      case 'present': return `${baseClass} keyboard-key-present`;\n      case 'absent': return `${baseClass} keyboard-key-absent`;\n      default: return `${baseClass} keyboard-key-default`;\n    }\n  };\n\n  const handleKeyClick = (key: string) => {\n    if (disabled) return;\n    \n    if (key === 'ENTER') {\n      onEnter();\n    } else if (key === 'BACKSPACE') {\n      onBackspace();\n    } else {\n      onKeyPress(key);\n    }\n  };\n\n  return (\n    <motion.div \n      className=\"space-y-2 sm:space-y-3 px-8 py-4 bg-white/20 backdrop-blur-sm rounded-2xl border-4 border-white/30 shadow-2xl\"\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: 0.4 }}\n    >\n      {KEYBOARD_ROWS.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"flex justify-center gap-1.5 sm:gap-2\">\n          {row.map((key) => (\n            <motion.button\n              key={key}\n              className={getKeyClass(key)}\n              onClick={() => handleKeyClick(key)}\n              disabled={disabled}\n              whileHover={{ \n                scale: disabled ? 1 : 1.1,\n                y: disabled ? 0 : -2,\n                boxShadow: disabled ? undefined : \"0 8px 16px rgba(0,0,0,0.2)\"\n              }}\n              whileTap={{ scale: disabled ? 1 : 0.95 }}\n              data-testid={`key-${key.toLowerCase()}`}\n            >\n              {key === 'BACKSPACE' ? (\n                <Delete className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n              ) : (\n                key\n              )}\n            </motion.button>\n          ))}\n        </div>\n      ))}\n    </motion.div>\n  );\n}\n","size_bytes":2763},"client/src/components/menu-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Play, BarChart3, Settings, HelpCircle } from \"lucide-react\";\n\ninterface MenuModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onNewGame: () => void;\n  onStats: () => void;\n  onSettings: () => void;\n  onHowToPlay: () => void;\n  challengeMode: boolean;\n  blindChallengeMode?: boolean;\n}\n\nexport default function MenuModal({ \n  isOpen, \n  onClose, \n  onNewGame, \n  onStats,\n  onSettings,\n  onHowToPlay,\n  challengeMode,\n  blindChallengeMode = false\n}: MenuModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-sm\">\n        <DialogHeader>\n          <DialogTitle className=\"font-bold text-2xl text-gray-800\">Game Menu</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"p-6 space-y-3\">\n          <Button \n            onClick={onNewGame}\n            className=\"w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 flex items-center justify-center space-x-2\"\n            data-testid=\"button-new-game\"\n          >\n            <Play className=\"w-4 h-4\" />\n            <span>New Game</span>\n          </Button>\n          \n\n\n          <Button \n            onClick={onStats}\n            variant=\"outline\"\n            className=\"w-full flex items-center justify-center space-x-2 bg-white/90 text-gray-800 border-gray-300 hover:bg-white\"\n            data-testid=\"button-statistics\"\n          >\n            <BarChart3 className=\"w-4 h-4\" />\n            <span>Statistics</span>\n          </Button>\n\n          <Button \n            onClick={onSettings}\n            variant=\"outline\"\n            className=\"w-full flex items-center justify-center space-x-2 bg-white/90 text-gray-800 border-gray-300 hover:bg-white\"\n            data-testid=\"button-settings\"\n          >\n            <Settings className=\"w-4 h-4\" />\n            <span>Settings</span>\n          </Button>\n\n          <Button \n            onClick={onHowToPlay}\n            variant=\"outline\"\n            className=\"w-full flex items-center justify-center space-x-2 bg-white/90 text-gray-800 border-gray-300 hover:bg-white\"\n            data-testid=\"button-help\"\n          >\n            <HelpCircle className=\"w-4 h-4\" />\n            <span>How to Play</span>\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2446},"client/src/components/settings-modal.tsx":{"content":"import { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Settings, Volume2, VolumeX, Palette, Timer, Gamepad2, RotateCcw } from \"lucide-react\";\nimport FontSettings from \"./font-settings\";\n\ninterface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  settings: GameSettings;\n  onSettingsChange: (settings: GameSettings) => void;\n}\n\nexport interface GameSettings {\n  soundEnabled: boolean;\n  musicVolume: number;\n  theme: 'light' | 'dark' | 'auto';\n  animationsEnabled: boolean;\n  autoSubmit: boolean;\n  showTimer: boolean;\n  showHints: boolean;\n  keyboardLayout: 'qwerty' | 'alphabetical';\n  colorBlindMode: boolean;\n  highContrast: boolean;\n  reduceMotion: boolean;\n  fontSize: 'small' | 'medium' | 'large';\n}\n\nexport const defaultSettings: GameSettings = {\n  soundEnabled: true,\n  musicVolume: 50,\n  theme: 'auto',\n  animationsEnabled: true,\n  autoSubmit: true,\n  showTimer: true,\n  showHints: false,\n  keyboardLayout: 'qwerty',\n  colorBlindMode: false,\n  highContrast: false,\n  reduceMotion: false,\n  fontSize: 'medium',\n};\n\nexport default function SettingsModal({\n  isOpen,\n  onClose,\n  settings,\n  onSettingsChange\n}: SettingsModalProps) {\n  const updateSetting = <K extends keyof GameSettings>(\n    key: K,\n    value: GameSettings[K]\n  ) => {\n    onSettingsChange({ ...settings, [key]: value });\n  };\n\n  const resetToDefaults = () => {\n    onSettingsChange(defaultSettings);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md max-h-[80vh] overflow-y-auto\">\n        <DialogTitle className=\"flex items-center gap-2 text-xl font-bold\">\n          <Settings className=\"w-5 h-5\" />\n          Game Settings\n        </DialogTitle>\n        <DialogDescription>\n          Customize your Word Pop experience with these settings.\n        </DialogDescription>\n\n        <div className=\"space-y-6 py-4\">\n          {/* Audio Settings */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n              <Volume2 className=\"w-4 h-4\" />\n              Audio\n            </h3>\n            \n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"sound-enabled\" className=\"flex items-center gap-2\">\n                {settings.soundEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n                Sound Effects & Music\n              </Label>\n              <Switch\n                id=\"sound-enabled\"\n                checked={settings.soundEnabled}\n                onCheckedChange={(checked) => updateSetting('soundEnabled', checked)}\n                data-testid=\"switch-sound-enabled\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Volume</Label>\n                <span className=\"text-sm text-gray-500\">{settings.musicVolume}%</span>\n              </div>\n              <Slider\n                value={[settings.musicVolume]}\n                onValueChange={([value]) => updateSetting('musicVolume', value)}\n                max={100}\n                step={5}\n                className=\"w-full\"\n                disabled={!settings.soundEnabled}\n                data-testid=\"slider-music-volume\"\n              />\n              \n              <div className=\"text-xs text-gray-400 mt-2\">\n                Controls volume for both sound effects and background music. \n                {!settings.soundEnabled && \" Enable sound effects above to use volume control.\"}\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"haptic-feedback\" className=\"flex items-center gap-2\">\n                📳 Haptic Feedback\n              </Label>\n              <Switch\n                id=\"haptic-feedback\"\n                checked={settings.soundEnabled} // Link to sound enabled for now\n                onCheckedChange={(checked) => updateSetting('soundEnabled', checked)}\n                data-testid=\"switch-haptic-feedback\"\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Visual Settings */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n              <Palette className=\"w-4 h-4\" />\n              Appearance\n            </h3>\n\n            <div className=\"space-y-2\">\n              <Label>Theme</Label>\n              <Select\n                value={settings.theme}\n                onValueChange={(value: 'light' | 'dark' | 'auto') => updateSetting('theme', value)}\n              >\n                <SelectTrigger data-testid=\"select-theme\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"light\">Light</SelectItem>\n                  <SelectItem value=\"dark\">Dark</SelectItem>\n                  <SelectItem value=\"auto\">Auto (System)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Font Size</Label>\n              <Select\n                value={settings.fontSize}\n                onValueChange={(value: 'small' | 'medium' | 'large') => updateSetting('fontSize', value)}\n              >\n                <SelectTrigger data-testid=\"select-font-size\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"small\">Small</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"large\">Large</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"animations-enabled\">Animations</Label>\n              <Switch\n                id=\"animations-enabled\"\n                checked={settings.animationsEnabled}\n                onCheckedChange={(checked) => updateSetting('animationsEnabled', checked)}\n                data-testid=\"switch-animations-enabled\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"color-blind-mode\">Color Blind Mode</Label>\n              <Switch\n                id=\"color-blind-mode\"\n                checked={settings.colorBlindMode}\n                onCheckedChange={(checked) => updateSetting('colorBlindMode', checked)}\n                data-testid=\"switch-color-blind-mode\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"high-contrast\">High Contrast</Label>\n              <Switch\n                id=\"high-contrast\"\n                checked={settings.highContrast}\n                onCheckedChange={(checked) => updateSetting('highContrast', checked)}\n                data-testid=\"switch-high-contrast\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"reduce-motion\">Reduce Motion</Label>\n              <Switch\n                id=\"reduce-motion\"\n                checked={settings.reduceMotion}\n                onCheckedChange={(checked) => updateSetting('reduceMotion', checked)}\n                data-testid=\"switch-reduce-motion\"\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Gameplay Settings */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n              <Gamepad2 className=\"w-4 h-4\" />\n              Gameplay\n            </h3>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"auto-submit\" className=\"flex items-center gap-2\">\n                <Timer className=\"w-4 h-4\" />\n                Auto-submit words\n              </Label>\n              <Switch\n                id=\"auto-submit\"\n                checked={settings.autoSubmit}\n                onCheckedChange={(checked) => updateSetting('autoSubmit', checked)}\n                data-testid=\"switch-auto-submit\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"show-timer\">Show Timer (Challenge Mode)</Label>\n              <Switch\n                id=\"show-timer\"\n                checked={settings.showTimer}\n                onCheckedChange={(checked) => updateSetting('showTimer', checked)}\n                data-testid=\"switch-show-timer\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"show-hints\">Show Word Hints</Label>\n              <Switch\n                id=\"show-hints\"\n                checked={settings.showHints}\n                onCheckedChange={(checked) => updateSetting('showHints', checked)}\n                data-testid=\"switch-show-hints\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Keyboard Layout</Label>\n              <Select\n                value={settings.keyboardLayout}\n                onValueChange={(value: 'qwerty' | 'alphabetical') => updateSetting('keyboardLayout', value)}\n              >\n                <SelectTrigger data-testid=\"select-keyboard-layout\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"qwerty\">QWERTY</SelectItem>\n                  <SelectItem value=\"alphabetical\">Alphabetical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Font Settings Section */}\n          <FontSettings />\n\n          <Separator />\n\n          {/* Reset Settings */}\n          <div className=\"flex justify-between items-center pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={resetToDefaults}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-reset-settings\"\n            >\n              <RotateCcw className=\"w-4 h-4\" />\n              Reset to Defaults\n            </Button>\n            \n            <Button\n              onClick={onClose}\n              className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n              data-testid=\"button-save-settings\"\n            >\n              Save Settings\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11035},"client/src/components/stats-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { GameStats } from \"@shared/schema\";\n\ninterface StatsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  stats: GameStats;\n}\n\nexport default function StatsModal({ isOpen, onClose, stats }: StatsModalProps) {\n  const winRate = stats.totalGames > 0 ? Math.round((stats.totalWins / stats.totalGames) * 100) : 0;\n  const avgScore = stats.totalGames > 0 ? Math.round(stats.totalPoints / stats.totalGames) : 0;\n  \n  const guessDistribution = JSON.parse(stats.guessDistribution) as Record<string, number>;\n  const maxGuesses = Math.max(...Object.values(guessDistribution));\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"font-bold text-2xl text-gray-800\">Your Stats</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl p-4 text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-games\">{stats.totalGames}</div>\n              <div className=\"text-sm opacity-90\">Games Played</div>\n            </div>\n            <div className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-xl p-4 text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"text-win-rate\">{winRate}%</div>\n              <div className=\"text-sm opacity-90\">Win Rate</div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Current Streak</span>\n              <span className=\"font-semibold text-orange-600\" data-testid=\"text-current-streak\">\n                {stats.currentStreak} games\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Max Streak</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"text-max-streak\">\n                {stats.maxStreak} games\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Average Score</span>\n              <span className=\"font-semibold text-blue-600\" data-testid=\"text-avg-score\">\n                {avgScore} pts\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Total Points</span>\n              <span className=\"font-semibold text-purple-600\" data-testid=\"text-total-points-stats\">\n                {stats.totalPoints.toLocaleString()} pts\n              </span>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-50 rounded-xl p-4\">\n            <h3 className=\"font-semibold text-gray-800 mb-3\">Guess Distribution</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(guessDistribution).map(([attempts, count]) => (\n                <div key={attempts} className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 text-xs text-gray-600\">{attempts}</div>\n                  <div className=\"flex-1 bg-gray-200 rounded h-4 overflow-hidden\">\n                    <div\n                      className=\"bg-green-500 h-full transition-all duration-500\"\n                      style={{ width: maxGuesses > 0 ? `${(count / maxGuesses) * 100}%` : '0%' }}\n                    />\n                  </div>\n                  <div className=\"text-xs text-gray-600 w-6 text-right\">{count}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Button \n            onClick={onClose}\n            className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n            data-testid=\"button-continue-playing\"\n          >\n            Continue Playing\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4215},"client/src/components/word-expansion-button.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, BookOpen, Sparkles } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface WordExpansionResponse {\n  success: boolean;\n  totalWords: number;\n  message: string;\n  categories: string[];\n  sampleWords: string[];\n  error?: string;\n  details?: string;\n}\n\nexport function WordExpansionButton() {\n  const [isExpanding, setIsExpanding] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const { toast } = useToast();\n\n  const handleExpansion = async () => {\n    setIsExpanding(true);\n    \n    try {\n      const response = await fetch('/api/word/expand-library', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const data = await response.json() as WordExpansionResponse;\n\n      if (data.success) {\n        setExpanded(true);\n        toast({\n          title: \"Word Library Expanded!\",\n          description: `Activated ${data.totalWords} words from comprehensive built-in library. The game now has access to a much broader English vocabulary!`,\n        });\n      } else {\n        toast({\n          title: \"Expansion Failed\",\n          description: data.error || \"Failed to expand word library\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to connect to expansion service\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExpanding(false);\n    }\n  };\n\n  if (expanded) {\n    return (\n      <Button variant=\"outline\" disabled className=\"text-green-600 border-green-600\">\n        <Sparkles className=\"w-4 h-4 mr-2\" />\n        Expanded Library Active\n      </Button>\n    );\n  }\n\n  return (\n    <Button \n      onClick={handleExpansion} \n      disabled={isExpanding}\n      variant=\"outline\"\n      className=\"border-blue-500 text-blue-600 hover:bg-blue-50\"\n    >\n      {isExpanding ? (\n        <>\n          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n          Activating Library...\n        </>\n      ) : (\n        <>\n          <BookOpen className=\"w-4 h-4 mr-2\" />\n          Activate Expanded Library\n        </>\n      )}\n    </Button>\n  );\n}","size_bytes":2321},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-settings.ts":{"content":"import { useState, useEffect } from 'react';\nimport { GameSettings, defaultSettings } from '@/components/settings-modal';\n\nconst SETTINGS_STORAGE_KEY = 'word-pop-settings';\n\nexport function useSettings() {\n  const [settings, setSettings] = useState<GameSettings>(defaultSettings);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Load settings from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedSettings = localStorage.getItem(SETTINGS_STORAGE_KEY);\n      if (savedSettings) {\n        const parsedSettings = JSON.parse(savedSettings);\n        // Merge with defaults to ensure all properties exist\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      }\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSettings(defaultSettings);\n    } finally {\n      setIsLoaded(true);\n    }\n  }, []);\n\n  // Save settings to localStorage whenever they change\n  const updateSettings = (newSettings: GameSettings) => {\n    setSettings(newSettings);\n    try {\n      localStorage.setItem(SETTINGS_STORAGE_KEY, JSON.stringify(newSettings));\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n    }\n  };\n\n  // Apply theme changes to document\n  useEffect(() => {\n    if (!isLoaded) return;\n\n    const applyTheme = () => {\n      const root = document.documentElement;\n      \n      if (settings.theme === 'dark') {\n        root.classList.add('dark');\n      } else if (settings.theme === 'light') {\n        root.classList.remove('dark');\n      } else {\n        // Auto mode - follow system preference\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        if (prefersDark) {\n          root.classList.add('dark');\n        } else {\n          root.classList.remove('dark');\n        }\n      }\n\n      // Apply font size\n      root.style.setProperty('--font-size-multiplier', \n        settings.fontSize === 'small' ? '0.875' : \n        settings.fontSize === 'large' ? '1.125' : '1'\n      );\n\n      // Apply high contrast mode\n      if (settings.highContrast) {\n        root.classList.add('high-contrast');\n      } else {\n        root.classList.remove('high-contrast');\n      }\n\n      // Apply reduced motion\n      if (settings.reduceMotion) {\n        root.classList.add('reduce-motion');\n      } else {\n        root.classList.remove('reduce-motion');\n      }\n\n      // Apply color blind mode\n      if (settings.colorBlindMode) {\n        root.classList.add('color-blind-mode');\n      } else {\n        root.classList.remove('color-blind-mode');\n      }\n    };\n\n    applyTheme();\n\n    // Listen for system theme changes when in auto mode\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleSystemThemeChange = () => {\n      if (settings.theme === 'auto') {\n        applyTheme();\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleSystemThemeChange);\n    return () => mediaQuery.removeEventListener('change', handleSystemThemeChange);\n  }, [settings.theme, settings.fontSize, settings.highContrast, settings.reduceMotion, settings.colorBlindMode, isLoaded]);\n\n  return {\n    settings,\n    updateSettings,\n    isLoaded\n  };\n}","size_bytes":3191},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-wordle-simple.ts":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { GameStats, InsertGameResult } from \"@shared/schema\";\nimport { calculateScore, isValidWord, getTileState } from \"@/lib/game-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAudio } from \"@/hooks/use-audio\";\n\nexport function useWordle(challengeMode: boolean = false, dailyChallengeMode: boolean = false, onTimeUp?: () => void) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { \n    playKeyPress, \n    playWordSubmit, \n    playCorrectGuess, \n    playWrongGuess, \n    playGameWin, \n    playGameLose, \n    playInvalidWord \n  } = useAudio();\n  \n  // Game state\n  const [grid, setGrid] = useState<string[][]>(Array(6).fill(null).map(() => Array(5).fill('')));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentRow, setCurrentRow] = useState(0);\n  const [gameState, setGameState] = useState<'playing' | 'won' | 'lost'>('playing');\n  const [keyboardState, setKeyboardState] = useState<Record<string, 'default' | 'correct' | 'present' | 'absent'>>({});\n  const [targetWord, setTargetWord] = useState('');\n  const [startTime, setStartTime] = useState<number>(Date.now());\n  const [score, setScore] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(challengeMode ? 180 : 0); // 3 minutes for challenge mode\n  const [gameEndedByTime, setGameEndedByTime] = useState(false);\n  const [evaluatedRows, setEvaluatedRows] = useState<Set<number>>(new Set());\n  const [isValidatingWord, setIsValidatingWord] = useState(false);\n  const [invalidWord, setInvalidWord] = useState<string>('');\n  const [showingInvalidToast, setShowingInvalidToast] = useState(false);\n\n  // Fetch stats\n  const { data: stats } = useQuery<GameStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  // Fetch new word based on mode\n  const { data: wordData, refetch: fetchNewWord, error: wordError } = useQuery<{ word: string }>({\n    queryKey: dailyChallengeMode ? ['/api/word/daily-challenge'] : ['/api/word', 'current-game'],\n    staleTime: Infinity, // Keep the word for the entire game session\n    retry: false, // Don't retry if daily challenge already completed\n  });\n\n  // Save game result mutation\n  const saveResultMutation = useMutation({\n    mutationFn: async (result: InsertGameResult) => {\n      const response = await apiRequest('POST', '/api/results', result);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n  });\n\n  // Update stats mutation\n  const updateStatsMutation = useMutation({\n    mutationFn: async (newStats: Partial<GameStats>) => {\n      const response = await apiRequest('POST', '/api/stats', newStats);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n  });\n\n  // Initialize game with word data or handle daily challenge restrictions\n  useEffect(() => {\n    // Check daily challenge restriction\n    if (dailyChallengeMode) {\n      const today = new Date().toISOString().split('T')[0];\n      const lastPlayedDaily = localStorage.getItem('lastDailyChallenge');\n      \n      if (lastPlayedDaily === today) {\n        toast({\n          title: \"Daily Challenge Completed\",\n          description: \"You've already completed today's daily challenge. Come back tomorrow!\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n    \n    if (wordData?.word && !targetWord) {\n      setTargetWord(wordData.word);\n      setStartTime(Date.now());\n      setGameEndedByTime(false);\n      console.log('Target word set to:', wordData.word);\n      \n      // Set timer only once for challenge mode\n      if (challengeMode) {\n        setTimeRemaining(180);\n      }\n    }\n  }, [wordData, targetWord, challengeMode, dailyChallengeMode, toast]);\n\n  // Challenge mode timer\n  useEffect(() => {\n    if (challengeMode && gameState === 'playing' && timeRemaining > 0) {\n      const timer = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            // Time's up!\n            setGameState('lost');\n            setGameEndedByTime(true);\n            if (onTimeUp) onTimeUp();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [challengeMode, gameState, timeRemaining, onTimeUp]);\n\n\n\n  const updateKeyboardState = useCallback((guess: string, target: string) => {\n    const newKeyboardState = { ...keyboardState };\n    \n    for (let i = 0; i < guess.length; i++) {\n      const letter = guess[i];\n      const tileState = getTileState(guess, target, i);\n      \n      // Convert tile state to keyboard state\n      let keyState: 'default' | 'correct' | 'present' | 'absent' = 'default';\n      if (tileState === 'correct') keyState = 'correct';\n      else if (tileState === 'present') keyState = 'present';\n      else if (tileState === 'absent') keyState = 'absent';\n      \n      // Only update if current state is better than existing\n      if (!newKeyboardState[letter] || \n          (keyState === 'correct') ||\n          (keyState === 'present' && newKeyboardState[letter] !== 'correct')) {\n        newKeyboardState[letter] = keyState;\n      }\n    }\n    \n    setKeyboardState(newKeyboardState);\n  }, [keyboardState]);\n\n  const onKeyPress = useCallback((key: string) => {\n    if (gameState !== 'playing') return;\n    if (currentGuess.length < 5) {\n      setCurrentGuess(prev => prev + key);\n      playKeyPress();\n      \n      // Don't clear invalid word state when typing - only when deleting\n    }\n  }, [currentGuess, gameState, playKeyPress]);\n\n  const onBackspace = useCallback(() => {\n    if (gameState !== 'playing') return;\n    const newGuess = currentGuess.slice(0, -1);\n    setCurrentGuess(newGuess);\n    \n    // Clear invalid word notification when user deletes the last letter (goes below 5 letters)\n    if (invalidWord && showingInvalidToast && newGuess.length < 5) {\n      setInvalidWord('');\n      setShowingInvalidToast(false);\n    }\n  }, [gameState, currentGuess, invalidWord, showingInvalidToast]);\n\n  const submitResult = async (attempts: number, timeElapsed: number, score: number, won: boolean) => {\n    try {\n      // Save game result  \n      await saveResultMutation.mutateAsync({\n        word: targetWord,\n        attempts,\n        timeElapsed,\n        points: score,\n        isChallengeMode: challengeMode,\n        isWin: won,\n      });\n\n      // Mark daily challenge as completed if this was a daily challenge\n      if (dailyChallengeMode && won) {\n        try {\n          const today = new Date().toISOString().split('T')[0];\n          localStorage.setItem('lastDailyChallenge', today);\n          console.log('Daily challenge marked as completed for:', today);\n        } catch (error) {\n          console.error('Failed to mark daily challenge as completed:', error);\n        }\n      }\n\n      // Update stats\n      if (stats) {\n        const newGuessDistribution = JSON.parse(stats.guessDistribution) as Record<string, number>;\n        if (won) {\n          newGuessDistribution[attempts.toString()] = (newGuessDistribution[attempts.toString()] || 0) + 1;\n        }\n\n        const newCurrentStreak = won ? stats.currentStreak + 1 : 0;\n        const newMaxStreak = Math.max(stats.maxStreak, newCurrentStreak);\n\n        await updateStatsMutation.mutateAsync({\n          totalGames: stats.totalGames + 1,\n          totalWins: stats.totalWins + (won ? 1 : 0),\n          currentStreak: newCurrentStreak,\n          maxStreak: newMaxStreak,\n          totalPoints: stats.totalPoints + score,\n          guessDistribution: JSON.stringify(newGuessDistribution),\n        });\n      }\n    } catch (error) {\n      console.error('Failed to save game result:', error);\n      // Still mark daily challenge as completed even if save fails\n      if (dailyChallengeMode && won) {\n        try {\n          const today = new Date().toISOString().split('T')[0];\n          localStorage.setItem('lastDailyChallenge', today);\n          console.log('Daily challenge marked as completed (fallback):', today);\n        } catch (localStorageError) {\n          console.error('Failed to mark daily challenge as completed (fallback):', localStorageError);\n        }\n      }\n    }\n  };\n\n  const onEnter = useCallback(async () => {\n    if (gameState !== 'playing') return;\n    \n    if (currentGuess.length !== 5) {\n      toast({\n        title: \"Invalid guess\",\n        description: \"Guess must be 5 letters long\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Check word validity using official Wordle words\n    setIsValidatingWord(true);\n    const isValid = isValidWord(currentGuess);\n    setIsValidatingWord(false);\n    \n    // Clear debug logging - validation working correctly\n    \n    if (!isValid) {\n      // Only show the toast if we're not already showing one for this word\n      if (!showingInvalidToast || invalidWord !== currentGuess) {\n        setInvalidWord(currentGuess);\n        setShowingInvalidToast(true);\n        playInvalidWord();\n        toast({\n          title: \"Invalid word\", \n          description: \"Not in official Wordle word list\",\n          variant: \"destructive\"\n        });\n      }\n      return;\n    }\n\n    // Play word submit sound\n    playWordSubmit();\n\n    // Update grid\n    const newGrid = [...grid];\n    newGrid[currentRow] = currentGuess.split('');\n    setGrid(newGrid);\n    // Mark this row as evaluated\n    setEvaluatedRows(prev => new Set([...Array.from(prev), currentRow]));\n\n    // Update keyboard state (ensure consistent case)\n    updateKeyboardState(currentGuess.toUpperCase(), targetWord.toUpperCase());\n\n    // Check win condition (case-insensitive)\n    const isWin = currentGuess.toUpperCase() === targetWord.toUpperCase();\n    if (isWin) {\n      setGameState('won');\n      playGameWin();\n      const timeElapsed = Math.floor((Date.now() - startTime) / 1000);\n      const gameScore = calculateScore(currentRow + 1, timeElapsed, challengeMode);\n      setScore(gameScore);\n      \n      // Save result and update stats\n      await submitResult(currentRow + 1, timeElapsed, gameScore, true);\n    } else if (currentRow === 5) {\n      setGameState('lost');\n      playGameLose();\n      const timeElapsed = Math.floor((Date.now() - startTime) / 1000);\n      await submitResult(6, timeElapsed, 0, false);\n    } else {\n      setCurrentRow(prev => prev + 1);\n      playWrongGuess();\n    }\n\n    setCurrentGuess('');\n  }, [currentGuess, currentRow, grid, targetWord, startTime, challengeMode, gameState, toast, updateKeyboardState, playWordSubmit, playGameWin, playGameLose, playCorrectGuess, playInvalidWord]);\n\n  // Auto-submit when 5 letters are typed\n  useEffect(() => {\n    if (currentGuess.length === 5 && gameState === 'playing') {\n      const timer = setTimeout(() => {\n        onEnter();\n      }, 200); // Small delay to allow UI to update\n\n      return () => clearTimeout(timer);\n    }\n  }, [currentGuess, gameState, onEnter]);\n\n  const resetGame = useCallback(async () => {\n    setGrid(Array(6).fill(null).map(() => Array(5).fill('')));\n    setCurrentGuess('');\n    setCurrentRow(0);\n    setGameState('playing');\n    setKeyboardState({});\n    setScore(0);\n    setStartTime(Date.now());\n    setTimeRemaining(challengeMode ? 180 : 0);\n    setGameEndedByTime(false);\n    setEvaluatedRows(new Set());\n    \n    // Clear the current target word and fetch a new one\n    setTargetWord('');\n    queryClient.invalidateQueries({ queryKey: ['/api/word', 'current-game'] });\n    const { data } = await fetchNewWord();\n    if (data?.word) {\n      setTargetWord(data.word);\n      console.log('🎯 New target word:', data.word);\n    }\n  }, [fetchNewWord, queryClient]);\n\n  // Handle keyboard input\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (gameState !== 'playing') return;\n\n      if (e.key.match(/[a-zA-Z]/) && e.key.length === 1) {\n        onKeyPress(e.key.toUpperCase());\n      } else if (e.key === 'Enter') {\n        onEnter();\n      } else if (e.key === 'Backspace') {\n        onBackspace();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [gameState, onKeyPress, onEnter, onBackspace]);\n\n  return {\n    grid,\n    currentGuess,\n    currentRow,\n    gameState,\n    keyboardState,\n    score,\n    targetWord,\n    evaluatedRows,\n    timeRemaining,\n    gameEndedByTime,\n    stats: stats || {\n      id: '',\n      totalGames: 0,\n      totalWins: 0,\n      currentStreak: 0,\n      maxStreak: 0,\n      totalPoints: 0,\n      guessDistribution: '{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0}',\n      lastPlayed: null,\n      createdAt: new Date(),\n    },\n    isValidatingWord,\n    onKeyPress,\n    onEnter,\n    onBackspace,\n    resetGame,\n    submitResult,\n    invalidWord,\n    clearInvalidWord: () => setInvalidWord(''),\n  };\n}","size_bytes":13042},"client/src/hooks/use-wordle.ts":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { GameStats, InsertGameResult } from \"@shared/schema\";\nimport { calculateScore, isValidWord, isValidWordExpanded, TileState, KeyState } from \"@/lib/game-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useWordle(challengeMode: boolean = false) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Game state\n  const [grid, setGrid] = useState<string[][]>(Array(6).fill(null).map(() => Array(5).fill('')));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentRow, setCurrentRow] = useState(0);\n  const [gameState, setGameState] = useState<'playing' | 'won' | 'lost'>('playing');\n  const [keyboardState, setKeyboardState] = useState<Record<string, KeyState>>({});\n  const [targetWord, setTargetWord] = useState('');\n  const [startTime, setStartTime] = useState<number>(Date.now());\n  const [score, setScore] = useState(0);\n  const [evaluatedRows, setEvaluatedRows] = useState<Set<number>>(new Set());\n  const [invalidWord, setInvalidWord] = useState<string>('');\n\n  // Fetch stats\n  const { data: stats } = useQuery<GameStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  // Fetch new word\n  const { data: wordData, refetch: fetchNewWord } = useQuery<{ word: string }>({\n    queryKey: ['/api/word'],\n    enabled: false,\n  });\n\n  // Save game result mutation\n  const saveResultMutation = useMutation({\n    mutationFn: async (result: InsertGameResult) => {\n      const response = await apiRequest('POST', '/api/results', result);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n  });\n\n  // Update stats mutation\n  const updateStatsMutation = useMutation({\n    mutationFn: async (newStats: Partial<GameStats>) => {\n      const response = await apiRequest('POST', '/api/stats', newStats);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n  });\n\n  const updateKeyboardState = (guess: string, target: string) => {\n    const newKeyboardState = { ...keyboardState };\n    \n    for (let i = 0; i < guess.length; i++) {\n      const letter = guess[i];\n      if (target[i] === letter) {\n        newKeyboardState[letter] = 'correct';\n      } else if (target.includes(letter) && newKeyboardState[letter] !== 'correct') {\n        newKeyboardState[letter] = 'present';\n      } else if (newKeyboardState[letter] !== 'correct' && newKeyboardState[letter] !== 'present') {\n        newKeyboardState[letter] = 'absent';\n      }\n    }\n    \n    setKeyboardState(newKeyboardState);\n  };\n\n  const onKeyPress = useCallback((key: string) => {\n    if (currentGuess.length < 5) {\n      setCurrentGuess(prev => prev + key);\n    }\n  }, [currentGuess]);\n\n  const onBackspace = useCallback(() => {\n    setCurrentGuess(prev => prev.slice(0, -1));\n  }, []);\n\n  const onEnter = useCallback(async () => {\n    if (currentGuess.length !== 5) {\n      toast({\n        title: \"Invalid guess\",\n        description: \"Guess must be 5 letters long\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!isValidWord(currentGuess)) {\n      setInvalidWord(currentGuess);\n      toast({\n        title: \"Invalid word\",\n        description: \"Not in word list\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Update grid\n    const newGrid = [...grid];\n    newGrid[currentRow] = currentGuess.split('');\n    setGrid(newGrid);\n\n    // Mark this row as evaluated\n    setEvaluatedRows(prev => {\n      const newSet = new Set(prev);\n      newSet.add(currentRow);\n      return newSet;\n    });\n\n    // Update keyboard state\n    updateKeyboardState(currentGuess, targetWord);\n\n    // Check win condition\n    if (currentGuess === targetWord) {\n      setGameState('won');\n      const timeElapsed = Math.floor((Date.now() - startTime) / 1000);\n      const gameScore = calculateScore(currentRow + 1, timeElapsed, challengeMode);\n      setScore(gameScore);\n      \n      // Save result and update stats\n      await submitResult(currentRow + 1, timeElapsed, gameScore, true);\n    } else if (currentRow === 5) {\n      setGameState('lost');\n      const timeElapsed = Math.floor((Date.now() - startTime) / 1000);\n      await submitResult(6, timeElapsed, 0, false);\n    } else {\n      setCurrentRow(prev => prev + 1);\n    }\n\n    setCurrentGuess('');\n  }, [currentGuess, currentRow, grid, targetWord, startTime, challengeMode, keyboardState, toast]);\n\n  const submitResult = async (attempts: number, timeElapsed: number, points: number, isWin: boolean) => {\n    try {\n      // Save game result\n      await saveResultMutation.mutateAsync({\n        word: targetWord,\n        attempts,\n        timeElapsed,\n        points,\n        isChallengeMode: challengeMode,\n        isWin,\n      });\n\n      // Update stats\n      if (stats) {\n        const newGuessDistribution = JSON.parse(stats.guessDistribution);\n        if (isWin) {\n          newGuessDistribution[attempts.toString()] = (newGuessDistribution[attempts.toString()] || 0) + 1;\n        }\n\n        const newCurrentStreak = isWin ? stats.currentStreak + 1 : 0;\n        const newMaxStreak = Math.max(stats.maxStreak, newCurrentStreak);\n\n        await updateStatsMutation.mutateAsync({\n          totalGames: stats.totalGames + 1,\n          totalWins: stats.totalWins + (isWin ? 1 : 0),\n          currentStreak: newCurrentStreak,\n          maxStreak: newMaxStreak,\n          totalPoints: stats.totalPoints + points,\n          guessDistribution: JSON.stringify(newGuessDistribution),\n        });\n      }\n    } catch (error) {\n      console.error('Failed to save game result:', error);\n    }\n  };\n\n  const resetGame = useCallback(async () => {\n    setGrid(Array(6).fill(null).map(() => Array(5).fill('')));\n    setCurrentGuess('');\n    setCurrentRow(0);\n    setGameState('playing');\n    setKeyboardState({});\n    setScore(0);\n    setStartTime(Date.now());\n    setEvaluatedRows(new Set());\n    \n    // Fetch new word\n    const { data } = await fetchNewWord();\n    if (data?.word) {\n      setTargetWord(data.word);\n    }\n  }, [fetchNewWord]);\n\n  // Handle keyboard input\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (gameState !== 'playing') return;\n\n      if (e.key.match(/[a-zA-Z]/) && e.key.length === 1) {\n        onKeyPress(e.key.toUpperCase());\n      } else if (e.key === 'Enter') {\n        onEnter();\n      } else if (e.key === 'Backspace') {\n        onBackspace();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [gameState, onKeyPress, onEnter, onBackspace]);\n\n  return {\n    grid,\n    currentGuess,\n    currentRow,\n    gameState,\n    keyboardState,\n    score,\n    targetWord,\n    evaluatedRows,\n    stats: stats || {\n      id: '',\n      totalGames: 0,\n      totalWins: 0,\n      currentStreak: 0,\n      maxStreak: 0,\n      totalPoints: 0,\n      guessDistribution: '{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0}',\n      lastPlayed: null,\n      createdAt: new Date(),\n    },\n    onKeyPress,\n    onEnter,\n    onBackspace,\n    resetGame,\n    submitResult,\n    invalidWord,\n    clearInvalidWord: () => setInvalidWord(''),\n  };\n}\n","size_bytes":7392},"client/src/lib/game-utils.ts":{"content":"import { isOfficialWordleWord } from '@shared/official-wordle-words';\n\nexport type TileState = 'empty' | 'current' | 'correct' | 'present' | 'absent';\nexport type KeyState = 'default' | 'correct' | 'present' | 'absent';\n\nexport function isValidWord(word: string): boolean {\n  return isOfficialWordleWord(word.toUpperCase());\n}\n\nexport async function isValidWordExpanded(word: string): Promise<boolean> {\n  // Use official Wordle word validation\n  return isOfficialWordleWord(word.toUpperCase());\n}\n\nexport function calculateScore(attempts: number, timeElapsed: number, challengeMode: boolean): number {\n  // Base score starts at 1000 and decreases with attempts\n  let score = Math.max(100, 1000 - (attempts - 1) * 150);\n  \n  if (challengeMode) {\n    // Bonus for challenge mode\n    score *= 1.5;\n    \n    // Time bonus (faster = more points)\n    const timeBonus = Math.max(0, 180 - timeElapsed) * 2;\n    score += timeBonus;\n  }\n  \n  return Math.round(score);\n}\n\nexport function getTileState(guess: string, target: string, position: number): TileState {\n  // Normalize both to uppercase for comparison\n  const normalizedGuess = guess.toUpperCase();\n  const normalizedTarget = target.toUpperCase();\n  const guessLetter = normalizedGuess[position];\n  const targetLetter = normalizedTarget[position];\n  \n  // If the letter is in the correct position\n  if (guessLetter === targetLetter) {\n    return 'correct';\n  }\n  \n  // Check if the letter exists in the target word at all\n  if (!normalizedTarget.includes(guessLetter)) {\n    return 'absent';\n  }\n  \n  // For letters that exist in target but are in wrong position,\n  // we need to check if there are available instances\n  \n  // Count total occurrences of this letter in target\n  const targetCount = normalizedTarget.split('').filter(letter => letter === guessLetter).length;\n  \n  // Count how many of this letter are already correctly placed in the guess\n  let correctlyPlaced = 0;\n  for (let i = 0; i < normalizedGuess.length; i++) {\n    if (normalizedGuess[i] === guessLetter && normalizedTarget[i] === guessLetter) {\n      correctlyPlaced++;\n    }\n  }\n  \n  // Count how many of this letter appear before current position in wrong positions\n  let wrongPositionsBefore = 0;\n  for (let i = 0; i < position; i++) {\n    if (normalizedGuess[i] === guessLetter && normalizedTarget[i] !== guessLetter) {\n      wrongPositionsBefore++;\n    }\n  }\n  \n  // If we have available instances after accounting for correct placements and previous wrong positions\n  const availableInstances = targetCount - correctlyPlaced;\n  if (wrongPositionsBefore < availableInstances) {\n    return 'present';\n  }\n  \n  return 'absent';\n}\n\nexport function getKeyboardState(guesses: string[], target: string): Record<string, KeyState> {\n  // Normalize target to uppercase for consistency\n  const normalizedTarget = target.toUpperCase();\n  const keyboardState: Record<string, KeyState> = {};\n  \n  guesses.forEach(guess => {\n    for (let i = 0; i < guess.length; i++) {\n      const letter = guess[i];\n      const tileState = getTileState(guess, normalizedTarget, i);\n      \n      // Convert TileState to KeyState\n      let keyState: KeyState = 'default';\n      if (tileState === 'correct') keyState = 'correct';\n      else if (tileState === 'present') keyState = 'present';\n      else if (tileState === 'absent') keyState = 'absent';\n      \n      // Only update if current state is better than existing\n      if (!keyboardState[letter] || \n          (keyState === 'correct') ||\n          (keyState === 'present' && keyboardState[letter] !== 'correct')) {\n        keyboardState[letter] = keyState;\n      }\n    }\n  });\n  \n  return keyboardState;\n}\n\nexport function formatTime(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n","size_bytes":3873},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/word-validation.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\n// Cache for validated words to avoid repeated API calls\nconst wordValidationCache = new Map<string, boolean>();\n\ninterface WordValidationResponse {\n  word: string;\n  isValid: boolean;\n  source: 'built-in' | 'OpenAI';\n  hasOpenAI: boolean;\n}\n\n/**\n * Validate a word using OpenAI + built-in dictionary with caching\n */\nexport async function validateWordWithAPI(word: string): Promise<boolean> {\n  const upperWord = word.toUpperCase();\n  \n  // Check cache first\n  if (wordValidationCache.has(upperWord)) {\n    return wordValidationCache.get(upperWord)!;\n  }\n\n  try {\n    const response = await apiRequest('POST', '/api/word/validate', { word: upperWord });\n    const result: WordValidationResponse = await response.json();\n    \n    // Cache the result\n    wordValidationCache.set(upperWord, result.isValid);\n    \n    return result.isValid;\n  } catch (error) {\n    console.error('Error validating word with API:', error);\n    // Fallback to client-side validation if API fails\n    return false;\n  }\n}\n\n/**\n * Batch validate multiple words for better performance\n */\nexport async function validateWordsInBatch(words: string[]): Promise<Record<string, boolean>> {\n  // Filter out already cached words\n  const uncachedWords = words.filter(word => !wordValidationCache.has(word.toUpperCase()));\n  const results: Record<string, boolean> = {};\n  \n  // Get cached results\n  words.forEach(word => {\n    const upperWord = word.toUpperCase();\n    if (wordValidationCache.has(upperWord)) {\n      results[upperWord] = wordValidationCache.get(upperWord)!;\n    }\n  });\n\n  // If all words are cached, return immediately\n  if (uncachedWords.length === 0) {\n    return results;\n  }\n\n  try {\n    const response = await apiRequest('POST', '/api/word/validate-batch', { words: uncachedWords });\n    const batchResult = await response.json();\n    \n    // Cache and merge results\n    Object.entries(batchResult.results).forEach(([word, isValid]) => {\n      wordValidationCache.set(word, isValid as boolean);\n      results[word] = isValid as boolean;\n    });\n    \n    return results;\n  } catch (error) {\n    console.error('Error batch validating words:', error);\n    // Return cached results and mark uncached as invalid\n    uncachedWords.forEach(word => {\n      results[word.toUpperCase()] = false;\n    });\n    return results;\n  }\n}\n\n/**\n * Clear the validation cache (useful for testing or when needed)\n */\nexport function clearWordValidationCache(): void {\n  wordValidationCache.clear();\n}\n\n/**\n * Get cache statistics\n */\nexport function getWordValidationCacheStats(): { size: number; validWords: number; invalidWords: number } {\n  const validWords = Array.from(wordValidationCache.values()).filter(Boolean).length;\n  const invalidWords = wordValidationCache.size - validWords;\n  \n  return {\n    size: wordValidationCache.size,\n    validWords,\n    invalidWords\n  };\n}","size_bytes":2890},"client/src/lib/words.ts":{"content":"// Import comprehensive word dictionary\nimport { getWordSets } from '@shared/comprehensive-word-list';\n\n// Use the comprehensive word set for validation\nexport const VALID_WORDS = getWordSets().guessSet;\n\n// Word categories for dynamic selection\nexport const WORD_CATEGORIES = {\n  NATURE: ['WATER', 'EARTH', 'FLAME', 'STORM', 'CLOUD', 'OCEAN', 'RIVER', 'BEACH', 'STONE', 'STEEL', 'FROST', 'BLOOM', 'PLANT', 'GRASS', 'TREES', 'WOODS', 'FRESH', 'SUNNY', 'WINDS', 'WAVES', 'CORAL', 'PEARL', 'AMBER', 'LUNAR', 'SOLAR', 'COMET', 'ORBIT', 'GALES', 'MISTY'],\n  EMOTIONS: ['HAPPY', 'SMILE', 'LAUGH', 'PEACE', 'GRACE', 'CHARM', 'TRUST', 'PRIDE', 'DREAM', 'HOPES', 'BRAVE', 'SMART', 'SWEET', 'GENTLE', 'CALM', 'BOLD', 'FIERCE', 'NOBLE', 'WARM', 'KIND', 'BLISS', 'CHEER', 'MERRY', 'JOLLY', 'EAGER', 'LOVED', 'ADORE', 'HEART', 'SOUL', 'SPIRIT'],\n  ACTIONS: ['DANCE', 'CLIMB', 'REACH', 'SWIFT', 'SPEED', 'FLASH', 'SPARK', 'SHINE', 'GLIDE', 'SOAR', 'DRIFT', 'FLOAT', 'SWING', 'TWIST', 'TWIRL', 'SLIDE', 'BOUND', 'LEAP', 'JUMP', 'RUSH', 'ZOOM', 'WHIRL', 'SPIN', 'TURN', 'FLIP', 'DIVE', 'SURF', 'RIDE', 'FLOW'],\n  COLORS: ['LIGHT', 'BRIGHT', 'GLOW', 'SHADE', 'AZURE', 'CORAL', 'IVORY', 'EBONY', 'ROUGE', 'OLIVE', 'AMBER', 'PEARL', 'GOLD', 'SILVER', 'BRONZE', 'ROYAL', 'VIVID', 'CLEAR', 'CRISP', 'SHARP'],\n  TECH: ['CYBER', 'PIXEL', 'CODES', 'BYTES', 'LINKS', 'NODES', 'VIRAL', 'TREND', 'BLEND', 'MERGE', 'SHIFT', 'ADAPT', 'SMART', 'QUICK', 'RAPID', 'BOOST', 'POWER', 'FORCE', 'DRIVE'],\n  FANTASY: ['QUEST', 'MAGIC', 'SPELL', 'CHARM', 'FAIRY', 'TALES', 'MYTHS', 'EPIC', 'HERO', 'BRAVE', 'BOLD', 'VALOR', 'HONOR', 'GLORY', 'CROWN', 'ROYAL', 'NOBLE', 'MIGHTY', 'SWORD', 'SHIELD', 'TOWER', 'REALM', 'LANDS', 'WORLD', 'SPACE', 'COSMIC'],\n  OBJECTS: ['HOUSE', 'TOWER', 'CABIN', 'LODGE', 'VENUE', 'PLAZA', 'GATES', 'DOORS', 'WALLS', 'ROOF', 'BOOKS', 'PAGES', 'WORDS', 'TALES', 'STORY', 'NOVEL', 'POEMS', 'SONGS', 'MUSIC', 'NOTES', 'GIFTS', 'PRIZE', 'TOKEN', 'BADGE', 'MEDAL', 'CROWN', 'JEWEL', 'RINGS', 'CHAIN', 'CHARM']\n};\n\n// Expanded target words pool with 300+ words for variety\nexport const TARGET_WORDS = [\n  // Nature & Elements\n  'WATER', 'EARTH', 'FLAME', 'STORM', 'CLOUD', 'OCEAN', 'RIVER', 'BEACH', 'STONE', 'STEEL',\n  'FROST', 'BLOOM', 'PLANT', 'GRASS', 'TREES', 'WOODS', 'FRESH', 'SUNNY', 'WINDS', 'WAVES',\n  'CORAL', 'PEARL', 'AMBER', 'LUNAR', 'SOLAR', 'STARR', 'COMET', 'ORBIT', 'GALES', 'MISTY',\n  \n  // Emotions & Feelings\n  'HAPPY', 'SMILE', 'LAUGH', 'PEACE', 'GRACE', 'CHARM', 'TRUST', 'PRIDE', 'DREAM', 'HOPES',\n  'BRAVE', 'SMART', 'SWEET', 'GENTLE', 'CALM', 'BOLD', 'FIERCE', 'NOBLE', 'WARM', 'KIND',\n  'BLISS', 'CHEER', 'MERRY', 'JOLLY', 'EAGER', 'LOVED', 'ADORE', 'HEART', 'SOUL', 'SPIRIT',\n  \n  // Actions & Movement\n  'DANCE', 'CLIMB', 'REACH', 'SWIFT', 'SPEED', 'FLASH', 'SPARK', 'SHINE', 'GLIDE', 'SOAR',\n  'DRIFT', 'FLOAT', 'SWING', 'TWIST', 'TWIRL', 'GLIDE', 'SLIDE', 'BOUND', 'LEAP', 'JUMP',\n  'RUSH', 'ZOOM', 'WHIRL', 'SPIN', 'TURN', 'FLIP', 'DIVE', 'SURF', 'RIDE', 'FLOW',\n  \n  // Colors & Visual\n  'LIGHT', 'BRIGHT', 'GLOW', 'SHADE', 'AZURE', 'CORAL', 'IVORY', 'EBONY', 'ROUGE', 'OLIVE',\n  'AMBER', 'PEARL', 'GOLD', 'SILVER', 'BRONZE', 'ROYAL', 'VIVID', 'CLEAR', 'CRISP', 'SHARP',\n  \n  // Technology & Modern\n  'CYBER', 'PIXEL', 'CODES', 'BYTES', 'LINKS', 'NODES', 'VIRAL', 'TREND', 'BLEND', 'MERGE',\n  'SHIFT', 'ADAPT', 'EVOLVE', 'SMART', 'QUICK', 'RAPID', 'BOOST', 'POWER', 'FORCE', 'DRIVE',\n  \n  // Adventure & Fantasy\n  'QUEST', 'MAGIC', 'SPELL', 'CHARM', 'MYSTIC', 'FAIRY', 'TALES', 'MYTHS', 'LEGENDS', 'EPIC',\n  'HERO', 'BRAVE', 'BOLD', 'VALOR', 'HONOR', 'GLORY', 'CROWN', 'ROYAL', 'NOBLE', 'MIGHTY',\n  'SWORD', 'SHIELD', 'TOWER', 'CASTLE', 'REALM', 'LANDS', 'WORLD', 'SPACE', 'GALAXY', 'COSMIC',\n  \n  // Objects & Things\n  'HOUSE', 'TOWER', 'CABIN', 'LODGE', 'VENUE', 'PLAZA', 'GATES', 'DOORS', 'WALLS', 'ROOF',\n  'BOOKS', 'PAGES', 'WORDS', 'TALES', 'STORY', 'NOVEL', 'POEMS', 'SONGS', 'MUSIC', 'NOTES',\n  'GIFTS', 'PRIZE', 'TOKEN', 'BADGE', 'MEDAL', 'CROWN', 'JEWEL', 'RINGS', 'CHAIN', 'CHARM',\n  \n  // Food & Taste\n  'SWEET', 'SPICY', 'FRESH', 'CRISP', 'TASTE', 'FLAVOR', 'SUGAR', 'HONEY', 'CREAM', 'JUICE',\n  'FRUIT', 'GRAPE', 'APPLE', 'BERRY', 'MELON', 'PEACH', 'MANGO', 'LEMON', 'HERBS', 'SPICE',\n  \n  // Time & Seasons\n  'TODAY', 'NIGHT', 'EARLY', 'LATER', 'TIMER', 'TIMES', 'YEARS', 'YOUTH', 'NEWLY', 'FRESH',\n  'CYCLE', 'PHASE', 'STAGE', 'TURNS', 'SHIFT', 'CHANGE', 'TREND', 'STYLE', 'VOGUE', 'RETRO',\n  \n  // Abstract Concepts\n  'TRUTH', 'FAITH', 'TRUST', 'UNITY', 'PEACE', 'HOPE', 'DREAM', 'IDEAL', 'VALUE', 'WORTH',\n  'HONOR', 'PRIDE', 'GRACE', 'CHARM', 'STYLE', 'CLASS', 'ELITE', 'PRIME', 'ROYAL', 'GRAND',\n  'SOLID', 'VALID', 'EXACT', 'CLEAR', 'SHARP', 'FOCUS', 'SCOPE', 'RANGE', 'LIMIT', 'BOUND',\n  \n  // Sports & Games\n  'SPORT', 'GAMES', 'PLAYS', 'TEAMS', 'MATCH', 'SCORE', 'WINS', 'GOALS', 'SKILLS', 'SPEED',\n  'POWER', 'FORCE', 'SWING', 'PITCH', 'CATCH', 'THROW', 'KICKS', 'JUMPS', 'RUNS', 'RACE',\n  \n  // Art & Creativity\n  'PAINT', 'BRUSH', 'COLOR', 'SHADE', 'LINES', 'CRAFT', 'STYLE', 'FORMS', 'SHAPE', 'CURVE',\n  'BLEND', 'MERGE', 'TWIST', 'SWIRL', 'FLOW', 'GRACE', 'CHARM', 'BEAUTY', 'ELEGANCE', 'ARTSY',\n  \n  // Communication\n  'VOICE', 'SPEAK', 'WORDS', 'TALES', 'STORY', 'SHARE', 'TALKS', 'CALLS', 'TEXTS', 'CODES',\n  'SIGNS', 'HINTS', 'CLUES', 'NOTES', 'MEMOS', 'NEWS', 'INFO', 'DATA', 'FACTS', 'TRUTH'\n];\n\n// Utility functions for dynamic word generation\nexport function getRandomWord(): string {\n  return TARGET_WORDS[Math.floor(Math.random() * TARGET_WORDS.length)];\n}\n\nexport function getRandomWordFromCategory(category: keyof typeof WORD_CATEGORIES): string {\n  const words = WORD_CATEGORIES[category];\n  return words[Math.floor(Math.random() * words.length)];\n}\n\n// Challenging words for daily challenge mode\nexport const DAILY_CHALLENGE_WORDS = [\n  // Sophisticated vocabulary - harder to guess\n  'VIVID', 'AZURE', 'EBONY', 'ROUGE', 'IVORY', 'AMBER', 'CORAL', 'PEARL', 'LUNAR', 'SOLAR',\n  'CYBER', 'PIXEL', 'BYTES', 'NODES', 'VIRAL', 'BLEND', 'MERGE', 'SHIFT', 'ADAPT', 'EVOLVE',\n  'MYSTIC', 'VALOR', 'HONOR', 'GLORY', 'REALM', 'SPELL', 'CHARM', 'FAIRY', 'MYTHS', 'EPIC',\n  'CRISP', 'SWIFT', 'SHARP', 'VIVID', 'CLEAR', 'SCOPE', 'RANGE', 'LIMIT', 'BOUND', 'SOLID',\n  'GALES', 'MISTY', 'ORBIT', 'COMET', 'COSMIC', 'PHASE', 'CYCLE', 'STAGE', 'TURNS', 'TWIST',\n  'WHIRL', 'SWIRL', 'TWIRL', 'GLIDE', 'SOAR', 'DRIFT', 'FLOAT', 'BOUND', 'LEAP', 'SURF',\n  'BLISS', 'CHEER', 'MERRY', 'JOLLY', 'EAGER', 'LOVED', 'ADORE', 'GENTLE', 'FIERCE', 'NOBLE',\n  'GRACE', 'CHARM', 'STYLE', 'CLASS', 'ELITE', 'PRIME', 'GRAND', 'ROYAL', 'MIGHTY', 'BOLD',\n  'ARTSY', 'CRAFT', 'FORMS', 'CURVE', 'SHADE', 'LINES', 'BRUSH', 'PAINT', 'COLOR', 'GLOW',\n  'CODES', 'HINTS', 'CLUES', 'SIGNS', 'TEXTS', 'MEMOS', 'VOICE', 'TALES', 'STORY', 'POEMS'\n];\n\nexport function getDailyWord(): string {\n  // Generate a word based on today's date for consistency\n  const today = new Date();\n  const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 1000 / 60 / 60 / 24);\n  const index = dayOfYear % TARGET_WORDS.length;\n  return TARGET_WORDS[index];\n}\n\nexport function getDailyChallengeWord(): string {\n  // Generate a consistent daily challenge word based on date\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = today.getMonth() + 1;\n  const day = today.getDate();\n  \n  // Create a seed based on date to ensure consistency\n  const dateString = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n  let seed = 0;\n  for (let i = 0; i < dateString.length; i++) {\n    seed = ((seed << 5) - seed + dateString.charCodeAt(i)) & 0xffffffff;\n  }\n  \n  // Use seeded random to select from challenge words\n  const index = Math.abs(seed) % DAILY_CHALLENGE_WORDS.length;\n  return DAILY_CHALLENGE_WORDS[index];\n}\n\nexport function getChallengeWord(): string {\n  // Get words that are more challenging (less common emotions/actions)\n  const challengeWords = [\n    ...WORD_CATEGORIES.NATURE.slice(15), // More exotic nature words\n    ...WORD_CATEGORIES.TECH, // Tech words\n    ...WORD_CATEGORIES.FANTASY.slice(10), // Advanced fantasy terms\n  ];\n  return challengeWords[Math.floor(Math.random() * challengeWords.length)];\n}\n","size_bytes":8217},"client/src/pages/game.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, Link } from \"wouter\";\nimport GameGrid from \"@/components/game-grid\";\nimport Keyboard from \"@/components/keyboard\";\nimport CelebrationModal from \"@/components/celebration-modal\";\nimport StatsModal from \"@/components/stats-modal\";\nimport MenuModal from \"@/components/menu-modal\";\nimport FontStoreModal from \"@/components/font-store-modal\";\nimport HowToPlayModal from \"@/components/how-to-play-modal\";\nimport SettingsModal from \"@/components/settings-modal\";\n\nimport { useWordle } from \"@/hooks/use-wordle-simple\";\nimport { useSettings } from \"@/hooks/use-settings\";\nimport { useAudio } from \"@/hooks/use-audio\";\nimport { Menu, Clock, Home, Store, Coins } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { FontStoreAPI } from \"@/components/font-store-modal\";\nimport { useCoins } from \"@/components/ad-manager\";\n\n// Format time as MM:SS\nconst formatTime = (seconds: number): string => {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n};\n\ninterface GameProps {\n  mode?: 'classic' | 'challenge' | 'daily' | 'blind';\n}\n\nexport default function Game({ mode: propMode }: GameProps = {}) {\n  const { toast } = useToast();\n  const [location] = useLocation();\n  const { settings, updateSettings } = useSettings();\n  const { startBackgroundMusic, stopBackgroundMusic } = useAudio();\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [showStats, setShowStats] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showFontStore, setShowFontStore] = useState(false);\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [coins, setCoins] = useState(0);\n  \n  // Determine game mode from props or URL\n  const params = new URLSearchParams(location.split('?')[1] || '');\n  const mode = propMode || params.get('mode') || 'classic';\n  const challengeMode = mode === 'challenge';\n  const dailyChallengeMode = mode === 'daily';\n  const blindChallengeMode = mode === 'blind';\n  \n  const {\n    grid,\n    currentGuess,\n    currentRow,\n    gameState,\n    keyboardState,\n    score,\n    targetWord,\n    evaluatedRows,\n    timeRemaining,\n    gameEndedByTime,\n    stats,\n    onKeyPress,\n    onEnter,\n    onBackspace,\n    resetGame,\n    submitResult,\n    invalidWord,\n    clearInvalidWord\n  } = useWordle(challengeMode, dailyChallengeMode, () => {\n    toast({\n      title: \"Time's Up!\",\n      description: \"Challenge mode time expired\",\n      variant: \"destructive\"\n    });\n  });\n\n  // Use the persistent coin system\n  const { coins: persistentCoins, addCoins } = useCoins();\n  \n  \n  // Load coin balance on mount and listen for changes\n  useEffect(() => {\n    const updateCoins = () => setCoins(FontStoreAPI.getState().coins);\n    updateCoins();\n    \n    // Apply stored font styles on game load\n    FontStoreAPI.applyStoredStyles();\n    \n    window.addEventListener('storage', updateCoins);\n    return () => window.removeEventListener('storage', updateCoins);\n  }, []);\n\n  // Timer is now handled in the hook\n\n  // Handle game state changes and award coins\n  useEffect(() => {\n    if (gameState === 'won') {\n      // Award coins based on performance\n      const baseReward = 20;\n      const attemptBonus = Math.max(0, (7 - (currentRow + 1)) * 5); // Bonus for fewer attempts\n      const timeBonus = challengeMode ? Math.max(0, Math.floor(timeRemaining / 10)) : 0;\n      const modeMultiplier = challengeMode ? 1.5 : blindChallengeMode ? 2 : 1;\n      \n      const totalReward = Math.floor((baseReward + attemptBonus + timeBonus) * modeMultiplier);\n      \n      FontStoreAPI.addCoins(totalReward);\n      setCoins(FontStoreAPI.getState().coins);\n      \n      // Show celebration modal immediately and also with delay as backup\n      setShowCelebration(true);\n      setTimeout(() => setShowCelebration(true), 500);\n      \n      toast({\n        title: \"Coins Earned!\",\n        description: `+${totalReward} coins for winning!`,\n        duration: 3000,\n      });\n    } else if (gameState === 'lost') {\n      // Small consolation prize\n      FontStoreAPI.addCoins(5);\n      setCoins(FontStoreAPI.getState().coins);\n      \n      setShowCelebration(true);\n      setTimeout(() => setShowCelebration(true), 500);\n      \n      toast({\n        title: \"Game Over\",\n        description: `The word was ${targetWord} (+5 consolation coins)`,\n        variant: \"destructive\"\n      });\n    }\n  }, [gameState, targetWord, toast, currentRow, challengeMode, blindChallengeMode, timeRemaining]);\n\n  const handleNewGame = () => {\n    resetGame();\n    setShowCelebration(false);\n    setShowStats(false);\n    setShowMenu(false);\n    setShowFontStore(false);\n  };\n\n  // Mode display text\n  const getModeText = () => {\n    if (dailyChallengeMode) return 'Daily Challenge';\n    if (challengeMode) return 'Timed Challenge';\n    if (blindChallengeMode) return 'Blind Challenge';\n    return 'Classic Game';\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"game-container min-h-screen flex flex-col bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 relative overflow-hidden\">\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 opacity-20 pointer-events-none\">\n        <div className=\"absolute top-10 left-10 w-20 h-20 bg-yellow-300 rounded-full animate-bounce\" style={{ animationDelay: '0s', animationDuration: '3s' }}></div>\n        <div className=\"absolute top-32 right-16 w-16 h-16 bg-green-300 rounded-full animate-bounce\" style={{ animationDelay: '1s', animationDuration: '4s' }}></div>\n        <div className=\"absolute bottom-20 left-20 w-24 h-24 bg-pink-300 rounded-full animate-bounce\" style={{ animationDelay: '2s', animationDuration: '3.5s' }}></div>\n        <div className=\"absolute bottom-40 right-10 w-12 h-12 bg-cyan-300 rounded-full animate-bounce\" style={{ animationDelay: '0.5s', animationDuration: '2.5s' }}></div>\n      </div>\n      \n      {/* Falling letters animation */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {['W', 'O', 'R', 'D', 'S', 'P', 'L', 'A', 'Y', 'F', 'U', 'N'].map((letter, index) => (\n          <div\n            key={`falling-${letter}-${index}`}\n            className=\"absolute text-6xl font-bold opacity-10 text-white animate-pulse\"\n            style={{\n              left: `${(index * 8.33) % 100}%`,\n              top: `-10%`,\n              animation: `fall-${index % 4} ${12 + (index % 8)}s linear infinite`,\n              animationDelay: `${index * 2}s`,\n              textShadow: '2px 2px 4px rgba(0,0,0,0.3)',\n            }}\n          >\n            {letter}\n          </div>\n        ))}\n      </div>\n\n      {/* Header */}\n      <motion.header \n        className=\"sticky top-0 z-50 bg-white/90 backdrop-blur-md shadow-lg border-b-4 border-yellow-400\"\n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"w-full px-3 py-3 sm:px-4 sm:py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <Link href=\"/\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  className=\"p-2 sm:p-3 bg-white/20 text-gray-800 rounded-xl shadow-lg border border-white/30\"\n                  data-testid=\"button-home\"\n                >\n                  <Home className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                </Button>\n              </Link>\n              <button \n                onClick={() => setShowMenu(true)}\n                className=\"p-2 sm:p-3 bg-white/20 text-gray-800 rounded-xl shadow-lg border border-white/30\"\n                data-testid=\"button-menu\"\n              >\n                <Menu className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </button>\n              <motion.h1 \n                className=\"font-bold text-lg sm:text-2xl bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent\"\n                animate={{ scale: [1, 1.05, 1] }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                Word Pop! - {getModeText()}\n              </motion.h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-1.5 sm:space-x-3\">\n              <motion.div \n                className=\"bg-gradient-to-r from-purple-500 to-blue-600 text-white px-3 py-2 sm:px-4 sm:py-2 rounded-full text-xs sm:text-sm font-bold shadow-lg border-2 border-white cursor-pointer\"\n                animate={{ scale: [1, 1.05, 1] }}\n                transition={{ duration: 2, repeat: Infinity }}\n                onClick={() => setShowFontStore(true)}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Coins className=\"w-3 h-3 sm:w-4 sm:h-4 inline mr-1\" />\n                <span data-testid=\"text-coins\">{persistentCoins}</span>\n              </motion.div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"p-2 sm:p-3 bg-white/20 text-gray-800 rounded-xl shadow-lg border border-white/30\"\n                onClick={() => setShowFontStore(true)}\n                data-testid=\"button-store\"\n              >\n                <Store className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </Button>\n              \n              {challengeMode && (\n                <motion.div \n                  className=\"bg-gradient-to-r from-red-500 to-pink-600 text-white px-3 py-2 sm:px-4 sm:py-2 rounded-full text-xs sm:text-sm font-bold shadow-lg border-2 border-white\"\n                  animate={{ scale: timeRemaining <= 30 ? [1, 1.2, 1] : [1, 1.05, 1] }}\n                  transition={{ duration: timeRemaining <= 30 ? 0.5 : 1.5, repeat: Infinity }}\n                >\n                  <Clock className=\"w-3 h-3 sm:w-4 sm:h-4 inline mr-1\" />\n                  <span data-testid=\"text-timer\">{formatTime(timeRemaining)}</span>\n                </motion.div>\n              )}\n              \n              {dailyChallengeMode && (\n                <motion.div \n                  className=\"bg-gradient-to-r from-orange-500 to-red-600 text-white px-3 py-2 sm:px-4 sm:py-2 rounded-full text-xs sm:text-sm font-bold shadow-lg border-2 border-white\"\n                  animate={{ rotate: [0, 5, -5, 0] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <span data-testid=\"text-daily-indicator\">🔥 DAILY</span>\n                </motion.div>\n              )}\n              \n              {blindChallengeMode && (\n                <motion.div \n                  className=\"bg-gradient-to-r from-gray-700 to-black text-white px-3 py-2 sm:px-4 sm:py-2 rounded-full text-xs sm:text-sm font-bold shadow-lg border-2 border-white\"\n                  animate={{ opacity: [1, 0.7, 1] }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                >\n                  <span data-testid=\"text-blind-indicator\">👁️ BLIND</span>\n                </motion.div>\n              )}\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <main className=\"flex-1 w-full px-3 py-4 sm:px-4 sm:py-6 max-w-sm sm:max-w-lg mx-auto relative z-10\">\n        {/* Stats Bar */}\n        {/* Blind Challenge Info */}\n        {blindChallengeMode && (\n          <motion.div \n            className=\"bg-gradient-to-r from-gray-800 to-black text-white rounded-2xl p-4 mb-4 shadow-2xl border-2 border-white/30\"\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <div className=\"text-center\">\n              <div className=\"text-2xl mb-2\">👁️ BLIND CHALLENGE</div>\n              <p className=\"text-sm opacity-90\">\n                No keyboard colors shown. Track used letters mentally!\n              </p>\n            </div>\n          </motion.div>\n        )}\n\n        <motion.div \n          className=\"bg-white/95 backdrop-blur-sm rounded-2xl p-4 sm:p-5 mb-4 sm:mb-6 shadow-2xl border-4 border-white/50\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          style={{\n            background: 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(240,248,255,0.95) 100%)'\n          }}\n        >\n          <div className=\"flex items-center justify-between text-xs sm:text-sm\">\n            <motion.div \n              className=\"text-center flex-1\"\n              whileHover={{ scale: 1.1 }}\n            >\n              <div className=\"font-bold text-2xl bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent\" data-testid=\"text-attempt\">{currentRow + 1}</div>\n              <div className=\"text-gray-600 text-xs font-semibold\">Attempt</div>\n            </motion.div>\n            <motion.div \n              className=\"text-center flex-1\"\n              whileHover={{ scale: 1.1 }}\n            >\n              <div className=\"font-bold text-2xl bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent\" data-testid=\"text-streak\">{stats.currentStreak}</div>\n              <div className=\"text-gray-600 text-xs font-semibold\">Streak</div>\n            </motion.div>\n            <motion.div \n              className=\"text-center flex-1\"\n              whileHover={{ scale: 1.1 }}\n            >\n              <div className=\"font-bold text-2xl bg-gradient-to-r from-purple-500 to-pink-600 bg-clip-text text-transparent\" data-testid=\"text-coins\">{persistentCoins}</div>\n              <div className=\"text-gray-600 text-xs font-semibold\">Coins</div>\n            </motion.div>\n            <motion.div \n              className=\"text-center flex-1\"\n              whileHover={{ scale: 1.1 }}\n            >\n              <button \n                onClick={() => setShowStats(true)}\n                className=\"font-bold text-lg bg-gradient-to-r from-orange-500 to-red-600 bg-clip-text text-transparent hover:from-orange-600 hover:to-red-700 transition-all duration-300\"\n                data-testid=\"button-show-stats\"\n              >\n                📊\n              </button>\n              <div className=\"text-gray-600 text-xs font-semibold\">Stats</div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        {/* Game Grid */}\n        <GameGrid \n          grid={grid}\n          currentGuess={currentGuess}\n          currentRow={currentRow}\n          gameState={gameState}\n          targetWord={targetWord}\n          evaluatedRows={evaluatedRows}\n        />\n\n\n\n        {/* Keyboard */}\n        <Keyboard\n          onKeyPress={onKeyPress}\n          onEnter={onEnter}\n          onBackspace={onBackspace}\n          keyboardState={keyboardState}\n          disabled={gameState !== 'playing' || (challengeMode && timeRemaining === 0)}\n          blindMode={blindChallengeMode}\n        />\n      </main>\n\n      {/* Modals */}\n      <CelebrationModal\n        isOpen={showCelebration}\n        onClose={() => setShowCelebration(false)}\n        score={score}\n        attempts={currentRow + 1}\n        challengeMode={challengeMode}\n        blindChallengeMode={blindChallengeMode}\n        timeElapsed={challengeMode ? 180 - timeRemaining : 0}\n        onPlayAgain={handleNewGame}\n        onChallengeMode={() => window.location.href = challengeMode ? '/game' : '/game?mode=challenge'}\n        gameEndedByTime={gameEndedByTime}\n        onViewStats={() => {\n          setShowCelebration(false);\n          setShowStats(true);\n        }}\n        coinsEarned={gameState === 'won' ? Math.floor((20 + Math.max(0, (7 - (currentRow + 1)) * 5) + (challengeMode ? Math.max(0, Math.floor(timeRemaining / 10)) : 0)) * (challengeMode ? 1.5 : blindChallengeMode ? 2 : 1)) : gameState === 'lost' ? 5 : 0}\n        onHome={() => window.location.href = '/'}\n        targetWord={targetWord}\n        won={gameState === 'won'}\n      />\n\n      <StatsModal\n        isOpen={showStats}\n        onClose={() => setShowStats(false)}\n        stats={stats}\n      />\n\n      <MenuModal\n        isOpen={showMenu}\n        onClose={() => setShowMenu(false)}\n        onNewGame={handleNewGame}\n        onStats={() => {\n          setShowMenu(false);\n          setShowStats(true);\n        }}\n        onSettings={() => {\n          setShowMenu(false);\n          setShowSettings(true);\n        }}\n        onHowToPlay={() => {\n          setShowMenu(false);\n          setShowHowToPlay(true);\n        }}\n        challengeMode={challengeMode}\n        blindChallengeMode={blindChallengeMode}\n      />\n\n      <FontStoreModal\n        isOpen={showFontStore}\n        onClose={() => setShowFontStore(false)}\n      />\n\n      <HowToPlayModal\n        isOpen={showHowToPlay}\n        onClose={() => setShowHowToPlay(false)}\n      />\n\n      {settings && (\n        <SettingsModal\n          isOpen={showSettings}\n          onClose={() => setShowSettings(false)}\n          settings={settings}\n          onSettingsChange={updateSettings}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":17456},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport SettingsModal from '@/components/settings-modal';\nimport FontStoreModal from '@/components/font-store-modal';\n// Word expansion functionality removed - now using official Wordle words only\nimport { useSettings } from '@/hooks/use-settings';\nimport { Sparkles, Calendar, Trophy, BarChart3, Settings, Store, Coins } from 'lucide-react';\nimport { FontStoreAPI } from '@/components/font-store-modal';\n\ninterface FallingLetter {\n  id: string;\n  letter: string;\n  x: number;\n  delay: number;\n  finalX: number;\n  finalY: number;\n  isTitle: boolean;\n}\n\ninterface BackgroundLetter {\n  id: string;\n  letter: string;\n  x: number;\n  y: number;\n  animationDelay: number;\n  animationDuration: number;\n}\n\nexport default function HomePage() {\n  const [fallingLetters, setFallingLetters] = useState<FallingLetter[]>([]);\n  const [backgroundLetters, setBackgroundLetters] = useState<BackgroundLetter[]>([]);\n  const [showContent, setShowContent] = useState(false);\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\n  const [showFontStore, setShowFontStore] = useState(false);\n  const [coins, setCoins] = useState(0);\n  const { settings, updateSettings } = useSettings();\n\n  // Title letters for \"WORD POP!\"\n  const titleLetters = ['W', 'O', 'R', 'D', ' ', 'P', 'O', 'P', '!'];\n  \n  useEffect(() => {\n    // Create falling letters that will settle into the title\n    const letters: FallingLetter[] = [];\n    const baseY = 120; // Where title should settle\n    const letterSpacing = 85; // Equal spacing between all letters\n    const wordSpacing = 120; // Bigger space between WORD and POP!\n    \n    // Position \"WORD\" centered over the menu content\n    const wordLetters = ['W', 'O', 'R', 'D'];\n    const totalTitleWidth = (wordLetters.length - 1) * letterSpacing + wordSpacing + (4 * letterSpacing); // WORD + gap + POP!\n    const baseStartX = window.innerWidth / 2 - (totalTitleWidth / 2) + 100; // Move title to the right\n    \n    wordLetters.forEach((letter, index) => {\n      let finalX;\n      if (index === 0) {\n        // Move W further left for equal spacing\n        finalX = baseStartX - 105; // W gets extra space\n      } else {\n        // O, R, D keep regular spacing from base position\n        finalX = baseStartX + ((index - 1) * letterSpacing);\n      }\n      \n      letters.push({\n        id: `word-${index}`,\n        letter,\n        x: Math.random() * window.innerWidth,\n        delay: index * 0.2,\n        finalX: finalX,\n        finalY: baseY,\n        isTitle: true\n      });\n    });\n\n    // Add \"POP!\" with bigger gap after \"WORD\"\n    const popLetters = ['P', 'O', 'P', '!'];\n    const popStartX = baseStartX + (2 * letterSpacing) + wordSpacing; // After \"WORD\" with big gap\n    \n    popLetters.forEach((letter, index) => {\n      letters.push({\n        id: `pop-${index}`,\n        letter,\n        x: Math.random() * window.innerWidth,\n        delay: (wordLetters.length + index) * 0.2,\n        finalX: popStartX + (index * letterSpacing),\n        finalY: baseY,\n        isTitle: true\n      });\n    });\n\n    setFallingLetters(letters);\n\n    // Create continuous background letters\n    const createBackgroundLetters = () => {\n      const backgroundLettersList: BackgroundLetter[] = [];\n      const allLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n      \n      // Create 30 background letters\n      for (let i = 0; i < 30; i++) {\n        backgroundLettersList.push({\n          id: `bg-${i}`,\n          letter: allLetters[Math.floor(Math.random() * allLetters.length)],\n          x: Math.random() * window.innerWidth,\n          y: -100 - Math.random() * 500, // Start above screen\n          animationDelay: Math.random() * 10, // Random start time\n          animationDuration: 8 + Math.random() * 4, // 8-12 seconds to fall\n        });\n      }\n      \n      setBackgroundLetters(backgroundLettersList);\n    };\n\n    createBackgroundLetters();\n\n    // Show main content after animation\n    const timer = setTimeout(() => {\n      setShowContent(true);\n    }, 3000);\n\n    // Continuously regenerate background letters\n    const backgroundInterval = setInterval(() => {\n      createBackgroundLetters();\n    }, 5000); // New letters every 5 seconds\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(backgroundInterval);\n    };\n  }, []);\n\n  // Load coins on mount and listen for changes\n  useEffect(() => {\n    const updateCoins = () => setCoins(FontStoreAPI.getState().coins);\n    updateCoins();\n    \n    window.addEventListener('storage', updateCoins);\n    return () => window.removeEventListener('storage', updateCoins);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 dark:from-purple-900 dark:via-pink-900 dark:to-red-900 overflow-hidden relative\">\n      {/* Title Falling Letters Animation */}\n      <AnimatePresence>\n        {fallingLetters.map((letter) => (\n          <motion.div\n            key={letter.id}\n            className=\"absolute font-bold text-white text-6xl md:text-8xl z-20\"\n            initial={{\n              x: letter.x,\n              y: -100,\n              rotate: Math.random() * 360,\n              scale: 0.5\n            }}\n            animate={{\n              x: letter.finalX,\n              y: letter.finalY,\n              rotate: 0,\n              scale: 1\n            }}\n            transition={{\n              delay: letter.delay,\n              duration: 1.5,\n              type: \"spring\",\n              stiffness: 60,\n              damping: 15\n            }}\n            style={{\n              textShadow: '2px 2px 4px rgba(0,0,0,0.5)',\n              filter: 'drop-shadow(0 0 10px rgba(255,255,255,0.3))'\n            }}\n          >\n            {letter.letter}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Continuous Background Letters */}\n      <AnimatePresence>\n        {backgroundLetters.map((letter) => (\n          <motion.div\n            key={letter.id}\n            className=\"absolute font-bold text-white/20 text-3xl md:text-5xl z-5 pointer-events-none\"\n            initial={{\n              x: letter.x,\n              y: letter.y,\n              rotate: Math.random() * 360,\n              scale: 0.8\n            }}\n            animate={{\n              x: letter.x + (Math.random() - 0.5) * 100,\n              y: window.innerHeight + 100,\n              rotate: Math.random() * 360,\n              scale: 0.6\n            }}\n            transition={{\n              delay: letter.animationDelay,\n              duration: letter.animationDuration,\n              repeat: Infinity,\n              ease: \"linear\"\n            }}\n            style={{\n              textShadow: '1px 1px 2px rgba(0,0,0,0.3)'\n            }}\n          >\n            {letter.letter}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Main Content */}\n      <motion.div\n        className=\"flex flex-col items-center justify-center min-h-screen px-4 relative z-30\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: showContent ? 1 : 0 }}\n        transition={{ duration: 1 }}\n      >\n        {/* Spacer for title */}\n        <div className=\"h-48 md:h-56\"></div>\n\n        {/* Subtitle */}\n        <motion.p\n          className=\"text-lg md:text-xl text-white/90 mb-8 text-center font-medium px-4\"\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: showContent ? 1 : 0 }}\n          transition={{ delay: 0.5, duration: 0.8 }}\n          style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.3)' }}\n        >\n          The Ultimate Word Guessing Challenge\n        </motion.p>\n\n        {/* Game Mode Cards */}\n        <motion.div\n          className=\"grid gap-4 w-full max-w-md\"\n          initial={{ y: 40, opacity: 0 }}\n          animate={{ y: 0, opacity: showContent ? 1 : 0 }}\n          transition={{ delay: 0.7, duration: 0.8 }}\n        >\n          {/* Classic Mode */}\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <Link href=\"/game\" data-testid=\"link-classic-mode\">\n                <Button \n                  className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white border-0 shadow-lg\"\n                  data-testid=\"button-classic-game\"\n                >\n                  <Sparkles className=\"mr-2 h-5 w-5\" />\n                  Classic Game\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Daily Challenge */}\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <Link href=\"/daily\" data-testid=\"link-daily-challenge\">\n                <Button \n                  className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white border-0 shadow-lg\"\n                  data-testid=\"button-daily-challenge\"\n                >\n                  <Calendar className=\"mr-2 h-5 w-5\" />\n                  🔥 Daily Challenge\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Challenge Mode */}\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <Link href=\"/challenge\" data-testid=\"link-challenge-mode\">\n                <Button \n                  className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white border-0 shadow-lg\"\n                  data-testid=\"button-timed-challenge\"\n                >\n                  <Trophy className=\"mr-2 h-5 w-5\" />\n                  Timed Challenge\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Blind Challenge */}\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <Link href=\"/blind\" data-testid=\"link-blind-challenge\">\n                <Button \n                  className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-gray-700 to-black hover:from-gray-800 hover:to-gray-900 text-white border-0 shadow-lg\"\n                  data-testid=\"button-blind-challenge\"\n                >\n                  <span className=\"mr-2\">👁️</span>\n                  Blind Challenge\n                </Button>\n              </Link>\n              <p className=\"text-white/80 text-xs mt-2 text-center\">\n                Hardcore mode - no keyboard colors!\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Font Store with Coin Balance */}\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Store className=\"h-5 w-5 text-white\" />\n                  <span className=\"text-white font-semibold\">Style Store</span>\n                </div>\n                <div className=\"flex items-center space-x-1 bg-gradient-to-r from-purple-500 to-blue-600 text-white px-3 py-1 rounded-full text-sm font-bold\">\n                  <Coins className=\"w-3 h-3\" />\n                  <span>{coins}</span>\n                </div>\n              </div>\n              <Button \n                className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white border-0 shadow-lg\"\n                onClick={() => setShowFontStore(true)}\n                data-testid=\"button-font-store\"\n              >\n                Browse Styles\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Bottom row with Statistics and Settings */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            {/* Statistics */}\n            <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n              <CardContent className=\"p-4\">\n                <Link href=\"/stats\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full text-white hover:bg-white/20\"\n                    data-testid=\"button-view-stats\"\n                  >\n                    <BarChart3 className=\"mr-2 h-4 w-4\" />\n                    Stats\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Settings */}\n            <Card className=\"bg-white/20 backdrop-blur-sm border-white/30 hover:bg-white/30 transition-all duration-300\">\n              <CardContent className=\"p-4\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full text-white hover:bg-white/20\"\n                  onClick={() => setShowSettingsModal(true)}\n                  data-testid=\"button-settings\"\n                >\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n\n        {/* Word Expansion Feature */}\n        <motion.div\n          className=\"mt-6\"\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: showContent ? 1 : 0 }}\n          transition={{ delay: 0.9, duration: 0.8 }}\n        >\n          {/* Word expansion removed - using official Wordle words only */}\n        </motion.div>\n\n        {/* Footer */}\n        <motion.div\n          className=\"mt-4 text-white/70 text-center\"\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: showContent ? 1 : 0 }}\n          transition={{ delay: 1, duration: 0.8 }}\n        >\n          <p className=\"text-sm\">\n            Guess the word in 6 tries or less!\n          </p>\n        </motion.div>\n      </motion.div>\n\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.1),transparent_70%)]\"></div>\n      </div>\n\n      {/* Settings Modal */}\n      <SettingsModal\n        isOpen={showSettingsModal}\n        onClose={() => setShowSettingsModal(false)}\n        settings={settings}\n        onSettingsChange={updateSettings}\n      />\n\n      {/* Font Store Modal */}\n      <FontStoreModal\n        isOpen={showFontStore}\n        onClose={() => setShowFontStore(false)}\n      />\n    </div>\n  );\n}","size_bytes":15075},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/stats.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowLeft, Trophy, Target, Clock, TrendingUp } from 'lucide-react';\nimport type { GameStats } from '@shared/schema';\n\nexport default function StatsPage() {\n  const { data: stats, isLoading } = useQuery<GameStats>({\n    queryKey: ['/api/stats']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 dark:from-purple-900 dark:via-pink-900 dark:to-red-900 flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading statistics...</div>\n      </div>\n    );\n  }\n\n  const winRate = stats ? Math.round((stats.totalWins / stats.totalGames) * 100) : 0;\n  const avgGuesses = '0'; // We'll calculate this from game results later\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 dark:from-purple-900 dark:via-pink-900 dark:to-red-900 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          className=\"flex items-center gap-4 mb-8\"\n          initial={{ y: -20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"text-white hover:bg-white/20\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n          <h1 className=\"text-4xl font-bold text-white\" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.5)' }}>\n            Your Statistics\n          </h1>\n        </motion.div>\n\n        {/* Main Stats Grid */}\n        <motion.div\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\"\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.2, duration: 0.6 }}\n        >\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Games Played\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-white\">\n                {stats?.totalGames || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5\" />\n                Win Rate\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-white\">\n                {winRate}%\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Avg Guesses\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-white\">\n                {avgGuesses}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/20 backdrop-blur-sm border-white/30\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Total Points\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-white\">\n                {stats?.totalPoints || 0}\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Guess Distribution */}\n        {stats && stats.guessDistribution && (\n          <motion.div\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.4, duration: 0.6 }}\n          >\n            <Card className=\"bg-white/20 backdrop-blur-sm border-white/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Guess Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {[1, 2, 3, 4, 5, 6].map((guess) => {\n                    const distribution = JSON.parse(stats.guessDistribution);\n                    const count = distribution[guess.toString()] || 0;\n                    const maxCount = Math.max(...Object.values(distribution).map(v => Number(v)));\n                    const percentage = maxCount > 0 ? (count / maxCount) * 100 : 0;\n                    \n                    return (\n                      <div key={guess} className=\"flex items-center gap-4\">\n                        <span className=\"text-white font-bold w-4\">{guess}</span>\n                        <div className=\"flex-1 bg-white/20 rounded-full h-6 relative overflow-hidden\">\n                          <motion.div\n                            className=\"h-full bg-gradient-to-r from-green-400 to-blue-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: `${percentage}%` }}\n                            transition={{ delay: 0.6 + guess * 0.1, duration: 0.8 }}\n                          />\n                          <span className=\"absolute inset-0 flex items-center justify-center text-white font-semibold text-sm\">\n                            {count}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Play Again Button */}\n        <motion.div\n          className=\"text-center mt-8\"\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.6, duration: 0.6 }}\n        >\n          <Link href=\"/game\">\n            <Button \n              className=\"bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white px-8 py-3 text-lg font-bold shadow-lg\"\n              data-testid=\"button-play-again\"\n            >\n              Play Again\n            </Button>\n          </Link>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":6829},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/comprehensive-word-list.ts":{"content":"// Comprehensive 5-letter word dictionary for Wordle\n// Contains thousands of valid English words for both answers and guesses\n// NOTE: This file is being replaced with refined-word-lists.ts for better filtering\n\nimport { getFilteredAnswerWords, getFilteredGuessWords } from './refined-word-lists';\n\n// Legacy answer words - now using filtered lists\nexport const ANSWER_WORDS = [\n  'ABOUT', 'ABOVE', 'ABUSE', 'ACTOR', 'ACUTE', 'ADMIT', 'ADOPT', 'ADULT', 'AFTER', 'AGAIN',\n  'AGENT', 'AGREE', 'AHEAD', 'ALARM', 'ALBUM', 'ALERT', 'ALIEN', 'ALIGN', 'ALIKE', 'ALIVE',\n  'ALLOW', 'ALONE', 'ALONG', 'ALTER', 'ANGEL', 'ANGER', 'ANGLE', 'ANGRY', 'APART', 'APPLE',\n  'APPLY', 'ARENA', 'ARGUE', 'ARISE', 'ARRAY', 'ASIDE', 'ASSET', 'AVOID', 'AWAKE', 'AWARD',\n  'AWARE', 'BADLY', 'BAKER', 'BASIC', 'BEACH', 'BEGAN', 'BEGIN', 'BEING', 'BELOW', 'BENCH',\n  'BIRTH', 'BLACK', 'BLAME', 'BLANK', 'BLIND', 'BLOCK', 'BLOOD', 'BOARD', 'BOOST', 'BOOTH',\n  'BOUND', 'BRAIN', 'BRAND', 'BRASS', 'BRAVE', 'BREAD', 'BREAK', 'BREED', 'BRIEF', 'BRING',\n  'BROAD', 'BROKE', 'BROWN', 'BUILD', 'BUILT', 'BUYER', 'CABLE', 'CARRY', 'CATCH', 'CAUSE',\n  'CHAIN', 'CHAIR', 'CHAOS', 'CHARM', 'CHART', 'CHASE', 'CHEAP', 'CHECK', 'CHEST', 'CHILD',\n  'CHINA', 'CHOSE', 'CIVIL', 'CLAIM', 'CLASS', 'CLEAN', 'CLEAR', 'CLICK', 'CLIMB', 'CLOCK',\n  'CLOSE', 'CLOUD', 'COACH', 'COAST', 'COULD', 'COUNT', 'COURT', 'COVER', 'CRAFT', 'CRASH',\n  'CRAZY', 'CREAM', 'CRIME', 'CROSS', 'CROWD', 'CROWN', 'CRUDE', 'CURVE', 'CYCLE', 'DAILY',\n  'DANCE', 'DATED', 'DEALT', 'DEATH', 'DEBUT', 'DELAY', 'DEPTH', 'DOING', 'DOUBT', 'DOZEN',\n  'DRAFT', 'DRAMA', 'DRANK', 'DRAWN', 'DREAM', 'DRESS', 'DRILL', 'DRINK', 'DRIVE', 'DROVE',\n  'DYING', 'EAGER', 'EARLY', 'EARTH', 'EIGHT', 'ELITE', 'EMPTY', 'ENEMY', 'ENJOY', 'ENTER',\n  'ENTRY', 'EQUAL', 'ERROR', 'EVENT', 'EVERY', 'EXACT', 'EXIST', 'EXTRA', 'FAITH', 'FALSE',\n  'FAULT', 'FIBER', 'FIELD', 'FIFTH', 'FIFTY', 'FIGHT', 'FINAL', 'FIRST', 'FIXED', 'FLASH',\n  'FLEET', 'FLOOR', 'FLUID', 'FOCUS', 'FORCE', 'FORTH', 'FORTY', 'FORUM', 'FOUND', 'FRAME',\n  'FRANK', 'FRAUD', 'FRESH', 'FRONT', 'FRUIT', 'FULLY', 'FUNNY', 'GIANT', 'GIVEN', 'GLASS',\n  'GLOBE', 'GOING', 'GRACE', 'GRADE', 'GRAND', 'GRANT', 'GRASS', 'GRAVE', 'GREAT', 'GREEN',\n  'GROSS', 'GROUP', 'GROWN', 'GUARD', 'GUESS', 'GUEST', 'GUIDE', 'HAPPY', 'HEART', 'HEAVY',\n  'HENCE', 'HORSE', 'HOTEL', 'HOUSE', 'HUMAN', 'IDEAL', 'IMAGE', 'INDEX', 'INNER', 'INPUT',\n  'ISSUE', 'JOINT', 'JUDGE', 'KNOWN', 'LABEL', 'LARGE', 'LASER', 'LATER', 'LAUGH', 'LAYER',\n  'LEARN', 'LEASE', 'LEAST', 'LEAVE', 'LEGAL', 'LEVEL', 'LIGHT', 'LIMIT', 'LINKS', 'LIVES',\n  'LOCAL', 'LOOSE', 'LOWER', 'LUCKY', 'LUNCH', 'LYING', 'MAGIC', 'MAJOR', 'MAKER', 'MARCH',\n  'MATCH', 'MAYBE', 'MAYOR', 'MEANT', 'MEDIA', 'METAL', 'MIGHT', 'MINOR', 'MINUS', 'MIXED',\n  'MODEL', 'MONEY', 'MONTH', 'MORAL', 'MOTOR', 'MOUNT', 'MOUSE', 'MOUTH', 'MOVED', 'MOVIE',\n  'MUSIC', 'NEEDS', 'NEVER', 'NEWLY', 'NIGHT', 'NOISE', 'NORTH', 'NOTED', 'NOVEL', 'NURSE',\n  'OCCUR', 'OCEAN', 'OFFER', 'OFTEN', 'ORDER', 'OTHER', 'OUGHT', 'PAINT', 'PANEL', 'PAPER',\n  'PARTY', 'PEACE', 'PHASE', 'PHONE', 'PHOTO', 'PIANO', 'PIECE', 'PILOT', 'PITCH', 'PLACE',\n  'PLAIN', 'PLANE', 'PLANT', 'PLATE', 'POINT', 'POUND', 'POWER', 'PRESS', 'PRICE', 'PRIDE',\n  'PRIME', 'PRINT', 'PRIOR', 'PRIZE', 'PROOF', 'PROUD', 'PROVE', 'QUEEN', 'QUERY', 'QUIET',\n  'QUITE', 'RADIO', 'RAISE', 'RANGE', 'RAPID', 'RATIO', 'REACH', 'READY', 'REALM', 'REBEL',\n  'REFER', 'RELAX', 'REPAY', 'REPLY', 'RIGHT', 'RIGID', 'RISKY', 'RIVER', 'ROMAN', 'ROUGH',\n  'ROUND', 'ROUTE', 'ROYAL', 'RURAL', 'SCALE', 'SCENE', 'SCOPE', 'SCORE', 'SENSE', 'SERVE',\n  'SETUP', 'SEVEN', 'SHALL', 'SHAPE', 'SHARE', 'SHARP', 'SHEET', 'SHELF', 'SHELL', 'SHIFT',\n  'SHINE', 'SHIRT', 'SHOCK', 'SHOOT', 'SHORT', 'SHOWN', 'SIDES', 'SIGHT', 'SILLY', 'SINCE',\n  'SIXTH', 'SIXTY', 'SIZED', 'SKILL', 'SLEEP', 'SLIDE', 'SMALL', 'SMART', 'SMILE', 'SMOKE',\n  'SOLID', 'SOLVE', 'SORRY', 'SOUND', 'SOUTH', 'SPACE', 'SPARE', 'SPEAK', 'SPEED', 'SPEND',\n  'SPENT', 'SPLIT', 'SPOKE', 'SPORT', 'SQUAD', 'STAFF', 'STAGE', 'STAKE', 'STAND', 'START',\n  'STATE', 'STAYS', 'STEAL', 'STEAM', 'STEEL', 'STEEP', 'STEER', 'STERN', 'STICK', 'STILL',\n  'STOCK', 'STONE', 'STOOD', 'STORE', 'STORM', 'STORY', 'STRIP', 'STUCK', 'STUDY', 'STUFF',\n  'STYLE', 'SUGAR', 'SUITE', 'SUPER', 'SWEET', 'SWIFT', 'SWING', 'SWISS', 'TABLE', 'TAKEN',\n  'TASTE', 'TAXES', 'TEACH', 'TEARS', 'TEETH', 'TEXAS', 'THANK', 'THEFT', 'THEIR', 'THEME',\n  'THERE', 'THESE', 'THICK', 'THING', 'THINK', 'THIRD', 'THOSE', 'THREE', 'THREW', 'THROW',\n  'THUMB', 'TIGHT', 'TIMER', 'TIMES', 'TIRED', 'TITLE', 'TODAY', 'TOKEN', 'TOTAL', 'TOUCH',\n  'TOUGH', 'TOWER', 'TRACK', 'TRADE', 'TRAIN', 'TREAT', 'TREND', 'TRIAL', 'TRIBE', 'TRICK',\n  'TRIED', 'TRIES', 'TRULY', 'TRUNK', 'TRUST', 'TRUTH', 'TWICE', 'TWIST', 'UNCLE', 'UNDUE',\n  'UNION', 'UNITY', 'UNTIL', 'UPPER', 'UPSET', 'URBAN', 'USAGE', 'USUAL', 'VALID', 'VALUE',\n  'VIDEO', 'VIRUS', 'VISIT', 'VITAL', 'VOCAL', 'VOICE', 'WASTE', 'WATCH', 'WATER', 'WHEEL',\n  'WHERE', 'WHICH', 'WHILE', 'WHITE', 'WHOLE', 'WHOSE', 'WOMAN', 'WOMEN', 'WORLD', 'WORRY',\n  'WORSE', 'WORST', 'WORTH', 'WOULD', 'WRITE', 'WRONG', 'WROTE', 'YOUNG', 'YOURS', 'YOUTH',\n  \n  // Additional 500+ answer words\n  'ABBEY', 'ABODE', 'ABHOR', 'ABLED', 'ABODE', 'ABORT', 'ACHED', 'ACRES', 'ACTED', 'ADDED',\n  'ADDER', 'ADMIN', 'ADOBE', 'ADOPT', 'ADORE', 'ADULT', 'AGENT', 'AGING', 'AGLOW', 'AIMED',\n  'AISLE', 'ALDER', 'ALERT', 'ALIEN', 'ALIGN', 'ALIKE', 'ALIVE', 'ALLOW', 'ALLOY', 'ALONE',\n  'ALONG', 'ALOOF', 'ALTAR', 'ALTER', 'AMBER', 'AMEND', 'AMPLE', 'ANGEL', 'ANGER', 'ANGLE',\n  'ANGRY', 'ANKLE', 'ANTIC', 'APHID', 'APPLE', 'APPLY', 'APRON', 'ARBOR', 'ARENA', 'ARGUE',\n  'ARISE', 'ARMED', 'ARMOR', 'AROMA', 'ARRAY', 'ARROW', 'ARTSY', 'ASCOT', 'ASHES', 'ASIDE',\n  'ASKED', 'ATLAS', 'ATTIC', 'AUDIO', 'AUDIT', 'AVOID', 'AWAKE', 'AWARD', 'AWARE', 'BADGE',\n  'BADLY', 'BAGEL', 'BAKER', 'BALLS', 'BANDS', 'BANJO', 'BANKS', 'BARGE', 'BARKS', 'BARON',\n  'BASED', 'BASIC', 'BASIN', 'BATCH', 'BATHE', 'BATHS', 'BAYOU', 'BEACH', 'BEADS', 'BEAM',\n  'BEARD', 'BEARS', 'BEAST', 'BEATS', 'BEGAN', 'BEGIN', 'BEING', 'BELLY', 'BELOW', 'BENCH',\n  'BERRY', 'BIKES', 'BILLS', 'BINDS', 'BIRCH', 'BIRDS', 'BIRTH', 'BISON', 'BITES', 'BLACK',\n  'BLADE', 'BLAME', 'BLAND', 'BLANK', 'BLAST', 'BLAZE', 'BLEAK', 'BLEND', 'BLESS', 'BLIMP',\n  'BLIND', 'BLINK', 'BLISS', 'BLITZ', 'BLOAT', 'BLOCK', 'BLOOD', 'BLOOM', 'BLOWN', 'BLOWS',\n  'BLUES', 'BLUFF', 'BLUNT', 'BLURT', 'BLUSH', 'BOARD', 'BOARS', 'BOATS', 'BOBBY', 'BOGUS',\n  'BOMBS', 'BONDS', 'BONES', 'BONUS', 'BOOKS', 'BOOMS', 'BOOST', 'BOOTH', 'BOOTS', 'BOOZE',\n  'BORED', 'BOTCH', 'BOUGH', 'BOUND', 'BOXES', 'BOXER', 'BRACE', 'BRAID', 'BRAIN', 'BRAKE',\n  'BRAND', 'BRASS', 'BRAVO', 'BREAD', 'BREAK', 'BREED', 'BREWS', 'BRICK', 'BRIDE', 'BRIEF',\n  'BRING', 'BRINK', 'BRISK', 'BROAD', 'BROIL', 'BROKE', 'BROOK', 'BROOM', 'BROWN', 'BRUNT',\n  'BRUSH', 'BRUTE', 'BUDDY', 'BUDGE', 'BULGE', 'BULKS', 'BULKY', 'BUMPS', 'BUMPY', 'BUNCH',\n  'BUNNY', 'BURNT', 'BURST', 'BUSES', 'BUYER', 'BUZZY', 'CABIN', 'CABLE', 'CACAO', 'CACHE',\n  'CADET', 'CAGED', 'CAKES', 'CALLS', 'CALVE', 'CAMEL', 'CAMPS', 'CANDY', 'CANES', 'CANNY',\n  'CANON', 'CARDS', 'CARED', 'CARGO', 'CARRY', 'CARVE', 'CASES', 'CATCH', 'CAULK', 'CAUSE',\n  'CAVES', 'CAVIL', 'CEDAR', 'CELLS', 'CHAFE', 'CHAIN', 'CHAIR', 'CHALK', 'CHAMP', 'CHAOS',\n  'CHARD', 'CHARM', 'CHART', 'CHASE', 'CHASM', 'CHEAP', 'CHEAT', 'CHECK', 'CHEEK', 'CHESS',\n  'CHEST', 'CHIDE', 'CHIEF', 'CHILD', 'CHILL', 'CHIMP', 'CHINA', 'CHIPS', 'CHIRP', 'CHIVE',\n  'CHOIR', 'CHORD', 'CHORE', 'CHOSE', 'CHUCK', 'CHUMP', 'CHUNK', 'CHURN', 'CHUTE', 'CIDER',\n  'CIGAR', 'CINCH', 'CITED', 'CIVIC', 'CIVIL', 'CLAIM', 'CLAMP', 'CLANG', 'CLASH', 'CLASS',\n  'CLEAN', 'CLEAR', 'CLERK', 'CLICK', 'CLIFF', 'CLIMB', 'CLING', 'CLOAK', 'CLOCK', 'CLOMP',\n  'CLONE', 'CLOSE', 'CLOTH', 'CLOUD', 'CLUBS', 'CLUCK', 'CLUED', 'CLUES', 'CLUMP', 'CLUNG',\n  'COACH', 'COALS', 'COAST', 'COATS', 'CODES', 'COINS', 'COLOR', 'COMES', 'COMET', 'COMIC',\n  'CONCH', 'CORAL', 'CORDS', 'CORES', 'CORPS', 'COSTS', 'COUCH', 'COUGH', 'COULD', 'COUNT',\n  'COURT', 'COVER', 'CRACK', 'CRAFT', 'CRANE', 'CRASH', 'CRAZY', 'CREAM', 'CREEK', 'CREEP',\n  'CRISP', 'CROPS', 'CROSS', 'CROWD', 'CROWN', 'CRUDE', 'CRUSH', 'CUBIC', 'CUMIN', 'CURLY',\n  'CURRY', 'CURVE', 'CYBER', 'CYCLE', 'DADDY', 'DAILY', 'DAIRY', 'DAISY', 'DANCE', 'DANDY',\n  'DARES', 'DATED', 'DEALS', 'DEALT', 'DEATH', 'DEBIT', 'DEBUT', 'DECKS', 'DELAY', 'DEMON',\n  'DENSE', 'DEPOT', 'DEPTH', 'DERBY', 'DESKS', 'DEVIL', 'DIARY', 'DICED', 'DIGIT', 'DIMES',\n  'DINER', 'DIRTY', 'DISCO', 'DITCH', 'DIVED', 'DIVER', 'DIZZY', 'DOCKS', 'DODGE', 'DOING',\n  'DOLLS', 'DOORS', 'DOSED', 'DOUBT', 'DOUGH', 'DOVES', 'DOWNS', 'DOZEN', 'DRAFT', 'DRAIN',\n  'DRAKE', 'DRAMA', 'DRANK', 'DRAWN', 'DREAM', 'DRESS', 'DRIED', 'DRIFT', 'DRILL', 'DRINK',\n  'DRIVE', 'DRONE', 'DROVE', 'DRUMS', 'DRUNK', 'DUCKS', 'DUNES', 'DUSTY', 'DUTCH', 'DWARF',\n  'DYING', 'EAGER', 'EAGLE', 'EARLY', 'EARTH', 'EATER', 'EDGES', 'EGYPT', 'EIGHT', 'ELDER',\n  'ELECT', 'ELFIN', 'ELITE', 'EMPTY', 'ENDED', 'ENEMY', 'ENJOY', 'ENTER', 'ENTRY', 'EQUAL',\n  'ERROR', 'EVENT', 'EVERY', 'EXACT', 'EXAMS', 'EXCEL', 'EXIST', 'EXITS', 'EXTRA', 'FABLE',\n  'FACED', 'FACTS', 'FADED', 'FAILS', 'FAINT', 'FAIRY', 'FAITH', 'FALLS', 'FALSE', 'FANCY',\n  'FARMS', 'FATAL', 'FAULT', 'FAVOR', 'FEAST', 'FEELS', 'FENCE', 'FERRY', 'FETCH', 'FEVER',\n  'FIBER', 'FIELD', 'FIFTY', 'FIGHT', 'FILES', 'FILLS', 'FILMS', 'FINAL', 'FINDS', 'FINES',\n  'FIRED', 'FIRMS', 'FIRST', 'FISHY', 'FIXED', 'FLAGS', 'FLAME', 'FLANK', 'FLASH', 'FLASK',\n  'FLATS', 'FLEET', 'FLESH', 'FLIES', 'FLING', 'FLIPS', 'FLOAT', 'FLOCK', 'FLOOD', 'FLOOR',\n  'FLOUR', 'FLOWS', 'FLUID', 'FLUSH', 'FOAMS', 'FOCUS', 'FOLKS', 'FONTS', 'FOODS', 'FORCE',\n  'FORMS', 'FORTH', 'FORTY', 'FORUM', 'FOUND', 'FOXES', 'FRAME', 'FRANK', 'FRAUD', 'FREAK',\n  'FREED', 'FRESH', 'FRIED', 'FRONT', 'FROST', 'FRUIT', 'FUDGE', 'FULLY', 'FUNDS', 'FUNNY',\n  'FUZZY', 'GALES', 'GAMES', 'GANGS', 'GATES', 'GEARS', 'GENES', 'GENUS', 'GHOST', 'GIANT',\n  'GIFTS', 'GIRLS', 'GIVEN', 'GIVES', 'GLASS', 'GLOBE', 'GLOVE', 'GOALS', 'GOATS', 'GODLY',\n  'GOING', 'GOODS', 'GRACE', 'GRADE', 'GRAIN', 'GRAND', 'GRANT', 'GRAPE', 'GRAPH', 'GRASP',\n  'GRASS', 'GRAVE', 'GREAT', 'GREED', 'GREEN', 'GREET', 'GRIDS', 'GRIEF', 'GRILL', 'GRIND',\n  'GRIPS', 'GROSS', 'GROUP', 'GROWN', 'GROWS', 'GUARD', 'GUESS', 'GUEST', 'GUIDE', 'GUILD',\n  'GUILT', 'HABIT', 'HALLS', 'HANDS', 'HANDY', 'HAPPY', 'HARSH', 'HASTE', 'HATED', 'HAVEN',\n  'HEADS', 'HEALS', 'HEARD', 'HEART', 'HEAVY', 'HEDGE', 'HEELS', 'HELPS', 'HENCE', 'HERBS',\n  'HERDS', 'HILLS', 'HINTS', 'HIRED', 'HOBBY', 'HOLDS', 'HOLES', 'HOLLY', 'HOMES', 'HONEY',\n  'HOOKS', 'HOPES', 'HORNS', 'HORSE', 'HOSTS', 'HOTEL', 'HOURS', 'HOUSE', 'HOVER', 'HUMAN',\n  'HUMOR', 'HURRY', 'HURTS', 'HYPER', 'ICONS', 'IDEAL', 'IDEAS', 'IDIOT', 'IMAGE', 'IMPLY',\n  'INDEX', 'INDIA', 'INNER', 'INPUT', 'INTEL', 'INTRO', 'IRISH', 'IRONS', 'ISSUE', 'ITEMS',\n  'JEANS', 'JELLY', 'JEWEL', 'JOINS', 'JOKES', 'JUDGE', 'JUICE', 'JUMBO', 'JUMPS', 'KEEPS',\n  'KICKS', 'KILLS', 'KINDS', 'KINGS', 'KNIFE', 'KNOCK', 'KNOTS', 'KNOWN', 'KNOWS', 'LABEL',\n  'LABOR', 'LACKS', 'LAKES', 'LAMPS', 'LANDS', 'LANES', 'LARGE', 'LASER', 'LASTS', 'LATER',\n  'LAUGH', 'LAYER', 'LEADS', 'LEAFS', 'LEARN', 'LEASE', 'LEAST', 'LEAVE', 'LEDGE', 'LEGAL',\n  'LEMON', 'LEVEL', 'LIFTS', 'LIGHT', 'LIKED', 'LIKES', 'LIMIT', 'LINES', 'LINKS', 'LIONS',\n  'LISTS', 'LIVED', 'LIVER', 'LIVES', 'LOADS', 'LOANS', 'LOBBY', 'LOCAL', 'LOCKS', 'LODGE',\n  'LOGIC', 'LOOKS', 'LOOPS', 'LOOSE', 'LORDS', 'LOVED', 'LOVER', 'LOVES', 'LOWER', 'LOYAL',\n  'LUCKY', 'LUNCH', 'LUNGS', 'LYING', 'MAGIC', 'MAJOR', 'MAKER', 'MAKES', 'MALES', 'MALLS',\n  'MANOR', 'MAPLE', 'MARCH', 'MARKS', 'MARSH', 'MASSA', 'MATCH', 'MATES', 'MAYBE', 'MAYOR',\n  'MEALS', 'MEANS', 'MEANT', 'MEATS', 'MEDAL', 'MEDIA', 'MEETS', 'MELON', 'MENUS', 'MERCY',\n  'MERGE', 'MERIT', 'MERRY', 'METAL', 'METER', 'METRO', 'MIDST', 'MIGHT', 'MILES', 'MINDS',\n  'MINES', 'MINOR', 'MINUS', 'MIXED', 'MIXER', 'MODEL', 'MODES', 'MONEY', 'MONKS', 'MONTH',\n  'MOODS', 'MORAL', 'MOTOR', 'MOULD', 'MOUND', 'MOUNT', 'MOUSE', 'MOUTH', 'MOVED', 'MOVER',\n  'MOVES', 'MOVIE', 'MUDDY', 'MUSIC', 'MYTHS', 'NAILS', 'NAMES', 'NASTY', 'NEEDS', 'NERVE',\n  'NESTS', 'NEVER', 'NEWLY', 'NIGHT', 'NINTH', 'NODES', 'NOISE', 'NORTH', 'NOSES', 'NOTED',\n  'NOTES', 'NOVEL', 'NURSE', 'OATHS', 'OCEAN', 'OFFER', 'OFTEN', 'OLDER', 'OLIVE', 'OPENS',\n  'OPERA', 'ORDER', 'ORGAN', 'OTHER', 'OUGHT', 'OUNCE', 'OUTER', 'OWNED', 'OWNER', 'PACED',\n  'PACKS', 'PAGES', 'PAINS', 'PAINT', 'PAIRS', 'PALMS', 'PANEL', 'PANIC', 'PANTS', 'PAPER',\n  'PARKS', 'PARTS', 'PARTY', 'PASTA', 'PASTE', 'PATCH', 'PATHS', 'PAUSE', 'PEACE', 'PEAKS',\n  'PEARS', 'PENNY', 'PHASE', 'PHONE', 'PHOTO', 'PIANO', 'PICKS', 'PIECE', 'PILES', 'PILLS',\n  'PILOT', 'PINCH', 'PIPES', 'PITCH', 'PIZZA', 'PLACE', 'PLAIN', 'PLANE', 'PLANT', 'PLATE',\n  'PLAYS', 'PLAZA', 'PLOTS', 'POEMS', 'POINT', 'POLAR', 'POLES', 'POOLS', 'PORTS', 'POSED',\n  'POSTS', 'POUND', 'POURS', 'POWER', 'PRESS', 'PRICE', 'PRIDE', 'PRIME', 'PRINT', 'PRIOR',\n  'PRIZE', 'PROOF', 'PROPS', 'PROUD', 'PROVE', 'PULLS', 'PUMPS', 'PUNCH', 'PUPIL', 'QUEEN',\n  'QUERY', 'QUEST', 'QUICK', 'QUIET', 'QUITE', 'QUOTE', 'RACES', 'RADIO', 'RAILS', 'RAINS',\n  'RAISE', 'RALLY', 'RANCH', 'RANGE', 'RANKS', 'RAPID', 'RATES', 'RATIO', 'REACH', 'READS',\n  'READY', 'REALM', 'REBEL', 'REFER', 'RELAX', 'RELAY', 'REMIX', 'RENEW', 'REPAY', 'REPLY',\n  'RESET', 'RIGHT', 'RIGID', 'RINGS', 'RISKS', 'RISKY', 'RIVAL', 'RIVER', 'ROADS', 'ROAST',\n  'ROBOT', 'ROCKS', 'ROCKY', 'ROLES', 'ROLLS', 'ROMAN', 'ROOMS', 'ROOTS', 'ROPES', 'ROSES',\n  'ROUGH', 'ROUND', 'ROUTE', 'ROYAL', 'RUGBY', 'RULES', 'RURAL', 'SAFER', 'SALES', 'SALON',\n  'SANDY', 'SAUCE', 'SAVED', 'SAVES', 'SCALE', 'SCARE', 'SCENE', 'SCOPE', 'SCORE', 'SCOTS',\n  'SCRUB', 'SEATS', 'SEEDS', 'SEEMS', 'SELLS', 'SENDS', 'SENSE', 'SERVE', 'SETUP', 'SEVEN',\n  'SHADE', 'SHAKE', 'SHALL', 'SHAME', 'SHAPE', 'SHARE', 'SHARK', 'SHARP', 'SHELF', 'SHELL',\n  'SHIFT', 'SHINE', 'SHIPS', 'SHIRT', 'SHOCK', 'SHOES', 'SHOOT', 'SHOPS', 'SHORT', 'SHOTS',\n  'SHOWN', 'SHOWS', 'SHUTS', 'SIDED', 'SIDES', 'SIGHT', 'SIGNS', 'SILLY', 'SINCE', 'SINGS',\n  'SINKS', 'SITES', 'SIXTH', 'SIXTY', 'SIZES', 'SKILL', 'SKINS', 'SKULL', 'SLEEP', 'SLIDE',\n  'SLIPS', 'SLOPE', 'SLOTS', 'SMALL', 'SMART', 'SMELL', 'SMILE', 'SMOKE', 'SNAKE', 'SNAPS',\n  'SNOWY', 'SOCKS', 'SOLAR', 'SOLID', 'SOLVE', 'SONGS', 'SORRY', 'SORTS', 'SOULS', 'SOUND',\n  'SOUTH', 'SPACE', 'SPARE', 'SPARK', 'SPEAK', 'SPECS', 'SPEED', 'SPELL', 'SPEND', 'SPENT',\n  'SPINE', 'SPLIT', 'SPOKE', 'SPORT', 'SPOTS', 'SPRAY', 'SQUAD', 'STAFF', 'STAGE', 'STAIN',\n  'STAKE', 'STAND', 'STARE', 'START', 'STATE', 'STAYS', 'STEAD', 'STEAL', 'STEAM', 'STEEL',\n  'STEEP', 'STEER', 'STEMS', 'STEPS', 'STERN', 'STICK', 'STILL', 'STING', 'STINK', 'STOCK',\n  'STONE', 'STOOD', 'STOPS', 'STORE', 'STORM', 'STORY', 'STRIP', 'STUCK', 'STUDY', 'STUFF',\n  'STYLE', 'SUGAR', 'SUITE', 'SUITS', 'SUNNY', 'SUPER', 'SWEET', 'SWEPT', 'SWIFT', 'SWING',\n  'SWISS', 'SWORD', 'TABLE', 'TAKES', 'TALES', 'TALKS', 'TANKS', 'TAPES', 'TASKS', 'TASTE',\n  'TAXES', 'TEACH', 'TEAMS', 'TEARS', 'TEETH', 'TELLS', 'TENDS', 'TERMS', 'TESTS', 'TEXAS',\n  'THANK', 'THEFT', 'THEIR', 'THEME', 'THERE', 'THESE', 'THICK', 'THING', 'THINK', 'THIRD',\n  'THOSE', 'THREE', 'THREW', 'THROW', 'THUMB', 'TIDAL', 'TIGER', 'TIGHT', 'TILES', 'TIMER',\n  'TIMES', 'TIRED', 'TITLE', 'TODAY', 'TOKEN', 'TOMBS', 'TOOLS', 'TOOTH', 'TOTAL', 'TOUCH',\n  'TOUGH', 'TOURS', 'TOWER', 'TOWNS', 'TRACK', 'TRADE', 'TRAIL', 'TRAIN', 'TRASH', 'TREAT',\n  'TREES', 'TREND', 'TRIAL', 'TRIBE', 'TRICK', 'TRIED', 'TRIES', 'TRIPS', 'TRUCK', 'TRULY',\n  'TRUNK', 'TRUST', 'TRUTH', 'TUBES', 'TUNES', 'TURNS', 'TWICE', 'TWINS', 'TWIST', 'TYPED',\n  'TYPES', 'UNCLE', 'UNDER', 'UNDUE', 'UNION', 'UNITE', 'UNITY', 'UNTIL', 'UPPER', 'UPSET',\n  'URBAN', 'URGED', 'USAGE', 'USERS', 'USING', 'USUAL', 'VALID', 'VALUE', 'VALVE', 'VENUE',\n  'VIDEO', 'VIEWS', 'VINYL', 'VIRUS', 'VISIT', 'VITAL', 'VOCAL', 'VOICE', 'WAGES', 'WAIST',\n  'WAITS', 'WALKS', 'WALLS', 'WANTS', 'WARDS', 'WARMS', 'WARNS', 'WASTE', 'WATCH', 'WATER',\n  'WAVES', 'WEARY', 'WEEDS', 'WEEKS', 'WELLS', 'WHEEL', 'WHERE', 'WHICH', 'WHILE', 'WHIPS',\n  'WHITE', 'WHOLE', 'WHOSE', 'WIDER', 'WILDS', 'WINDS', 'WINES', 'WINGS', 'WINKS', 'WIPES',\n  'WIRED', 'WIRES', 'WITCH', 'WOMAN', 'WOMEN', 'WOODS', 'WORDS', 'WORKS', 'WORLD', 'WORRY',\n  'WORSE', 'WORST', 'WORTH', 'WOULD', 'WOVEN', 'WRAPS', 'WRITE', 'WRONG', 'WROTE', 'YARDS',\n  'YEARS', 'YIELD', 'YOUNG', 'YOURS', 'YOUTH', 'ZONES',\n  \n  // Additional 2000+ answer words for massive coverage\n  'CABAL', 'CABBY', 'CABER', 'CABIN', 'CABLE', 'CABOB', 'CACAO', 'CACHE', 'CACTI', 'CADDY',\n  'CADET', 'CADGE', 'CADIS', 'CADRE', 'CAFES', 'CAGED', 'CAGER', 'CAGES', 'CAGEY', 'CAIRN',\n  'CAKED', 'CAKES', 'CAKEY', 'CALFS', 'CALIF', 'CALIX', 'CAULK', 'CALLS', 'CALMS', 'CALYX',\n  'CAMEL', 'CAMEO', 'CAMES', 'CAMIS', 'CAMPS', 'CAMPY', 'CANAL', 'CANDY', 'CANED', 'CANER',\n  'CANES', 'CANID', 'CANNA', 'CANNY', 'CANOE', 'CANON', 'CANSO', 'CANST', 'CANTS', 'CAPED',\n  'CAPER', 'CAPES', 'CAPHS', 'CAPON', 'CAPOS', 'CARBO', 'CARBS', 'CARDS', 'CARED', 'CARER',\n  'CARES', 'CARGO', 'CARKS', 'CARLE', 'CARLS', 'CARNS', 'CAROB', 'CAROL', 'CAROM', 'CARPS',\n  'CARRS', 'CARRY', 'CARSE', 'CARTE', 'CARTS', 'CARVE', 'CASAS', 'CASED', 'CASES', 'CASKS',\n  'CASKY', 'CASTE', 'CASTS', 'CATCH', 'CATER', 'CATES', 'CATTY', 'CAUKS', 'CAULS', 'CAUSE',\n  'CAVED', 'CAVER', 'CAVES', 'CAVIE', 'CAVIL', 'CAWED', 'CEASE', 'CECAL', 'CEDAR', 'CEDED',\n  'CEDER', 'CEDES', 'CEDIS', 'CEIBA', 'CEILS', 'CELEB', 'CELLO', 'CELLS', 'CELTS', 'CENTS',\n  'CENTU', 'CERIA', 'CERIC', 'CEROS', 'CESTA', 'CESTI', 'CHADS', 'CHAFE', 'CHAFF', 'CHAIN',\n  'CHAIR', 'CHAIS', 'CHALK', 'CHAMP', 'CHAMS', 'CHANG', 'CHANT', 'CHAOS', 'CHAPE', 'CHAPS',\n  'CHARD', 'CHARE', 'CHARK', 'CHARM', 'CHARR', 'CHARS', 'CHART', 'CHARY', 'CHASE', 'CHASM',\n  'CHATS', 'CHAVE', 'CHAWK', 'CHAWS', 'CHAYS', 'CHEAP', 'CHEAT', 'CHECK', 'CHEEK', 'CHEEP',\n  'CHEER', 'CHEFS', 'CHELA', 'CHEMO', 'CHERT', 'CHESS', 'CHEST', 'CHETH', 'CHEVY', 'CHEWS',\n  'CHEWY', 'CHIAO', 'CHIAS', 'CHICK', 'CHICO', 'CHICS', 'CHIDE', 'CHIEF', 'CHIEL', 'CHILD',\n  'CHILE', 'CHILI', 'CHILL', 'CHIMB', 'CHIME', 'CHIMP', 'CHINA', 'CHINE', 'CHING', 'CHINK',\n  'CHINO', 'CHINS', 'CHIPS', 'CHIRK', 'CHIRM', 'CHIRP', 'CHIRR', 'CHITS', 'CHIVE', 'CHIVS',\n  'CHIVY', 'CHIZZ', 'CHOCK', 'CHOCO', 'CHOCS', 'CHODE', 'CHOGS', 'CHOIR', 'CHOKE', 'CHOKY',\n  'CHOLA', 'CHOLO', 'CHOMP', 'CHONS', 'CHOOF', 'CHOOK', 'CHOOM', 'CHOON', 'CHOPS', 'CHORD',\n  'CHORE', 'CHOSE', 'CHOTA', 'CHOTT', 'CHOUT', 'CHOUX', 'CHOW', 'CHOWS', 'CHUBS', 'CHUCK',\n  'CHUFA', 'CHUFF', 'CHUGS', 'CHUMP', 'CHUMS', 'CHUNK', 'CHURL', 'CHURN', 'CHURR', 'CHUSE',\n  'CHUTE', 'CHUTS', 'CHYLE', 'CHYME', 'CIBOL', 'CIDER', 'CIGAR', 'CIGGY', 'CILIA', 'CILLS',\n  'CIMAR', 'CIMEX', 'CINCH', 'CINCT', 'CINDER', 'CINES', 'CINQS', 'CION', 'CIONS', 'CIRCA',\n  'CIRCS', 'CIRES', 'CIRLS', 'CIRRI', 'CISCO', 'CISSY', 'CISTS', 'CITED', 'CITER', 'CITES',\n  'CIVET', 'CIVIC', 'CIVIE', 'CIVIL', 'CIVVY', 'CLACH', 'CLACK', 'CLADE', 'CLADS', 'CLAES',\n  'CLAGS', 'CLAIM', 'CLAM', 'CLAMS', 'CLANG', 'CLANK', 'CLANS', 'CLAPS', 'CLARO', 'CLART',\n  'CLARY', 'CLASH', 'CLASP', 'CLASS', 'CLAST', 'CLATS', 'CLAUT', 'CLAVE', 'CLAVI', 'CLAWS',\n  'CLAYS', 'CLEAN', 'CLEAR', 'CLEAT', 'CLECK', 'CLEEK', 'CLEEP', 'CLEFS', 'CLEFT', 'CLEGS',\n  'CLEIK', 'CLEMS', 'CLEPE', 'CLEPT', 'CLERK', 'CLEVE', 'CLEWS', 'CLICK', 'CLIED', 'CLIES',\n  'CLIFF', 'CLIFT', 'CLIMB', 'CLIME', 'CLINE', 'CLING', 'CLINK', 'CLINT', 'CLIPE', 'CLIPS',\n  'CLIPT', 'CLIQUE', 'CLITS', 'CLOAK', 'CLOAM', 'CLOCK', 'CLODS', 'CLOGS', 'CLOMB', 'CLOMP',\n  'CLONE', 'CLONK', 'CLONS', 'CLOOP', 'CLOOT', 'CLOPS', 'CLOSE', 'CLOTE', 'CLOTH', 'CLOTS',\n  'CLOUD', 'CLOUR', 'CLOUS', 'CLOUT', 'CLOVE', 'CLOWN', 'CLOYS', 'CLOZE', 'CLUBS', 'CLUCK',\n  'CLUED', 'CLUES', 'CLUEY', 'CLUMP', 'CLUNG', 'CLUNK', 'CLUPE', 'CNIDA', 'COACH', 'COACT',\n  'COADY', 'COALS', 'COALY', 'COAPT', 'COAST', 'COATE', 'COATI', 'COATS', 'COBBS', 'COBBY',\n  'COBIA', 'COBLE', 'COBRA', 'COBZA', 'COCAS', 'COCCI', 'COCCO', 'COCKS', 'COCKY', 'COCOA',\n  'COCOS', 'CODAS', 'CODEC', 'CODED', 'CODER', 'CODES', 'CODEX', 'CODON', 'COEDS', 'COFFS',\n  'COGON', 'COHAB', 'COHEN', 'COHOE', 'COHOG', 'COHOS', 'COIGN', 'COILS', 'COINS', 'COIRS',\n  'COITS', 'COKED', 'COKES', 'COLAS', 'COLBY', 'COLDS', 'COLED', 'COLES', 'COLIC', 'COLIN',\n  'COLLS', 'COLLY', 'COLOG', 'COLON', 'COLOR', 'COLTS', 'COLZA', 'COMAE', 'COMAL', 'COMAS',\n  'COMBE', 'COMBI', 'COMBO', 'COMBS', 'COMBY', 'COMER', 'COMES', 'COMET', 'COMFY', 'COMIC',\n  'COMIX', 'COMMA', 'COMMO', 'COMMS', 'COMMY', 'COMPO', 'COMPS', 'COMPT', 'COMTE', 'CONCH',\n  'CONDO', 'CONED', 'CONES', 'CONEY', 'CONGA', 'CONGE', 'CONGO', 'CONIC', 'CONIN', 'CONKS',\n  'CONKY', 'CONNS', 'CONTE', 'CONTO', 'CONUS', 'COOCH', 'COOED', 'COOEE', 'COOER', 'COOFS',\n  'COOKS', 'COOKY', 'COOLS', 'COOLY', 'COOMB', 'COOMS', 'COONS', 'COOPS', 'COOPT', 'COOST',\n  'COOTS', 'COOZE', 'COPAL', 'COPAY', 'COPED', 'COPEN', 'COPER', 'COPES', 'COPHS', 'COPIA',\n  'COPRA', 'COPSE', 'COPSY', 'CORAL', 'CORBE', 'CORBY', 'CORDS', 'CORED', 'CORER', 'CORES',\n  'CORGI', 'CORIA', 'CORKS', 'CORKY', 'CORMS', 'CORNS', 'CORNU', 'CORNY', 'CORPS', 'CORSE',\n  'CORSO', 'COSEC', 'COSES', 'COSET', 'COSEY', 'COSIE', 'COSTA', 'COSTS', 'COTAN', 'COTED',\n  'COTES', 'COTHS', 'COTTA', 'COTTS', 'COUCH', 'COUDE', 'COUGH', 'COULD', 'COUNT', 'COUPE',\n  'COUPS', 'COURB', 'COURD', 'COURE', 'COURS', 'COURT', 'COUTA', 'COUTH', 'COVED', 'COVEN',\n  'COVER', 'COVES', 'COVET', 'COVEY', 'COVIN', 'COWAN', 'COWED', 'COWER', 'COWKS', 'COWLS',\n  'COWPS', 'COWRY', 'COXAE', 'COXAL', 'COXED', 'COXES', 'COYDOG', 'COYED', 'COYER', 'COYLY',\n  'COYPU', 'COZEN', 'COZES', 'COZEY', 'COZIE', 'CRAAL', 'CRABS', 'CRACK', 'CRAFT', 'CRAGS',\n  'CRAIC', 'CRAIG', 'CRAKE', 'CRAME', 'CRAMP', 'CRAMS', 'CRANE', 'CRANK', 'CRANS', 'CRAPE',\n  'CRAPS', 'CRAPY', 'CRARE', 'CRASH', 'CRASS', 'CRATE', 'CRAVE', 'CRAWL', 'CRAWS', 'CRAZE',\n  'CRAZY', 'CREAK', 'CREAM', 'CREAT', 'CREDO', 'CREDS', 'CREED', 'CREEK', 'CREEL', 'CREEP',\n  'CREES', 'CREME', 'CREMS', 'CRENA', 'CREPE', 'CREPS', 'CREPY', 'CRESS', 'CREST', 'CREUX',\n  'CREWS', 'CRIBS', 'CRICK', 'CRIED', 'CRIER', 'CRIES', 'CRIME', 'CRIMP', 'CRIMS', 'CRINE',\n  'CRIOS', 'CRIPE', 'CRISP', 'CRITS', 'CROAK', 'CROCI', 'CROCK', 'CROCS', 'CROFT', 'CROGS',\n  'CROMB', 'CROME', 'CRONE', 'CRONK', 'CRONS', 'CRONY', 'CROOK', 'CROOL', 'CROON', 'CROPS',\n  'CRORE', 'CROSS', 'CROST', 'CROUP', 'CROUT', 'CROWD', 'CROWN', 'CROWS', 'CROZE', 'CRUCK',\n  'CRUDE', 'CRUDS', 'CRUDY', 'CRUEL', 'CRUES', 'CRUET', 'CRUFT', 'CRUMB', 'CRUMS', 'CRUNK',\n  'CRURA', 'CRUSE', 'CRUSH', 'CRUST', 'CRUSY', 'CRUTS', 'CRWTH', 'CRYPT', 'CTENE', 'CUBED',\n  'CUBER', 'CUBES', 'CUBIC', 'CUBIT', 'CUDDY', 'CUFFS', 'CUING', 'CUISH', 'CUITS', 'CUKES',\n  'CULCH', 'CULET', 'CULEX', 'CULLS', 'CULLY', 'CULMS', 'CULPA', 'CULTI', 'CULTS', 'CUMIN',\n  'CUNEI', 'CUNTS', 'CUPEL', 'CUPID', 'CUPPA', 'CURBS', 'CURCH', 'CURDS', 'CURDY', 'CURED',\n  'CURER', 'CURES', 'CURET', 'CURFS', 'CURIA', 'CURIO', 'CURLI', 'CURLS', 'CURLY', 'CURNS',\n  'CURNY', 'CURRS', 'CURRY', 'CURSE', 'CURSI', 'CURST', 'CURVE', 'CURVY', 'CUSEC', 'CUSHY',\n  'CUSKS', 'CUSPS', 'CUSSY', 'CUSUM', 'CUTCH', 'CUTER', 'CUTES', 'CUTEY', 'CUTIN', 'CUTIS',\n  'CUTTY', 'CUTUP', 'CUVEE', 'CWTCH', 'CYANO', 'CYANS', 'CYBER', 'CYCAD', 'CYCAS', 'CYCLE',\n  'CYCLO', 'CYDER', 'CYMAS', 'CYMES', 'CYMOL', 'CYNIC', 'CYSTS', 'CYTON', 'CZARS', 'CZECH',\n  'DABED', 'DACES', 'DACHA', 'DACKS', 'DADAH', 'DADAS', 'DADDY', 'DADOS', 'DAFFS', 'DAFFY',\n  'DAGGA', 'DAGGY', 'DAGOS', 'DAHLS', 'DAILY', 'DAINE', 'DAINT', 'DAIRY', 'DAISY', 'DAKER',\n  'DALES', 'DALIS', 'DALLE', 'DALTS', 'DAMAN', 'DAMAR', 'DAMES', 'DAMNS', 'DAMPS', 'DANCE',\n  'DANDY', 'DANGS', 'DANIO', 'DANKS', 'DANNY', 'DANTE', 'DANTS', 'DARAF', 'DARBS', 'DARCY',\n  'DARED', 'DARER', 'DARES', 'DARGA', 'DARIS', 'DARKS', 'DARKY', 'DARNS', 'DARRE', 'DARTS',\n  'DASHI', 'DASHY', 'DATAL', 'DATED', 'DATER', 'DATES', 'DATOS', 'DATTO', 'DATUM', 'DAUBE',\n  'DAUBS', 'DAUBY', 'DAUDS', 'DAULT', 'DAUNT', 'DAURS', 'DAUTS', 'DAVEN', 'DAVIT', 'DAWAH',\n  'DAWED', 'DAWEN', 'DAWKS', 'DAWNS', 'DAWTS', 'DAYED', 'DAYNT', 'DAZER', 'DAZES', 'DEADS',\n  'DEAER', 'DEAFS', 'DEALS', 'DEALT', 'DEANS', 'DEARE', 'DEARN', 'DEARS', 'DEARY', 'DEASH',\n  'DEATH', 'DEAVE', 'DEAWS', 'DEAWY', 'DEBAG', 'DEBAR', 'DEBBY', 'DEBIT', 'DEBTS', 'DEBUG',\n  'DEBUT', 'DECAF', 'DECAL', 'DECAY', 'DECKO', 'DECKS', 'DECOR', 'DECOS', 'DECOY', 'DECRY',\n  'DEDAL', 'DEEDS', 'DEEDY', 'DEELY', 'DEEMS', 'DEENS', 'DEEPS', 'DEERE', 'DEERS', 'DEETS',\n  'DEEVE', 'DEEVS', 'DEFAT', 'DEFER', 'DEFFO', 'DEFIS', 'DEFOG', 'DEGAS', 'DEGUM', 'DEGUS',\n  'DEICE', 'DEIDS', 'DEIFY', 'DEIGN', 'DEILS', 'DEINK', 'DEISM', 'DEIST', 'DEITY', 'DEJAY',\n  'DEKED', 'DEKES', 'DEKKO', 'DELAY', 'DELED', 'DELES', 'DELFS', 'DELFT', 'DELIS', 'DELLS',\n  'DELLY', 'DELOS', 'DELPH', 'DELTA', 'DELTS', 'DELVE', 'DEMAN', 'DEMES', 'DEMIC', 'DEMIT',\n  'DEMOB', 'DEMON', 'DEMOS', 'DEMUR', 'DENAR', 'DENES', 'DENET', 'DENGS', 'DENIM', 'DENSE',\n  'DENTS', 'DEOXY', 'DEPOT', 'DEPTH', 'DERAT', 'DERBY', 'DERDS', 'DERED', 'DERES', 'DERKS',\n  'DERMA', 'DERMS', 'DERNS', 'DERNY', 'DEROS', 'DERRO', 'DERRY', 'DERTH', 'DESAS', 'DESCH',\n  'DESEX', 'DESHI', 'DESIS', 'DESKS', 'DESSE', 'DETER', 'DETOX', 'DEUCE', 'DEVAS', 'DEVEL',\n  'DEVIL', 'DEVIS', 'DEVON', 'DEVOT', 'DEVOW', 'DEWAR', 'DEWAX', 'DEWED', 'DEXES', 'DEXIE',\n  'DEXY', 'DHABA', 'DHAKS', 'DHALS', 'DHIKR', 'DHOBI', 'DHOBIS', 'DHOL', 'DHOLL', 'DHOTI',\n  'DHOWS', 'DHUTI', 'DIABL', 'DIALS', 'DIANA', 'DIARY', 'DIAZO', 'DIBBS', 'DICED', 'DICER',\n  'DICES', 'DICEY', 'DICHT', 'DICKS', 'DICKY', 'DICOT', 'DICTA', 'DICTS', 'DICTY', 'DIDDY',\n  'DIDOS', 'DIDST', 'DIEBS', 'DIEGO', 'DIEHL', 'DIELS', 'DIENE', 'DIETS', 'DIFFS', 'DIGIT',\n  'DIKED', 'DIKER', 'DIKES', 'DIKEY', 'DILDO', 'DILLS', 'DILLY', 'DIMER', 'DIMES', 'DIMLY',\n  'DIMPS', 'DINAR', 'DINED', 'DINER', 'DINES', 'DINGE', 'DINGO', 'DINGS', 'DINGY', 'DINIC',\n  'DINKS', 'DINKY', 'DINNA', 'DINOS', 'DINTS', 'DIODE', 'DIOLS', 'DIOON', 'DIPOD', 'DIPPY',\n  'DIPSO', 'DIRAM', 'DIRER', 'DIRGE', 'DIRKS', 'DIRLS', 'DIRTS', 'DIRTY', 'DISAS', 'DISCI',\n  'DISCO', 'DISCS', 'DISHY', 'DISKS', 'DISME', 'DITAS', 'DITCH', 'DITES', 'DITSY', 'DITTO',\n  'DITTY', 'DITZY', 'DIVAN', 'DIVAS', 'DIVED', 'DIVER', 'DIVES', 'DIVEY', 'DIVOT', 'DIVVY',\n  'DIWAN', 'DIZEN', 'DIZZY', 'DJINN', 'DJINS', 'DOABS', 'DOATS', 'DOBBY', 'DOBIE', 'DOBLA',\n  'DOBRA', 'DOBRO', 'DOCHT', 'DOCKS', 'DOCOS', 'DOCUS', 'DODDY', 'DODGE', 'DODGY', 'DODOS',\n  'DOERS', 'DOEST', 'DOETH', 'DOFFS', 'DOGIE', 'DOGMA', 'DOHYO', 'DOIGT', 'DOILY', 'DOING',\n  'DOITS', 'DOJOS', 'DOLBY', 'DOLCE', 'DOLED', 'DOLES', 'DOLLS', 'DOLLY', 'DOLMA', 'DOLOR',\n  'DOLTS', 'DOMAL', 'DOMED', 'DOMES', 'DOMIC', 'DOMUS', 'DONAH', 'DONAS', 'DONEE', 'DONER',\n  'DONGS', 'DONKO', 'DONNA', 'DONNE', 'DONNY', 'DONOR', 'DONSY', 'DONUT', 'DOOBS', 'DOOCE',\n  'DOODY', 'DOOFS', 'DOOFY', 'DOOLE', 'DOOLS', 'DOOLY', 'DOOMS', 'DOOMY', 'DOORS', 'DOOZY',\n  'DOPAS', 'DOPED', 'DOPER', 'DOPES', 'DOPEY', 'DORAD', 'DORBA', 'DORBS', 'DOREE', 'DORES',\n  'DORIC', 'DORJE', 'DORKS', 'DORKY', 'DORMS', 'DORMY', 'DORPS', 'DORRS', 'DORSA', 'DORSE',\n  'DORTS', 'DORTY', 'DOSED', 'DOSEH', 'DOSER', 'DOSES', 'DOTAL', 'DOTED', 'DOTER', 'DOTES',\n  'DOTTY', 'DOUAR', 'DOUBT', 'DOUCE', 'DOUCK', 'DOUGH', 'DOUKS', 'DOULA', 'DOUMA', 'DOUMS',\n  'DOUPS', 'DOURA', 'DOUSE', 'DOUTS', 'DOVED', 'DOVEN', 'DOVER', 'DOVES', 'DOWAI', 'DOWAR',\n  'DOWDS', 'DOWDY', 'DOWED', 'DOWEL', 'DOWER', 'DOWIE', 'DOWLS', 'DOWLY', 'DOWNA', 'DOWNS',\n  'DOWNY', 'DOWPS', 'DOWRY', 'DOWSE', 'DOWTS', 'DOYDS', 'DOYEN', 'DOYLY', 'DOZED', 'DOZEN',\n  'DOZER', 'DOZES', 'DRABS', 'DRACK', 'DRACO', 'DRAFF', 'DRAFT', 'DRAGS', 'DRAIL', 'DRAIN',\n  'DRAKE', 'DRAMA', 'DRAMS', 'DRANK', 'DRANT', 'DRAPE', 'DRAPS', 'DRATS', 'DRAVE', 'DRAWL',\n  'DRAWN', 'DRAWS', 'DRAYS', 'DREAD', 'DREAM', 'DREAR', 'DRECK', 'DREDD', 'DREES', 'DREGS',\n  'DREKS', 'DRENT', 'DRERE', 'DRESS', 'DREST', 'DREYS', 'DRIBS', 'DRICE', 'DRIED', 'DRIER',\n  'DRIES', 'DRIFT', 'DRILL', 'DRILY', 'DRIMS', 'DRINK', 'DRIPS', 'DRIPT', 'DRIVE', 'DROIT',\n  'DROKE', 'DROLE', 'DROLL', 'DROME', 'DRONE', 'DRONG', 'DRONK', 'DRONY', 'DROOK', 'DROOL',\n  'DROOP', 'DROPS', 'DROPT', 'DROSS', 'DROST', 'DROVE', 'DROWN', 'DROWS', 'DRUBS', 'DRUGS',\n  'DRUID', 'DRUMS', 'DRUNK', 'DRUPE', 'DRURY', 'DRUSE', 'DRUSY', 'DRUXY', 'DRYAD', 'DRYAS',\n  'DRYER', 'DRYLY', 'DRYS', 'DSOMO', 'DUADS', 'DUALS', 'DUAMS', 'DUANS', 'DUARS', 'DUBBO',\n  'DUCAL', 'DUCAT', 'DUCKS', 'DUCKY', 'DUCTS', 'DUDDY', 'DUDED', 'DUDES', 'DUDS', 'DUELS',\n  'DUETS', 'DUFFS', 'DUFUS', 'DUITS', 'DUKAS', 'DUKED', 'DUKES', 'DUKKA', 'DULCE', 'DULES',\n  'DULIA', 'DULLS', 'DULLY', 'DULSE', 'DUMAS', 'DUMBO', 'DUMBS', 'DUMKA', 'DUMKY', 'DUMMY',\n  'DUMPS', 'DUMPY', 'DUNAM', 'DUNCE', 'DUNCH', 'DUNES', 'DUNGS', 'DUNGY', 'DUNKS', 'DUNNO',\n  'DUNNY', 'DUNSH', 'DUNTS', 'DUOMI', 'DUOMO', 'DUPED', 'DUPER', 'DUPES', 'DUPLE', 'DUPLY',\n  'DUPPY', 'DURAL', 'DURAS', 'DURED', 'DURES', 'DURGA', 'DURNS', 'DUROC', 'DUROS', 'DURRA',\n  'DURRS', 'DURRY', 'DURST', 'DURUM', 'DURZI', 'DUSKS', 'DUSKY', 'DUSTS', 'DUSTY', 'DUTCH',\n  'DUVET', 'DUXES', 'DWAAL', 'DWALE', 'DWALM', 'DWAMS', 'DWANG', 'DWARF', 'DWAUM', 'DWEEB',\n  'DWELL', 'DWELT', 'DYADS', 'DYERS', 'DYING', 'DYKED', 'DYKES', 'DYKEY', 'DYKON', 'DYNEL',\n  'DYNES', 'DZHOS', 'EAGER', 'EAGLE', 'EAGRE', 'EALED', 'EALES', 'EANED', 'EARDS', 'EARED',\n  'EARLS', 'EARLY', 'EARNS', 'EARST', 'EARTH', 'EASED', 'EASEL', 'EASER', 'EASES', 'EASLE',\n  'EASTS', 'EATEN', 'EATER', 'EATHE', 'EATHS', 'EAVES', 'EBBED', 'EBBET', 'EBONS', 'EBONY',\n  'EBOOK', 'ECADS', 'ECHED', 'ECHES', 'ECHOS', 'ECOD', 'ECOHY', 'ECRUS', 'EDEMA', 'EDGED',\n  'EDGER', 'EDGES', 'EDGEY', 'EDICT', 'EDIFY', 'EDILE', 'EDITS', 'EDUCE', 'EDUCT', 'EEJIT',\n  'EELED', 'EEVEN', 'EEVER', 'EFFED', 'EGADS', 'EGERS', 'EGGED', 'EGGER', 'EGMAS', 'EHING',\n  'EIDER', 'EIDOS', 'EIGNE', 'EIGHT', 'EIKON', 'EILDS', 'EISEL', 'EJIDO', 'EKING', 'EKPHRASIS',\n  'ELANS', 'ELAND', 'ELANS', 'ELATE', 'ELBOW', 'ELDER', 'ELECT', 'ELEGY', 'ELEMI', 'ELFED',\n  'ELFIN', 'ELIAD', 'ELIDE', 'ELINT', 'ELITE', 'ELLES', 'ELLUL', 'ELMEN', 'ELMOS', 'ELMS',\n  'ELOGE', 'ELOGY', 'ELOIN', 'ELOPE', 'ELOPS', 'ELUTE', 'ELVAN', 'ELVER', 'ELVES', 'EMACS',\n  'EMAIL', 'EMBAY', 'EMBED', 'EMBER', 'EMBOG', 'EMBOW', 'EMBOX', 'EMBRY', 'EMBUS', 'EMCEE',\n  'EMEER', 'EMEND', 'EMERY', 'EMEUS', 'EMICS', 'EMIRS', 'EMITS', 'EMMAS', 'EMMER', 'EMMET',\n  'EMMYS', 'EMOJI', 'EMONG', 'EMOTE', 'EMOVE', 'EMPTS', 'EMPTY', 'EMULE', 'EMULS', 'EMURE',\n  'EMYDE', 'ENACT', 'ENARM', 'ENATE', 'ENDED', 'ENDER', 'ENDEW', 'ENDOW', 'ENDUE', 'ENEMA',\n  'ENEMY', 'ENJOY', 'ENNOG', 'ENNUI', 'ENOKI', 'ENOLS', 'ENORM', 'ENOW', 'ENROL', 'ENSUE',\n  'ENTER', 'ENTIA', 'ENTRY', 'ENURE', 'ENVOY', 'ENZYM', 'EORLS', 'EOSIN', 'EPACT', 'EPALS',\n  'EPARCH', 'EPEES', 'EPHAS', 'EPHOD', 'EPHOR', 'EPICS', 'EPOCH', 'EPODE', 'EPROM', 'EPSOS',\n  'EQUAL', 'EQUID', 'EQUIP', 'ERASE', 'ERBIA', 'ERECT', 'ERGON', 'ERGOS', 'ERGOT', 'ERHUS',\n  'ERICA', 'ERICK', 'ERIKS', 'ERING', 'ERNED', 'ERNES', 'ERODE', 'EROSE', 'ERROR', 'ERSES',\n  'ERUCT', 'ERUGO', 'ERUPT', 'ERVEN', 'ERVIL', 'ESCAR', 'ESCOT', 'ESILE', 'ESKAR', 'ESKER',\n  'ESNES', 'ESSAY', 'ESSED', 'ESSES', 'ESTOC', 'ESTOP', 'ESTRO', 'ETAGE', 'ETAIN', 'ETAPE',\n  'ETATS', 'ETENS', 'ETHAL', 'ETHER', 'ETHIC', 'ETHNE', 'ETHOS', 'ETHYL', 'ETICS', 'ETNAS',\n  'ETTIN', 'ETTLE', 'ETUDE', 'ETUIS', 'ETWEE', 'ETYMA', 'EUCRE', 'EUDAIMONISM', 'EUKED', 'EUPAD',\n  'EUROS', 'EURUS', 'EUSOL', 'EVADE', 'EVENS', 'EVENT', 'EVERY', 'EVETS', 'EVHOE', 'EVICT',\n  'EVILS', 'EVITE', 'EVNED', 'EVOKE', 'EWERS', 'EWEST', 'EWHOW', 'EXACT', 'EXALT', 'EXAMS',\n  'EXARCH', 'EXART', 'EXEAT', 'EXECS', 'EXEDE', 'EXEME', 'EXERT', 'EXFOL', 'EXILE', 'EXINE',\n  'EXING', 'EXIST', 'EXITS', 'EXODE', 'EXOME', 'EXONS', 'EXPAT', 'EXPEL', 'EXPOS', 'EXTOL',\n  'EXTRA', 'EXUDE', 'EXULS', 'EXULT', 'EXURB', 'EYASS', 'EYED', 'EYERS', 'EYING', 'EYOTS',\n  'EYRAS', 'EYRES', 'EZINES'\n];\n\n// Comprehensive valid guess words (10000+ words including all answer words)\nexport const VALID_GUESS_WORDS = [\n  // All answer words are also valid guesses\n  ...ANSWER_WORDS,\n  \n  // Additional valid 5-letter words for guesses\n  'ABBEY', 'ABODE', 'ABORT', 'ACHED', 'ACRES', 'ACTED', 'ADDED', 'AFIRE', 'AFOOT', 'AGING',\n  'AGLOW', 'AIMED', 'AISLE', 'AMBER', 'AMEND', 'AMPLE', 'ANKLE', 'ANTIC', 'APHID', 'APRON',\n  'ARBOR', 'ARMOR', 'AROMA', 'ARROW', 'ASCOT', 'ASHES', 'ATLAS', 'ATTIC', 'AUDIO', 'AUDIT',\n  'AWASH', 'BADGE', 'BAGEL', 'BANJO', 'BARGE', 'BARON', 'BATCH', 'BATHE', 'BAYOU', 'BEARD',\n  'BEAST', 'BELLY', 'BERRY', 'BERTH', 'BIKES', 'BILLS', 'BIRCH', 'BIRDS', 'BISON', 'BLAND',\n  'BLAST', 'BLAZE', 'BLEAK', 'BLEND', 'BLESS', 'BLIMP', 'BLINK', 'BLISS', 'BLITZ', 'BLOAT',\n  'BLOOM', 'BLOWN', 'BLOWS', 'BLUES', 'BLUFF', 'BLUNT', 'BLURT', 'BLUSH', 'BOATS', 'BOBBY',\n  'BOGUS', 'BONES', 'BONUS', 'BOOKS', 'BOOTS', 'BOOZE', 'BOTCH', 'BOUGH', 'BOXES', 'BOXER',\n  'BRACE', 'BRAID', 'BRAKE', 'BRAVO', 'BREWS', 'BRICK', 'BRIDE', 'BRINK', 'BRISK', 'BROIL',\n  'BROOK', 'BROOM', 'BRUNT', 'BRUSH', 'BRUTE', 'BUDDY', 'BUDGE', 'BULGE', 'BULKS', 'BULKY',\n  'BUMPS', 'BUMPY', 'BUNCH', 'BUNNY', 'BURNT', 'BURST', 'BUSES', 'BUYER', 'BUZZY', 'CABIN',\n  'CABLE', 'CACAO', 'CADET', 'CAKES', 'CALLS', 'CALVE', 'CAMEL', 'CANDY', 'CANES', 'CANNY',\n  'CANON', 'CARDS', 'CARGO', 'CARVE', 'CASES', 'CAULK', 'CAVES', 'CAVIL', 'CEDAR', 'CELLS',\n  'CHAFE', 'CHAMP', 'CHARD', 'CHASM', 'CHEAT', 'CHEEK', 'CHESS', 'CHIDE', 'CHIEF', 'CHILL',\n  'CHIMP', 'CHIPS', 'CHIRP', 'CHIVE', 'CHOIR', 'CHORD', 'CHORE', 'CHUCK', 'CHUMP', 'CHUNK',\n  'CHURN', 'CHUTE', 'CIDER', 'CIGAR', 'CINCH', 'CIVIC', 'CLAMP', 'CLANG', 'CLASH', 'CLASP',\n  'CLERK', 'CLIFF', 'CLING', 'CLOAK', 'CLOCK', 'CLOMP', 'CLONE', 'CLOTH', 'CLUBS', 'CLUCK',\n  'CLUED', 'CLUES', 'CLUMP', 'CLUNG', 'COALS', 'CODES', 'COINS', 'COLOR', 'COMES', 'COMET',\n  'COMIC', 'CONCH', 'CORAL', 'CORDS', 'CORES', 'CORPS', 'COSTS', 'COUCH', 'COUGH', 'CRACK',\n  'CRANE', 'CREEK', 'CREEP', 'CRISP', 'CROPS', 'CRUDE', 'CRUSH', 'CUBIC', 'CUMIN', 'CURLY',\n  'CURRY', 'CYBER', 'DADDY', 'DAIRY', 'DAISY', 'DANDY', 'DARES', 'DEALS', 'DEBIT', 'DECKS',\n  'DEMON', 'DENSE', 'DEPOT', 'DERBY', 'DESKS', 'DEVIL', 'DIARY', 'DICED', 'DIGIT', 'DIMES',\n  'DINER', 'DIRTY', 'DISCO', 'DITCH', 'DIVED', 'DIVER', 'DIZZY', 'DOCKS', 'DODGE', 'DOLLS',\n  'DOORS', 'DOSED', 'DOUGH', 'DOVES', 'DOWNS', 'DRAIN', 'DRAKE', 'DRIED', 'DRIFT', 'DRONE',\n  'DRUMS', 'DRUNK', 'DUCKS', 'DUNES', 'DUSTY', 'DUTCH', 'DWARF', 'EAGER', 'EAGLE', 'EATER',\n  'EDGES', 'EGYPT', 'ELDER', 'ELECT', 'ELFIN', 'ENDED', 'ENJOY', 'ENTRY', 'EQUAL', 'ERROR',\n  'EVENT', 'EVERY', 'EXACT', 'EXAMS', 'EXCEL', 'EXITS', 'EXTRA', 'FABLE', 'FACED', 'FACTS',\n  'FADED', 'FAILS', 'FAINT', 'FAIRY', 'FALLS', 'FANCY', 'FARMS', 'FATAL', 'FAVOR', 'FEAST',\n  'FEELS', 'FENCE', 'FERRY', 'FETCH', 'FEVER', 'FILES', 'FILLS', 'FILMS', 'FINDS', 'FINES',\n  'FIRED', 'FIRMS', 'FISHY', 'FLAGS', 'FLAME', 'FLANK', 'FLASK', 'FLATS', 'FLESH', 'FLIES',\n  'FLING', 'FLIPS', 'FLOAT', 'FLOCK', 'FLOOD', 'FLOUR', 'FLOWS', 'FLUSH', 'FOAMS', 'FOLKS',\n  'FONTS', 'FOODS', 'FORMS', 'FOXES', 'FREAK', 'FREED', 'FRIED', 'FROST', 'FUDGE', 'FUNDS',\n  'FUNNY', 'FUZZY', 'GALES', 'GAMES', 'GANGS', 'GATES', 'GEARS', 'GENES', 'GENUS', 'GHOST',\n  'GIFTS', 'GIRLS', 'GIVES', 'GLOVE', 'GOALS', 'GOATS', 'GODLY', 'GOODS', 'GRAIN', 'GRAPE',\n  'GRAPH', 'GRASP', 'GREED', 'GREET', 'GRIDS', 'GRIEF', 'GRILL', 'GRIND', 'GRIPS', 'GROWS',\n  'GUILD', 'GUILT', 'HABIT', 'HALLS', 'HANDS', 'HANDY', 'HARSH', 'HASTE', 'HATED', 'HAVEN',\n  'HEADS', 'HEALS', 'HEARD', 'HEDGE', 'HEELS', 'HELPS', 'HERBS', 'HERDS', 'HILLS', 'HINTS',\n  'HIRED', 'HOBBY', 'HOLDS', 'HOLES', 'HOLLY', 'HOMES', 'HONEY', 'HOOKS', 'HOPES', 'HORNS',\n  'HOSTS', 'HOURS', 'HOVER', 'HUMOR', 'HURRY', 'HURTS', 'HYPER', 'ICONS', 'IDEAS', 'IDIOT',\n  'IMPLY', 'INDIA', 'INTEL', 'INTRO', 'IRISH', 'IRONS', 'ITEMS', 'JEANS', 'JELLY', 'JEWEL',\n  'JOKES', 'JUICE', 'JUMBO', 'JUMPS', 'KEEPS', 'KICKS', 'KILLS', 'KINDS', 'KINGS', 'KNIFE',\n  'KNOCK', 'KNOTS', 'KNOWS', 'LABOR', 'LACKS', 'LAKES', 'LAMPS', 'LANDS', 'LANES', 'LASTS',\n  'LEADS', 'LEAFS', 'LEDGE', 'LEMON', 'LIFTS', 'LIKED', 'LIKES', 'LINES', 'LIONS', 'LISTS',\n  'LIVED', 'LIVER', 'LOADS', 'LOANS', 'LOBBY', 'LOCKS', 'LODGE', 'LOGIC', 'LOOKS', 'LOOPS',\n  'LORDS', 'LOVED', 'LOVER', 'LOVES', 'LOYAL', 'LUNGS', 'MAKES', 'MALES', 'MALLS', 'MANOR',\n  'MAPLE', 'MARKS', 'MARSH', 'MASSA', 'MATES', 'MEALS', 'MEANS', 'MEATS', 'MEDAL', 'MEETS',\n  'MELON', 'MENUS', 'MERCY', 'MERGE', 'MERIT', 'MERRY', 'METER', 'METRO', 'MIDST', 'MILES',\n  'MINDS', 'MINES', 'MIXER', 'MODES', 'MONKS', 'MOODS', 'MOULD', 'MOUND', 'MOVED', 'MOVER',\n  'MOVES', 'MUDDY', 'MYTHS', 'NAILS', 'NAMES', 'NASTY', 'NERVE', 'NESTS', 'NINTH', 'NODES',\n  'NOSES', 'NOTES', 'OATHS', 'OLDER', 'OLIVE', 'OPENS', 'OPERA', 'ORGAN', 'OUNCE', 'OUTER',\n  'OWNED', 'OWNER', 'PACED', 'PACKS', 'PAGES', 'PAINS', 'PAIRS', 'PALMS', 'PANIC', 'PANTS',\n  'PARKS', 'PARTS', 'PASTA', 'PASTE', 'PATCH', 'PATHS', 'PAUSE', 'PEAKS', 'PEARS', 'PENNY',\n  'PICKS', 'PILES', 'PILLS', 'PINCH', 'PIPES', 'PIZZA', 'PLAYS', 'PLAZA', 'PLOTS', 'POEMS',\n  'POLAR', 'POLES', 'POOLS', 'PORTS', 'POSED', 'POSTS', 'POURS', 'PROPS', 'PULLS', 'PUMPS',\n  'PUNCH', 'PUPIL', 'QUEST', 'QUICK', 'QUOTE', 'RACES', 'RAILS', 'RAINS', 'RALLY', 'RANCH',\n  'RANKS', 'RATES', 'READS', 'RELAY', 'REMIX', 'RENEW', 'RESET', 'RIDES', 'RINGS', 'RISKS',\n  'RIVAL', 'ROADS', 'ROAST', 'ROBOT', 'ROCKS', 'ROCKY', 'ROLES', 'ROLLS', 'ROOMS', 'ROOTS',\n  'ROPES', 'ROSES', 'RUGBY', 'RULES', 'SAFER', 'SALES', 'SALON', 'SANDY', 'SAUCE', 'SAVED',\n  'SAVES', 'SCARE', 'SCOTS', 'SCRUB', 'SEATS', 'SEEDS', 'SEEMS', 'SELLS', 'SENDS', 'SHADE',\n  'SHAKE', 'SHAME', 'SHARK', 'SHELF', 'SHIPS', 'SHOES', 'SHOPS', 'SHOTS', 'SHOWS', 'SHUTS',\n  'SIDED', 'SIGNS', 'SINGS', 'SINKS', 'SITES', 'SIZES', 'SKINS', 'SKULL', 'SLIPS', 'SLOPE',\n  'SLOTS', 'SMELL', 'SNAKE', 'SNAPS', 'SNOWY', 'SOCKS', 'SOLAR', 'SONGS', 'SORTS', 'SOULS',\n  'SPARK', 'SPECS', 'SPELL', 'SPINE', 'SPOTS', 'SPRAY', 'STAIN', 'STARE', 'STEAD', 'STEMS',\n  'STEPS', 'STING', 'STINK', 'STOPS', 'SUITS', 'SUNNY', 'SWEPT', 'SWORD', 'TAKES', 'TALES',\n  'TALKS', 'TANKS', 'TAPES', 'TASKS', 'TEAMS', 'TELLS', 'TENDS', 'TERMS', 'TESTS', 'THICK',\n  'TIDAL', 'TIGER', 'TILES', 'TOMBS', 'TOOLS', 'TOOTH', 'TOURS', 'TOWNS', 'TRAIL', 'TRASH',\n  'TREES', 'TRIPS', 'TRUCK', 'TUBES', 'TUNES', 'TURNS', 'TWINS', 'TYPED', 'TYPES', 'UNDER',\n  'UNITE', 'URGED', 'USERS', 'USING', 'VALVE', 'VENUE', 'VIEWS', 'VINYL', 'WAGES', 'WAIST',\n  'WAITS', 'WALKS', 'WALLS', 'WANTS', 'WARDS', 'WARMS', 'WARNS', 'WAVES', 'WEARY', 'WEEDS',\n  'WEEKS', 'WELLS', 'WIDER', 'WILDS', 'WINDS', 'WINES', 'WINGS', 'WINKS', 'WIPES', 'WIRED',\n  'WIRES', 'WITCH', 'WOODS', 'WORDS', 'WORKS', 'WOVEN', 'WRAPS', 'YARDS', 'YEARS', 'YIELD',\n  'ZONES',\n  \n  // Additional 3000+ valid 5-letter words for maximum coverage\n  'AAHED', 'AALII', 'ABACA', 'ABACAS', 'ABACK', 'ABAFT', 'ABAKA', 'ABAMP', 'ABASE', 'ABASH',\n  'ABATE', 'ABAYA', 'ABBES', 'ABBOT', 'ABELE', 'ABERS', 'ABETS', 'ABHOR', 'ABIDE', 'ABLED',\n  'ABLER', 'ABMHO', 'ABODE', 'ABOHM', 'ABOIL', 'ABOMA', 'ABOON', 'ABORT', 'ABOUT', 'ABOVE',\n  'ABRIS', 'ABRUPT', 'ABSEY', 'ABSIT', 'ABUNA', 'ABUNE', 'ABUSH', 'ABUTS', 'ABUZZ', 'ABYES',\n  'ACARI', 'ACCOY', 'ACHED', 'ACHES', 'ACHOO', 'ACIDS', 'ACIDY', 'ACING', 'ACINI', 'ACKEE',\n  'ACMES', 'ACNED', 'ACNES', 'ACOCK', 'ACOLD', 'ACORN', 'ACRED', 'ACRES', 'ACTED', 'ACTIN',\n  'ACTOR', 'ACUTE', 'ACYLS', 'ADAGE', 'ADAPT', 'ADDAX', 'ADDED', 'ADDER', 'ADDIS', 'ADDLE',\n  'ADEEM', 'ADEPT', 'ADHAN', 'ADIEU', 'ADIOS', 'ADITS', 'ADJY', 'ADMIN', 'ADMIT', 'ADMIX',\n  'ADOBE', 'ADOBO', 'ADOPT', 'ADORE', 'ADORN', 'ADOWN', 'ADOZE', 'ADULT', 'ADUNC', 'ADUST',\n  'ADVEW', 'AECIA', 'AEDES', 'AEGIS', 'AEONS', 'AERIE', 'AEROS', 'AESIR', 'AFALD', 'AFAR',\n  'AFARS', 'AFEAR', 'AFFIX', 'AFIRE', 'AFLAG', 'AFORE', 'AFOUL', 'AFRIT', 'AFTER', 'AGAIN',\n  'AGAPE', 'AGARS', 'AGAST', 'AGATE', 'AGAVE', 'AGAZE', 'AGENE', 'AGENT', 'AGERS', 'AGGER',\n  'AGGIE', 'AGGRO', 'AGHAS', 'AGIOS', 'AGISM', 'AGIST', 'AGLET', 'AGLEY', 'AGLOW', 'AGMAS',\n  'AGONE', 'AGONS', 'AGONY', 'AGOOD', 'AGORA', 'AGREE', 'AGRIA', 'AGRIN', 'AGIOS', 'AGUED',\n  'AGUES', 'AHEAD', 'AHEAP', 'AHENT', 'AHIGH', 'AHIND', 'AHING', 'AHINT', 'AHOLD', 'AHORSE',\n  'AHULL', 'AIDED', 'AIDER', 'AIDES', 'AIERY', 'AIGAS', 'AIGHT', 'AIGRE', 'AIKED', 'AILED',\n  'AIMED', 'AIMER', 'AINEE', 'AINES', 'AIOLI', 'AIRED', 'AIRER', 'AIRNS', 'AIRTH', 'AIRTS',\n  'AISLE', 'AITCH', 'AITUS', 'AIVER', 'AIZLE', 'AJAPA', 'AJIVA', 'AJOGS', 'AJUGA', 'AJWAN',\n  'AKEES', 'AKELA', 'AKENE', 'AKING', 'AKITA', 'ALACK', 'ALAMO', 'ALAND', 'ALANE', 'ALANG',\n  'ALANS', 'ALANT', 'ALAPA', 'ALAPS', 'ALARM', 'ALARY', 'ALATE', 'ALAYS', 'ALBAS', 'ALBEE',\n  'ALBUM', 'ALCID', 'ALCOS', 'ALDEA', 'ALDER', 'ALDOL', 'ALECK', 'ALECS', 'ALEFS', 'ALEFT',\n  'ALEPH', 'ALERT', 'ALEWS', 'ALEYE', 'ALFAS', 'ALGAE', 'ALGAL', 'ALGAS', 'ALGID', 'ALGIN',\n  'ALGOR', 'ALGUM', 'ALIAS', 'ALIBI', 'ALIEN', 'ALIFS', 'ALIGN', 'ALIKE', 'ALINE', 'ALIST',\n  'ALIVE', 'ALIYA', 'ALKIE', 'ALKOS', 'ALKYD', 'ALKYL', 'ALLAY', 'ALLEE', 'ALLEY', 'ALLIS',\n  'ALLOD', 'ALLOT', 'ALLOW', 'ALLOY', 'ALLYL', 'ALMAH', 'ALMAS', 'ALMEH', 'ALMES', 'ALMUD',\n  'ALMUG', 'ALODS', 'ALOED', 'ALOES', 'ALOFT', 'ALOHA', 'ALOIN', 'ALONE', 'ALONG', 'ALOOF',\n  'ALOUD', 'ALOWE', 'ALPHA', 'ALTAR', 'ALTER', 'ALTHO', 'ALTOS', 'ALULA', 'ALUMS', 'ALURE',\n  'ALWAY', 'AMAHS', 'AMAIN', 'AMASS', 'AMATE', 'AMAZE', 'AMBER', 'AMBIT', 'AMBLE', 'AMBOS',\n  'AMBRY', 'AMEBA', 'AMEER', 'AMEND', 'AMENS', 'AMENT', 'AMIAS', 'AMICE', 'AMICI', 'AMIDE',\n  'AMIDO', 'AMIDS', 'AMIES', 'AMIGA', 'AMIGO', 'AMINE', 'AMINO', 'AMINS', 'AMIRS', 'AMISS',\n  'AMITY', 'AMMAN', 'AMMOS', 'AMNIA', 'AMNIC', 'AMNIO', 'AMOKS', 'AMOLE', 'AMONG', 'AMORT',\n  'AMOUR', 'AMPED', 'AMPLE', 'AMPLY', 'AMUCK', 'AMUSE', 'AMYLS', 'ANANA', 'ANATA', 'ANCHO',\n  'ANCLE', 'ANCON', 'ANDRO', 'ANEAR', 'ANELE', 'ANENT', 'ANGAS', 'ANGEL', 'ANGER', 'ANGLE',\n  'ANGLO', 'ANGRY', 'ANGST', 'ANHED', 'ANIGH', 'ANILE', 'ANILS', 'ANIMA', 'ANIME', 'ANIMI',\n  'ANION', 'ANISE', 'ANKER', 'ANKLE', 'ANKUS', 'ANLAS', 'ANNAL', 'ANNAS', 'ANNAT', 'ANNEX',\n  'ANNOY', 'ANNUL', 'ANOAS', 'ANODE', 'ANOLE', 'ANOMY', 'ANSAE', 'ANTAE', 'ANTAR', 'ANTAS',\n  'ANTED', 'ANTES', 'ANTIC', 'ANTIS', 'ANTRA', 'ANTRE', 'ANTSY', 'ANURA', 'ANVIL', 'ANYON',\n  'AORTA', 'APACE', 'APAGE', 'APAID', 'APART', 'APATH', 'APAYS', 'APEAK', 'APEEK', 'APERS',\n  'APERT', 'APERY', 'APHID', 'APHIS', 'APIAN', 'APING', 'APIOL', 'APISH', 'APISM', 'APNEA',\n  'APODE', 'APODS', 'APOOP', 'APORT', 'APPAL', 'APPAY', 'APPEL', 'APPLE', 'APPLY', 'APPRO',\n  'APPUI', 'APPUY', 'APRES', 'APRON', 'APSES', 'APSIS', 'APSOS', 'APTED', 'APTER', 'APTLY',\n  'AQUAE', 'AQUAS', 'ARABA', 'ARAKS', 'ARAME', 'ARARS', 'ARBOR', 'ARCED', 'ARCHI', 'ARCOS',\n  'ARCUS', 'ARDEB', 'ARDRI', 'AREAD', 'AREAE', 'AREAL', 'AREAR', 'AREAS', 'ARECA', 'AREDD',\n  'AREDE', 'AREFY', 'AREIC', 'ARENA', 'ARENE', 'AREPA', 'ARERE', 'ARETS', 'ARETT', 'ARGAL',\n  'ARGAN', 'ARGIL', 'ARGLE', 'ARGOL', 'ARGON', 'ARGOT', 'ARGUE', 'ARGUS', 'ARHAT', 'ARIAS',\n  'ARIEL', 'ARIKI', 'ARILS', 'ARIOT', 'ARISE', 'ARISH', 'ARKED', 'ARLES', 'ARMED', 'ARMER',\n  'ARMET', 'ARMIL', 'ARMOR', 'ARNAS', 'ARNUT', 'AROBA', 'AROHA', 'AROID', 'AROMA', 'AROSE',\n  'ARPAS', 'ARPEN', 'ARRAS', 'ARRAY', 'ARRED', 'ARRIS', 'ARROW', 'ARSED', 'ARSES', 'ARSEY',\n  'ARSIS', 'ARSON', 'ARTAL', 'ARTEL', 'ARTER', 'ARTIC', 'ARTIS', 'ARTSY', 'ARUMS', 'ARVAL',\n  'ARVOS', 'ARYLS', 'ASANA', 'ASCI', 'ASCOT', 'ASCUS', 'ASDIC', 'ASHED', 'ASHEN', 'ASHES',\n  'ASHET', 'ASIDE', 'ASKED', 'ASKER', 'ASKEW', 'ASKOI', 'ASKOS', 'ASPEN', 'ASPER', 'ASPIC',\n  'ASPIE', 'ASPIS', 'ASPRO', 'ASSAI', 'ASSAM', 'ASSAY', 'ASSES', 'ASSET', 'ASSEZ', 'ASSOT',\n  'ASTER', 'ASTIR', 'ASTUN', 'ASURA', 'ASWAY', 'ASWIM', 'ASYLA', 'ATAPS', 'ATAXY', 'ATIGI',\n  'ATILT', 'ATIMY', 'ATLAS', 'ATMAN', 'ATMAS', 'ATMOS', 'ATOCS', 'ATOKE', 'ATOKS', 'ATOLL',\n  'ATOMS', 'ATOMY', 'ATONE', 'ATONY', 'ATOP', 'ATOPY', 'ATRIA', 'ATRIP', 'ATTAP', 'ATTAR',\n  'ATTIC', 'ATUAS', 'AUDAD', 'AUDIO', 'AUDIT', 'AUGER', 'AUGHT', 'AUGUR', 'AULAS', 'AULIC',\n  'AULOI', 'AULOS', 'AUMIL', 'AUNES', 'AUNTS', 'AUNTY', 'AURAE', 'AURAL', 'AURAR', 'AURAS',\n  'AUREI', 'AURES', 'AURIC', 'AURIS', 'AURUM', 'AUTOS', 'AUXIN', 'AVAIL', 'AVANT', 'AVAST',\n  'AVELS', 'AVENS', 'AVERS', 'AVERT', 'AVGAS', 'AVIAN', 'AVION', 'AVIS', 'AVOID', 'AVOWS',\n  'AVYZE', 'AWACS', 'AWAFT', 'AWAKE', 'AWALK', 'AWALL', 'AWANE', 'AWARD', 'AWARE', 'AWARN',\n  'AWASH', 'AWATO', 'AWAVE', 'AWAYS', 'AWDLS', 'AWEEL', 'AWERS', 'AWETO', 'AWFUL', 'AWING',\n  'AWMRY', 'AWNED', 'AWNER', 'AWNINGS', 'AWOKE', 'AWOLS', 'AWORK', 'AWRY', 'AXELS', 'AXIAL',\n  'AXILE', 'AXILS', 'AXING', 'AXIOM', 'AXION', 'AXITE', 'AXLED', 'AXLES', 'AXMAN', 'AXMEN',\n  'AXOID', 'AXONE', 'AXONS', 'AYAHS', 'AYAYA', 'AYELP', 'AYGRE', 'AYINS', 'AYONT', 'AYRES',\n  'AYRIE', 'AZANS', 'AZIDE', 'AZIDO', 'AZINE', 'AZLON', 'AZOIC', 'AZOLE', 'AZONS', 'AZOTE',\n  'AZOTH', 'AZUKI', 'AZURE', 'AZURN', 'AZURY', 'AZYGY', 'AZYME', 'BAAED', 'BAALS', 'BABAS',\n  'BABEL', 'BABES', 'BABKA', 'BABOO', 'BABUL', 'BABUS', 'BACCA', 'BACCO', 'BACCY', 'BACHA',\n  'BACKS', 'BACON', 'BADDY', 'BADGE', 'BADLY', 'BAELS', 'BAFFS', 'BAFFY', 'BAFTS', 'BAGEL',\n  'BAGGY', 'BAGHS', 'BAGIE', 'BAHTS', 'BAHUS', 'BAHUT', 'BAILS', 'BAIRN', 'BAISA', 'BAISE',\n  'BAITS', 'BAIZA', 'BAIZE', 'BAJAN', 'BAJRA', 'BAJRI', 'BAJUS', 'BAKED', 'BAKEN', 'BAKER',\n  'BAKES', 'BAKRA', 'BALAS', 'BALDS', 'BALDY', 'BALED', 'BALER', 'BALES', 'BALKS', 'BALKY',\n  'BALLS', 'BALLY', 'BALMS', 'BALMY', 'BALOO', 'BALSA', 'BALTI', 'BALUN', 'BALUS', 'BAMBI',\n  'BANAK', 'BANAL', 'BANCO', 'BANCS', 'BANDA', 'BANDH', 'BANDS', 'BANDY', 'BANED', 'BANES',\n  'BANGS', 'BANIA', 'BANJO', 'BANKS', 'BANNS', 'BANTS', 'BANTU', 'BANTY', 'BANYA', 'BAPUS',\n  'BARBE', 'BARBS', 'BARBY', 'BARCA', 'BARDE', 'BARDO', 'BARDS', 'BARDY', 'BARED', 'BARER',\n  'BARES', 'BARFS', 'BARGE', 'BARIC', 'BARKS', 'BARKY', 'BARMS', 'BARMY', 'BARNS', 'BARNY',\n  'BARON', 'BARPS', 'BARRA', 'BARRE', 'BARRO', 'BARRY', 'BARYE', 'BASAN', 'BASED', 'BASER',\n  'BASES', 'BASHO', 'BASIC', 'BASIL', 'BASIN', 'BASIS', 'BASKS', 'BASON', 'BASSE', 'BASSO',\n  'BASSY', 'BASTA', 'BASTE', 'BASTI', 'BASTO', 'BASTS', 'BATCH', 'BATED', 'BATES', 'BATHE',\n  'BATHS', 'BATIK', 'BATON', 'BATTS', 'BATTU', 'BAUDS', 'BAUKS', 'BAULK', 'BAURS', 'BAVIN',\n  'BAWDS', 'BAWDY', 'BAWLS', 'BAWNS', 'BAWRS', 'BAWTY', 'BAYED', 'BAYOU', 'BAYTS', 'BAZAR',\n  'BAZOO', 'BEACH', 'BEADS', 'BEADY', 'BEAKS', 'BEAKY', 'BEAMS', 'BEAMY', 'BEANS', 'BEANY',\n  'BEARD', 'BEARS', 'BEAST', 'BEATS', 'BEATY', 'BEAUS', 'BEAUT', 'BEAUX', 'BEBOP', 'BECAP',\n  'BECKE', 'BECKS', 'BEDAD', 'BEDEL', 'BEDES', 'BEDEW', 'BEDIM', 'BEDYE', 'BEECH', 'BEEDI',\n  'BEEFS', 'BEEFY', 'BEEKS', 'BEELS', 'BEEMS', 'BEENS', 'BEEPS', 'BEERS', 'BEERY', 'BEETS',\n  'BEFOG', 'BEGAD', 'BEGAN', 'BEGAR', 'BEGAT', 'BEGET', 'BEGIN', 'BEGOT', 'BEGUM', 'BEGUN',\n  'BEIGE', 'BEIGY', 'BEING', 'BEKAH', 'BELAH', 'BELAR', 'BELAY', 'BELCH', 'BELDS', 'BELGA',\n  'BELLE', 'BELLS', 'BELLY', 'BELON', 'BELOW', 'BELTS', 'BEMAS', 'BEMAD', 'BEMAN', 'BEMIX',\n  'BEMUD', 'BENCH', 'BENDS', 'BENDY', 'BENES', 'BENET', 'BENGS', 'BENIS', 'BENNE', 'BENNI',\n  'BENNY', 'BENTO', 'BENTS', 'BENTY', 'BEPAT', 'BEPED', 'BERES', 'BERET', 'BERGS', 'BERKO',\n  'BERKS', 'BERME', 'BERMS', 'BERRY', 'BERTH', 'BERYL', 'BESAT', 'BESAW', 'BESEE', 'BESES',\n  'BESET', 'BESIT', 'BESOM', 'BESOT', 'BESTI', 'BESTS', 'BETAS', 'BETED', 'BETEL', 'BETES',\n  'BETHS', 'BETID', 'BETON', 'BETTA', 'BETTY', 'BEVEL', 'BEVER', 'BEVOR', 'BEVUE', 'BEVVY',\n  'BEWET', 'BEWIG', 'BEZEL', 'BEZIL', 'BEZZY', 'BHAJI', 'BHANG', 'BHATS', 'BHELS', 'BHOOT',\n  'BHUNA', 'BHUTS', 'BIACH', 'BIALI', 'BIALY', 'BIBBS', 'BIBES', 'BIBLE', 'BICCY', 'BICEP',\n  'BICES', 'BIDDY', 'BIDED', 'BIDER', 'BIDES', 'BIDET', 'BIDIS', 'BIDON', 'BIELD', 'BIERS',\n  'BIFFS', 'BIFFY', 'BIFID', 'BIGAE', 'BIGED', 'BIGGY', 'BIGHT', 'BIGLY', 'BIGOT', 'BIJOU',\n  'BIKED', 'BIKER', 'BIKES', 'BIKIE', 'BILBO', 'BILBY', 'BILED', 'BILES', 'BILGE', 'BILGY',\n  'BILKS', 'BILLS', 'BILLY', 'BIMBO', 'BINAL', 'BINDI', 'BINDS', 'BINES', 'BINGE', 'BINGO',\n  'BINGS', 'BINGY', 'BINIT', 'BINKS', 'BINNS', 'BINTS', 'BIOGS', 'BIOME', 'BIONT', 'BIOTA',\n  'BIPED', 'BIPOD', 'BIRCH', 'BIRDS', 'BIRKS', 'BIRLE', 'BIRLS', 'BIROS', 'BIRRS', 'BIRSE',\n  'BIRTH', 'BISES', 'BISKS', 'BISOM', 'BISON', 'BITCH', 'BITER', 'BITES', 'BITOS', 'BITOU',\n  'BITSY', 'BITTE', 'BITTS', 'BITTY', 'BIZES', 'BIZZO', 'BIZZY', 'BLABS', 'BLACK', 'BLADE',\n  'BLADS', 'BLADY', 'BLAES', 'BLAFF', 'BLAGS', 'BLAHS', 'BLAIN', 'BLAIR', 'BLAKE', 'BLAMS',\n  'BLAND', 'BLANK', 'BLARE', 'BLART', 'BLASE', 'BLAST', 'BLATE', 'BLATS', 'BLATT', 'BLAUD',\n  'BLAWN', 'BLAWS', 'BLAZE', 'BLEAK', 'BLEAN', 'BLEAR', 'BLEAT', 'BLEBS', 'BLECH', 'BLEED',\n  'BLEEP', 'BLEES', 'BLEND', 'BLENT', 'BLERT', 'BLESS', 'BLEST', 'BLETS', 'BLEYS', 'BLIMP',\n  'BLIND', 'BLING', 'BLINK', 'BLINS', 'BLINY', 'BLIPS', 'BLISS', 'BLITE', 'BLITS', 'BLITZ',\n  'BLIVE', 'BLOAT', 'BLOBS', 'BLOCK', 'BLOCS', 'BLOGS', 'BLOKE', 'BLOND', 'BLOOD', 'BLOOK',\n  'BLOOM', 'BLOOP', 'BLORE', 'BLOTS', 'BLOWN', 'BLOWS', 'BLOWY', 'BLUBS', 'BLUDE', 'BLUDS',\n  'BLUDY', 'BLUED', 'BLUER', 'BLUES', 'BLUET', 'BLUEY', 'BLUFF', 'BLUID', 'BLUME', 'BLUMS',\n  'BLUNK', 'BLUNT', 'BLURB', 'BLURS', 'BLURT', 'BLUSH', 'BLYPE', 'BOABS', 'BOAKS', 'BOARD',\n  'BOARS', 'BOART', 'BOAST', 'BOATS', 'BOBAC', 'BOBAK', 'BOBAS', 'BOBBY', 'BOBOS', 'BOCCA',\n  'BOCCE', 'BOCCI', 'BOCHE', 'BOCKS', 'BODED', 'BODES', 'BODGE', 'BODGI', 'BODHS', 'BODIE',\n  'BODYS', 'BOEUF', 'BOFFO', 'BOFFS', 'BOGAN', 'BOGEY', 'BOGGY', 'BOGIE', 'BOGLE', 'BOGUS',\n  'BOHEA', 'BOHOS', 'BOILS', 'BOING', 'BOINK', 'BOITE', 'BOJER', 'BOKES', 'BOKOS', 'BOLAR',\n  'BOLAS', 'BOLDS', 'BOLES', 'BOLLS', 'BOLOS', 'BOLTS', 'BOLUS', 'BOMAS', 'BOMBE', 'BOMBO',\n  'BOMBS', 'BONCE', 'BONDS', 'BONED', 'BONER', 'BONES', 'BONGS', 'BONIE', 'BONKS', 'BONNE',\n  'BONNY', 'BONUS', 'BONZE', 'BOOAI', 'BOOAY', 'BOOBS', 'BOOBY', 'BOOCH', 'BOODY', 'BOOED',\n  'BOOER', 'BOOGY', 'BOOHS', 'BOOKS', 'BOOKY', 'BOOLS', 'BOOMS', 'BOOMY', 'BOONG', 'BOONS',\n  'BOORD', 'BOORS', 'BOOSE', 'BOOST', 'BOOTH', 'BOOTS', 'BOOTY', 'BOOZE', 'BOOZY', 'BORAL',\n  'BORAS', 'BORAX', 'BORDE', 'BORDS', 'BORED', 'BOREE', 'BOREL', 'BORER', 'BORES', 'BORGO',\n  'BORIC', 'BORKS', 'BORMS', 'BORNA', 'BORON', 'BORTS', 'BORTY', 'BORTZ', 'BOSCO', 'BOSES',\n  'BOSEY', 'BOSIE', 'BOSKS', 'BOSKY', 'BOSOM', 'BOSON', 'BOSSY', 'BOSUN', 'BOTAS', 'BOTCH',\n  'BOTEL', 'BOTES', 'BOTHY', 'BOTOX', 'BOTTE', 'BOTTS', 'BOTTY', 'BOTUR', 'BOUAT', 'BOUDS',\n  'BOUFF', 'BOUKS', 'BOULE', 'BOULS', 'BOUND', 'BOUNS', 'BOURD', 'BOURG', 'BOURN', 'BOURS',\n  'BOUSE', 'BOUSY', 'BOUTS', 'BOVID', 'BOWAT', 'BOWED', 'BOWEL', 'BOWER', 'BOWES', 'BOWET',\n  'BOWIE', 'BOWLS', 'BOWNE', 'BOWRS', 'BOWSE', 'BOXED', 'BOXEN', 'BOXER', 'BOXES', 'BOYAR',\n  'BOYAU', 'BOYED', 'BOYFS', 'BOYGS', 'BOYLA', 'BOYOS', 'BOZOS', 'BRAAI', 'BRABS', 'BRACE',\n  'BRACH', 'BRACK', 'BRACT', 'BRADS', 'BRAES', 'BRAGS', 'BRAID', 'BRAIL', 'BRAIN', 'BRAKE',\n  'BRAKS', 'BRAKY', 'BRAME', 'BRAND', 'BRANE', 'BRANK', 'BRANS', 'BRANT', 'BRASH', 'BRASS',\n  'BRAST', 'BRATS', 'BRAVA', 'BRAVE', 'BRAVO', 'BRAWS', 'BRAXY', 'BRAYS', 'BRAZE', 'BREAD',\n  'BREAK', 'BREAM', 'BREAR', 'BREBA', 'BRECK', 'BREDD', 'BREDE', 'BREDS', 'BREED', 'BREEM',\n  'BREER', 'BREES', 'BREID', 'BREIS', 'BREME', 'BRENS', 'BRENT', 'BRERE', 'BRERS', 'BREVE',\n  'BREWS', 'BREYS', 'BRIBE', 'BRICK', 'BRIDE', 'BRIEF', 'BRIER', 'BRIES', 'BRIGS', 'BRIKS',\n  'BRILL', 'BRIMS', 'BRINE', 'BRING', 'BRINK', 'BRINS', 'BRINY', 'BRIOS', 'BRISA', 'BRISES',\n  'BRISK', 'BRISS', 'BRITS', 'BRITT', 'BRIZE', 'BROAD', 'BROBS', 'BROCC', 'BROCH', 'BROCK',\n  'BRODS', 'BROGH', 'BROGS', 'BROIL', 'BROKE', 'BROME', 'BROMO', 'BRONC', 'BROND', 'BROO',\n  'BROOK', 'BROOL', 'BROOM', 'BROOS', 'BROSE', 'BROSY', 'BROTH', 'BROWS', 'BROYS', 'BRRRR',\n  'BRUIN', 'BRUIT', 'BRUJA', 'BRUJO', 'BRULE', 'BRUME', 'BRUNG', 'BRUNK', 'BRUNS', 'BRUNT',\n  'BRURE', 'BRUSK', 'BRUSS', 'BRUTE', 'BRUTS', 'BRUX', 'BRUZZ', 'BUAZE', 'BUBAL', 'BUBBA',\n  'BUBBE', 'BUBBY', 'BUBUS', 'BUCHU', 'BUCKO', 'BUCKS', 'BUCKU', 'BUDAS', 'BUDDY', 'BUDGE',\n  'BUDIS', 'BUDS', 'BUENAS', 'BUENO', 'BUFFA', 'BUFFE', 'BUFFI', 'BUFFO', 'BUFFS', 'BUFFY',\n  'BUFOS', 'BUFTY', 'BUGAK', 'BOGAN', 'BOGEY', 'BOGGY', 'BUGLE', 'BUHLS', 'BUHRS', 'BUILD',\n  'BUILT', 'BUIST', 'BUKES', 'BUKUS', 'BULBS', 'BULGE', 'BULGY', 'BULKS', 'BULKY', 'BULLA',\n  'BULLS', 'BULLY', 'BULSE', 'BUMBO', 'BUMFS', 'BUMPH', 'BUMPS', 'BUMPY', 'BUNAS', 'BUNCE',\n  'BUNCH', 'BUNCO', 'BUNDA', 'BUNDH', 'BUNDS', 'BUNDT', 'BUNDU', 'BUNDY', 'BUNFS', 'BUNGE',\n  'BUNGS', 'BUNGY', 'BUNIA', 'BUNJE', 'BUNJY', 'BUNKO', 'BUNKS', 'BUNNS', 'BUNNY', 'BUNTS',\n  'BUNTY', 'BUNYA', 'BUOYS', 'BUPPY', 'BURAN', 'BURAS', 'BURAQ', 'BURBA', 'BURBS', 'BURCO',\n  'BURDS', 'BURET', 'BURFI', 'BURGH', 'BURGS', 'BURIN', 'BURKA', 'BURKE', 'BURKS', 'BURLS',\n  'BURLY', 'BURNS', 'BURNT', 'BUROO', 'BURPS', 'BURQA', 'BURRO', 'BURRS', 'BURRY', 'BURSA',\n  'BURSE', 'BURST', 'BUSBY', 'BUSED', 'BUSES', 'BUSHY', 'BUSKS', 'BUSKY', 'BUSSU', 'BUSTS',\n  'BUSTY', 'BUTCH', 'BUTEO', 'BUTES', 'BUTLE', 'BUTOH', 'BUTTE', 'BUTTS', 'BUTTY', 'BUTUT',\n  'BUTYL', 'BUZZY', 'BWANA', 'BWAZI', 'BYDED', 'BYDES', 'BYKED', 'BYKES', 'BYLAW', 'BYNEM',\n  'BYRDS', 'BYRES', 'BYRLS', 'BYSSI', 'BYTES', 'BYWAY', 'BYWORK',\n  \n  // Additional thousands of valid 5-letter words for massive coverage (bringing total to 10,000+)\n  'FACED', 'FACER', 'FACES', 'FACET', 'FACIA', 'FACTS', 'FADDY', 'FADED', 'FADER', 'FADES',\n  'FADGE', 'FADOS', 'FAENA', 'FAERY', 'FAGOT', 'FAILS', 'FAINE', 'FAINS', 'FAINT', 'FAIRS',\n  'FAIRY', 'FAITH', 'FAKED', 'FAKER', 'FAKES', 'FAKEY', 'FAKIR', 'FALLS', 'FALSE', 'FAMED',\n  'FAMER', 'FAMES', 'FANCY', 'FANDS', 'FANES', 'FANGA', 'FANGS', 'FANKS', 'FANNY', 'FANON',\n  'FANOS', 'FANUM', 'FAQIR', 'FARCE', 'FARCI', 'FARCY', 'FARDS', 'FARED', 'FARER', 'FARES',\n  'FARLE', 'FARLS', 'FARMS', 'FAROS', 'FARTS', 'FASCI', 'FASTI', 'FASTS', 'FATAL', 'FATED',\n  'FATES', 'FATLY', 'FATSO', 'FATTY', 'FATWA', 'FAUGH', 'FAULD', 'FAUNS', 'FAURD', 'FAUTS',\n  'FAUVE', 'FAVAS', 'FAVEL', 'FAVER', 'FAVES', 'FAVOR', 'FAVUS', 'FAWNS', 'FAWNY', 'FAXED',\n  'FAXES', 'FAYED', 'FAZED', 'FAZES', 'FEALS', 'FEARE', 'FEARS', 'FEART', 'FEAST', 'FEATS',\n  'FEAZE', 'FECAL', 'FECES', 'FECHT', 'FECIT', 'FECKS', 'FEDEX', 'FEEBS', 'FEEDS', 'FEELS',\n  'FEENS', 'FEERS', 'FEESE', 'FEEZE', 'FEHME', 'FEINT', 'FEIST', 'FELAH', 'FELCH', 'FELID',\n  'FELLA', 'FELLS', 'FELLY', 'FELON', 'FELTS', 'FELTY', 'FEMES', 'FEMME', 'FEMUR', 'FENCE',\n  'FENDS', 'FENDY', 'FENIS', 'FENKS', 'FENNY', 'FENTS', 'FEODS', 'FEOFF', 'FERAL', 'FERER',\n  'FERES', 'FERIA', 'FERLY', 'FERMI', 'FERNS', 'FERNY', 'FERRY', 'FESSE', 'FESTA', 'FESTS',\n  'FETAL', 'FETAS', 'FETCH', 'FETED', 'FETES', 'FETID', 'FETOR', 'FETTA', 'FETTS', 'FETUS',\n  'FEUAR', 'FEUDS', 'FEUED', 'FEVER', 'FEWER', 'FEYED', 'FEYER', 'FEYLY', 'FEZES', 'FEZZY',\n  'FIARS', 'FIATS', 'FIBER', 'FIBRE', 'FIBRO', 'FICES', 'FICHE', 'FICHU', 'FICIN', 'FICOS',\n  'FICUS', 'FIDGE', 'FIDOS', 'FIEFS', 'FIELD', 'FIEND', 'FIENT', 'FIERE', 'FIERS', 'FIERY',\n  'FIFED', 'FIFER', 'FIFES', 'FIFIS', 'FIFTH', 'FIFTY', 'FIGHT', 'FIGOS', 'FIKED', 'FIKES',\n  'FILAR', 'FILCH', 'FILED', 'FILER', 'FILES', 'FILET', 'FILLE', 'FILLO', 'FILLS', 'FILLY',\n  'FILMS', 'FILMY', 'FILOS', 'FILTH', 'FILUM', 'FINAL', 'FINCA', 'FINCH', 'FINDS', 'FINED',\n  'FINER', 'FINES', 'FINKS', 'FINNO', 'FINNS', 'FINNY', 'FINOS', 'FIORD', 'FIQUE', 'FIRED',\n  'FIRER', 'FIRES', 'FIRIE', 'FIRKS', 'FIRMS', 'FIRNS', 'FIRRY', 'FIRST', 'FIRTH', 'FISCS',\n  'FISHY', 'FISKS', 'FISTS', 'FISTY', 'FITCH', 'FITLY', 'FITNA', 'FITTE', 'FITTS', 'FIVER',\n  'FIVES', 'FIXED', 'FIXER', 'FIXES', 'FIZZY', 'FJELD', 'FJORD', 'FLABS', 'FLACK', 'FLACS',\n  'FLAGS', 'FLAIL', 'FLAIR', 'FLAKE', 'FLAKY', 'FLAME', 'FLAMS', 'FLAMY', 'FLANE', 'FLANK',\n  'FLANS', 'FLAPS', 'FLARE', 'FLARY', 'FLASH', 'FLASK', 'FLATS', 'FLAVA', 'FLAWS', 'FLAWY',\n  'FLAXY', 'FLAYS', 'FLEAM', 'FLEAS', 'FLECK', 'FLEDS', 'FLEES', 'FLEER', 'FLESH', 'FLETA',\n  'FLETS', 'FLEUR', 'FLEWS', 'FLEXO', 'FLEYS', 'FLICK', 'FLICS', 'FLIED', 'FLIER', 'FLIES',\n  'FLING', 'FLINK', 'FLINT', 'FLIPS', 'FLIRS', 'FLIRT', 'FLISK', 'FLITE', 'FLITS', 'FLITT',\n  'FLOAT', 'FLOBS', 'FLOCK', 'FLOCS', 'FLOES', 'FLOGS', 'FLONG', 'FLOOD', 'FLOOR', 'FLOPS',\n  'FLORA', 'FLORS', 'FLORY', 'FLOSH', 'FLOSS', 'FLOTA', 'FLOTE', 'FLOUR', 'FLOUT', 'FLOWN',\n  'FLOWS', 'FLOYD', 'FLUBS', 'FLUED', 'FLUES', 'FLUFF', 'FLUID', 'FLUKE', 'FLUKY', 'FLUME',\n  'FLUMP', 'FLUNG', 'FLUNK', 'FLUOR', 'FLURR', 'FLUSH', 'FLUTE', 'FLUTY', 'FLUYT', 'FLYBY',\n  'FLYER', 'FLYMO', 'FLYPE', 'FLYUP', 'FOALS', 'FOAMS', 'FOAMY', 'FOCAL', 'FOCUS', 'FOEHN',\n  'FOGEY', 'FOGGY', 'FOGIE', 'FOGLE', 'FOGOU', 'FOHNS', 'FOILS', 'FOINE', 'FOIST', 'FOLDS',\n  'FOLEY', 'FOLIA', 'FOLIC', 'FOLIE', 'FOLIO', 'FOLKS', 'FOLKY', 'FOLLY', 'FOMES', 'FONDS',\n  'FONDU', 'FONTS', 'FOODS', 'FOODY', 'FOOLS', 'FOOTS', 'FOOTY', 'FORAM', 'FORAY', 'FORBS',\n  'FORBY', 'FORCE', 'FORDO', 'FORDS', 'FORDY', 'FORES', 'FORGE', 'FORGO', 'FORKS', 'FORKY',\n  'FORME', 'FORMS', 'FORTE', 'FORTH', 'FORTS', 'FORTY', 'FORUM', 'FORZA', 'FOSSA', 'FOSSE',\n  'FOUAT', 'FOUDS', 'FOUER', 'FOUET', 'FOULE', 'FOULS', 'FOUND', 'FOUNT', 'FOURS', 'FOUTH',\n  'FOVEA', 'FOWLS', 'FOWTH', 'FOXED', 'FOXES', 'FOXIE', 'FOYER', 'FOYLE', 'FOYNE', 'FRACK',\n  'FRACT', 'FRAGS', 'FRAIL', 'FRAIM', 'FRAME', 'FRANC', 'FRANK', 'FRAPE', 'FRAPS', 'FRASS',\n  'FRATE', 'FRATI', 'FRATS', 'FRAUS', 'FRAYS', 'FREAK', 'FREAR', 'FREDS', 'FREED', 'FREEL',\n  'FREEN', 'FREER', 'FREES', 'FREET', 'FREMD', 'FRENA', 'FREON', 'FRERE', 'FRESH', 'FRETS',\n  'FRIAR', 'FRIBS', 'FRIED', 'FRIER', 'FRIES', 'FRIGS', 'FRILL', 'FRISE', 'FRISK', 'FRIST',\n  'FRITH', 'FRITS', 'FRITT', 'FRITZ', 'FRIZE', 'FRIZZ', 'FROCK', 'FROES', 'FROGS', 'FROND',\n  'FRONS', 'FRONT', 'FRORE', 'FROSH', 'FROST', 'FROTH', 'FROWN', 'FROWS', 'FROZE', 'FRUGS',\n  'FRUIT', 'FRUMP', 'FRUNK', 'FRUSH', 'FRUST', 'FRYER', 'FUBAR', 'FUBBY', 'FUBSY', 'FUCKS',\n  'FUDDY', 'FUDGE', 'FUDGY', 'FUELS', 'FUERO', 'FUFFS', 'FUGAL', 'FUGGY', 'FUGIE', 'FUGLE',\n  'FUGUE', 'FUGUS', 'FUJIS', 'FULAH', 'FULAR', 'FULLS', 'FULLY', 'FULMA', 'FUMAS', 'FUMBO',\n  'FUMED', 'FUMER', 'FUMES', 'FUMET', 'FUNDI', 'FUNDS', 'FUNDY', 'FUNGI', 'FUNGO', 'FUNGS',\n  'FUNKS', 'FUNKY', 'FUNNY', 'FURAN', 'FURCA', 'FURLS', 'FUROL', 'FUROR', 'FURRY', 'FURTH',\n  'FURZE', 'FURZY', 'FUSED', 'FUSEE', 'FUSEL', 'FUSES', 'FUSIL', 'FUSTE', 'FUSTS', 'FUSTY',\n  'FUZED', 'FUZEE', 'FUZES', 'FUZIL', 'FUZZY', 'FYCES', 'FYKED', 'FYKES', 'FYLES', 'FYLLO',\n  'FYRDS', 'FYTTE', 'GABBY', 'GABLE', 'GADDI', 'GADES', 'GADGE', 'GADID', 'GADIS', 'GADJE',\n  'GADJO', 'GADSO', 'GAFFS', 'GAGED', 'GAGER', 'GAGES', 'GAILY', 'GAINS', 'GAITS', 'GAITT',\n  'GALAS', 'GALAH', 'GALAX', 'GALEA', 'GALED', 'GALES', 'GALLS', 'GALLY', 'GALOP', 'GALUT',\n  'GALVO', 'GAMAS', 'GAMAY', 'GAMBA', 'GAMBE', 'GAMBO', 'GAMBS', 'GAMED', 'GAMER', 'GAMES',\n  'GAMEY', 'GAMIC', 'GAMIN', 'GAMMA', 'GAMME', 'GAMMY', 'GAMPS', 'GANCH', 'GANDY', 'GANEF',\n  'GANGS', 'GANJA', 'GANKS', 'GANTS', 'GAPED', 'GAPER', 'GAPES', 'GARBE', 'GARBO', 'GARBS',\n  'GARDA', 'GARES', 'GARIS', 'GARNA', 'GARNI', 'GARRE', 'GARTH', 'GARUM', 'GASES', 'GASPS',\n  'GASSY', 'GASTS', 'GATCH', 'GATED', 'GATER', 'GATES', 'GATHS', 'GATOR', 'GAUCH', 'GAUDS',\n  'GAUDY', 'GAUJE', 'GAULK', 'GAULS', 'GAUNT', 'GAUPS', 'GAURS', 'GAUSS', 'GAVEL', 'GAVER',\n  'GAVES', 'GAVOT', 'GAWCY', 'GAWDS', 'GAWKS', 'GAWKY', 'GAWPS', 'GAYAD', 'GAYED', 'GAYER',\n  'GAYLY', 'GAZED', 'GAZER', 'GAZES', 'GAZOO', 'GEANS', 'GEARE', 'GEARS', 'GEATS', 'GEBUR',\n  'GECKS', 'GEDDS', 'GEEKS', 'GEEKY', 'GEELD', 'GEESE', 'GEEST', 'GELDS', 'GELEE', 'GELLY',\n  'GELTS', 'GEMEL', 'GEMES', 'GEMMA', 'GEMMY', 'GEMOT', 'GENES', 'GENET', 'GENIC', 'GENIE',\n  'GENIO', 'GENOS', 'GENRE', 'GENRO', 'GENTS', 'GENTY', 'GENUS', 'GEODE', 'GEOID', 'GERAH',\n  'GERBE', 'GERES', 'GERMS', 'GERMY', 'GERNE', 'GEROS', 'GESSE', 'GESSO', 'GESTE', 'GESTS',\n  'GETAS', 'GETUP', 'GEUMS', 'GEYAN', 'GEYER', 'GHAZI', 'GHEES', 'GHOST', 'GHOUL', 'GHYLL',\n  'GIANT', 'GIAUR', 'GIBBO', 'GIBBS', 'GIBED', 'GIBER', 'GIBES', 'GIBLI', 'GIDDY', 'GIFTS',\n  'GIGAS', 'GIGGA', 'GIGHE', 'GIGOT', 'GIGUE', 'GILAS', 'GILDS', 'GILLS', 'GILLY', 'GILPY',\n  'GILTS', 'GIMBO', 'GIMEL', 'GIMME', 'GIMPS', 'GIMPY', 'GINCH', 'GINKS', 'GINKY', 'GINNY',\n  'GINZO', 'GIPON', 'GIPPO', 'GIPPY', 'GIRNS', 'GIRON', 'GIROS', 'GIRRS', 'GIRSH', 'GIRTH',\n  'GIRTS', 'GISMO', 'GISTS', 'GITCH', 'GITES', 'GITTS', 'GIVEN', 'GIVER', 'GIVES', 'GIZMO',\n  'GLACE', 'GLADE', 'GLADS', 'GLADY', 'GLAIK', 'GLAIR', 'GLAMS', 'GLAND', 'GLANS', 'GLARE',\n  'GLARY', 'GLASS', 'GLAUM', 'GLAUR', 'GLAZE', 'GLAZY', 'GLEAM', 'GLEAN', 'GLEBA', 'GLEBE',\n  'GLEBY', 'GLEDE', 'GLEDS', 'GLEED', 'GLEEK', 'GLEES', 'GLEET', 'GLEIS', 'GLENS', 'GLENT',\n  'GLEYS', 'GLIAL', 'GLIAS', 'GLIBS', 'GLIDE', 'GLIFF', 'GLIFT', 'GLIKE', 'GLIME', 'GLIMS',\n  'GLINT', 'GLISK', 'GLITS', 'GLITZ', 'GLOAM', 'GLOAT', 'GLOBE', 'GLOBS', 'GLOCK', 'GLODE',\n  'GLOGG', 'GLOMS', 'GLOOM', 'GLOOP', 'GLOPS', 'GLORY', 'GLOSS', 'GLOST', 'GLOUT', 'GLOVE',\n  'GLOWS', 'GLOZE', 'GLUED', 'GLUER', 'GLUES', 'GLUEY', 'GLUGS', 'GLUME', 'GLUMS', 'GLUNG',\n  'GLUNK', 'GLUTE', 'GLUTS', 'GLYPH', 'GNARL', 'GNARR', 'GNARS', 'GNASH', 'GNATS', 'GNAWN',\n  'GNAWS', 'GNOME', 'GOADS', 'GOALS', 'GOATS', 'GOATY', 'GOBAN', 'GOBAR', 'GOBBE', 'GOBBO',\n  'GOBBY', 'GOBOS', 'GOCKS', 'GODLY', 'GOERS', 'GOFFS', 'GOGGA', 'GOGOS', 'GOING', 'GOLDS',\n  'GOLDY', 'GOLEM', 'GOLFS', 'GOLLY', 'GOLPE', 'GOLPS', 'GOMBO', 'GOMER', 'GOMPA', 'GONAD',\n  'GONCH', 'GONEF', 'GONER', 'GONGS', 'GONNA', 'GONYS', 'GONZO', 'GOODS', 'GOODY', 'GOOEY',\n  'GOOFS', 'GOOFY', 'GOOGS', 'GOOKS', 'GOOKY', 'GOOLY', 'GOONS', 'GOONY', 'GOOPS', 'GOOPY',\n  'GOOSE', 'GOOSY', 'GOPAK', 'GOPIK', 'GORAL', 'GORAS', 'GORED', 'GORES', 'GORGE', 'GONIA',\n  'GORIC', 'GORRA', 'GORSE', 'GORSY', 'GOSHT', 'GOSSE', 'GOTCH', 'GOTHS', 'GOTHY', 'GOTTA',\n  'GOUCH', 'GOUGE', 'GOUKS', 'GOULS', 'GOUMS', 'GOURD', 'GOUTS', 'GOUTY', 'GOWAN', 'GOWDS',\n  'GOWFS', 'GOWKS', 'GOWLS', 'GOWNS', 'GOYIM', 'GOYLE', 'GRAAL', 'GRABS', 'GRACE', 'GRAFT',\n  'GRAIL', 'GRAIN', 'GRAIP', 'GRAMA', 'GRAME', 'GRAMP', 'GRAMS', 'GRAND', 'GRANS', 'GRANT',\n  'GRAPE', 'GRAPH', 'GRAPY', 'GRASP', 'GRASS', 'GRATE', 'GRAVE', 'GRAVS', 'GRAVY', 'GRAYS',\n  'GRAZE', 'GREAT', 'GREBA', 'GREBO', 'GRECE', 'GREED', 'GREEK', 'GREEN', 'GREES', 'GREET',\n  'GREFF', 'GREFT', 'GREIG', 'GREIN', 'GREKS', 'GRENS', 'GRESE', 'GREVE', 'GREWS', 'GREYS',\n  'GRIDE', 'GRIDS', 'GRIEF', 'GRIFF', 'GRIFT', 'GRIGS', 'GRIKE', 'GRILL', 'GRIME', 'GRIMY',\n  'GRIND', 'GRINS', 'GRIOT', 'GRIPE', 'GRIPS', 'GRIPT', 'GRIPY', 'GRISE', 'GRIST', 'GRITH',\n  'GRITS', 'GRIZE', 'GROAN', 'GROAT', 'GROBS', 'GRODY', 'GROGS', 'GROIN', 'GROKS', 'GROMA',\n  'GRONE', 'GROOM', 'GROOF', 'GROOL', 'GROPE', 'GROSS', 'GROSZ', 'GROTS', 'GROTT', 'GROUT',\n  'GROVE', 'GROWL', 'GROWN', 'GROWS', 'GRUBS', 'GRUED', 'GRUEL', 'GRUES', 'GRUFF', 'GRUME',\n  'GRUMP', 'GRUNT', 'GRYCE', 'GRYDE', 'GRYKE', 'GRYPE', 'GRYPT', 'GUACO', 'GUANA', 'GUANO',\n  'GUANS', 'GUARD', 'GUARS', 'GUAVA', 'GUCKS', 'GUCKY', 'GUDES', 'GUESS', 'GUEST', 'GUFFS',\n  'GUGAS', 'GUIDE', 'GUIDS', 'GUILD', 'GUILE', 'GUILT', 'GUIMP', 'GUINS', 'GUIRO', 'GUISE',\n  'GULAG', 'GULAR', 'GULAS', 'GULES', 'GULFS', 'GULFY', 'GULLS', 'GULLY', 'GULPH', 'GULPS',\n  'GULPY', 'GUMBO', 'GUMMA', 'GUMMI', 'GUMPS', 'GUNDY', 'GUNKS', 'GUNKY', 'GUNNY', 'GUPPY',\n  'GURGE', 'GURLS', 'GURLY', 'GURNS', 'GURRY', 'GURSH', 'GURUS', 'GUSHY', 'GUSLA', 'GUSLE',\n  'GUSLI', 'GUSSY', 'GUSTO', 'GUSTS', 'GUSTY', 'GUTSY', 'GUTTA', 'GUTTY', 'GUYOT', 'GUYSE',\n  'GWINE', 'GYALS', 'GYBED', 'GYBES', 'GYELD', 'GYMPS', 'GYNOS', 'GYPPO', 'GYPPY', 'GYPSY',\n  'GYRAL', 'GYRED', 'GYRES', 'GYRON', 'GYROS', 'GYRUS', 'GYTES', 'GYVED', 'GYVES', 'HAARS',\n  'HABIT', 'HABLE', 'HABUS', 'HACEK', 'HACHE', 'HACKS', 'HADAL', 'HADED', 'HADES', 'HADJI',\n  'HADST', 'HAEMS', 'HAETS', 'HAFFS', 'HAFIZ', 'HAFTS', 'HAGGS', 'HAGIO', 'HAHAS', 'HAICK',\n  'HAIKA', 'HAIKS', 'HAIKU', 'HAILS', 'HAINS', 'HAINT', 'HAIRS', 'HAIRY', 'HAITH', 'HAJIS',\n  'HAJJI', 'HAKES', 'HAKUS', 'HALAL', 'HALAR', 'HALAS', 'HALCH', 'HALED', 'HALER', 'HALES',\n  'HALFA', 'HALFS', 'HALID', 'HALLO', 'HALLS', 'HALMA', 'HALME', 'HALOS', 'HALSE', 'HALTS',\n  'HALVA', 'HALVE', 'HAMAL', 'HAMBA', 'HAMEL', 'HAMES', 'HAMMY', 'HAMZA', 'HANAP', 'HANCE',\n  'HANCH', 'HANDS', 'HANDY', 'HANGI', 'HANGS', 'HANKS', 'HANKY', 'HANSA', 'HANSE', 'HANTS',\n  'HAOLE', 'HAOMA', 'HAPAX', 'HAPLY', 'HAPPY', 'HARDS', 'HARDY', 'HARED', 'HARES', 'HARKS',\n  'HARLS', 'HARMS', 'HARNS', 'HAROS', 'HARPS', 'HARPY', 'HARRY', 'HARSH', 'HARTS', 'HASHY',\n  'HASKS', 'HASPS', 'HASTA', 'HASTE', 'HASTY', 'HATCH', 'HATED', 'HATER', 'HATES', 'HAUDS',\n  'HAUFS', 'HAUGH', 'HAULM', 'HAULS', 'HAULT', 'HAUNT', 'HAUSE', 'HAUTE', 'HAVEN', 'HAVER',\n  'HAVES', 'HAVOC', 'HAWED', 'HAWKS', 'HAWMS', 'HAWSE', 'HAYEY', 'HAYLE', 'HAYNE', 'HAYZE',\n  'HAZED', 'HAZEL', 'HAZER', 'HAZES', 'HEADS', 'HEADY', 'HEALD', 'HEALS', 'HEAME', 'HEAPS',\n  'HEAPY', 'HEARD', 'HEARE', 'HEARS', 'HEART', 'HEAST', 'HEATH', 'HEATS', 'HEAVE', 'HEAVY',\n  'HEBES', 'HECHT', 'HECKS', 'HEDER', 'HEDGE', 'HEDGY', 'HEEDS', 'HEEDY', 'HEELS', 'HEEZE',\n  'HEFTE', 'HEFTS', 'HEFTY', 'HEIDS', 'HEIGH', 'HEILS', 'HEIRS', 'HEIST', 'HEJAB', 'HEJRA',\n  'HEKAH', 'HELED', 'HELES', 'HELIO', 'HELIX', 'HELLO', 'HELLS', 'HELMS', 'HELOS', 'HELOT',\n  'HELPS', 'HELVE', 'HEMAL', 'HEMES', 'HEMIC', 'HEMIN', 'HEMPS', 'HEMPY', 'HENCE', 'HENCH',\n  'HENDS', 'HENDY', 'HENGE', 'HENNA', 'HENRY', 'HENTS', 'HEPAR', 'HERBS', 'HERBY', 'HERDS',\n  'HERES', 'HERLS', 'HERMA', 'HERMS', 'HERNS', 'HERON', 'HEROS', 'HERRY', 'HERSE', 'HERTZ',\n  'HERYE', 'HESPS', 'HESTS', 'HETES', 'HETHS', 'HEUCH', 'HEUGH', 'HEVEA', 'HEWED', 'HEWER',\n  'HEWGH', 'HEXAD', 'HEXED', 'HEXES', 'HEXYL', 'HEYED', 'HEYND', 'HIANT', 'HICKS', 'HICKY',\n  'HIDED', 'HIDER', 'HIDES', 'HIEMS', 'HIGHT', 'HIKER', 'HIKES', 'HIKIS', 'HILDA', 'HILCH',\n  'HILDE', 'HILLD', 'HILLS', 'HILLY', 'HILTS', 'HILUM', 'HILUS', 'HIMBO', 'HINDS', 'HINDU',\n  'HINGE', 'HINGS', 'HINKY', 'HINNY', 'HINTS', 'HIOIS', 'HIPPO', 'HIPPY', 'HIRED', 'HIREE',\n  'HIRER', 'HIRES', 'HISSY', 'HISTS', 'HITCH', 'HITHE', 'HIVED', 'HIVER', 'HIVES', 'HIZEN',\n  'HOAED', 'HOAGY', 'HOARS', 'HOARY', 'HOAST', 'HOBBY', 'HOBOS', 'HOCKS', 'HOCUS', 'HODAD',\n  'HODJA', 'HOERS', 'HOGAN', 'HOGGS', 'HOGHS', 'HOICK', 'HOIED', 'HOIKS', 'HOING', 'HOIST',\n  'HOKAS', 'HOKED', 'HOKES', 'HOKEY', 'HOKIS', 'HOKKU', 'HOKUM', 'HOLDS', 'HOLED', 'HOLES',\n  'HOLEY', 'HOLLA', 'HOLLO', 'HOLLY', 'HOLME', 'HOLMS', 'HOLON', 'HOLOS', 'HOLTS', 'HOMAS',\n  'HOMED', 'HOMER', 'HOMES', 'HOMEY', 'HOMIC', 'HOMIE', 'HOMME', 'HOMOS', 'HONAN', 'HONDS',\n  'HONED', 'HONER', 'HONES', 'HONEY', 'HONGI', 'HONGS', 'HONKS', 'HONKY', 'HOODS', 'HOODY',\n  'HOOEY', 'HOOFS', 'HOOKA', 'HOOKS', 'HOOKY', 'HOOLY', 'HOONS', 'HOOPS', 'HOORD', 'HOORS',\n  'HOOSH', 'HOOTS', 'HOOTY', 'HOOVE', 'HOPAK', 'HOPED', 'HOPER', 'HOPES', 'HOPPY', 'HORAH',\n  'HORAL', 'HORAS', 'HORDE', 'HOREB', 'HORIM', 'HORKS', 'HORNS', 'HORNY', 'HORSE', 'HORST',\n  'HORSY', 'HOSED', 'HOSEL', 'HOSEN', 'HOSER', 'HOSES', 'HOSTA', 'HOSTS', 'HOTCH', 'HOTEL',\n  'HOTLY', 'HOTTY', 'HOUFF', 'HOUFS', 'HOUGH', 'HOUND', 'HOUPE', 'HOURD', 'HOURI', 'HOURS',\n  'HOUSE', 'HOUTS', 'HOVEA', 'HOVED', 'HOVEL', 'HOVER', 'HOVES', 'HOWBE', 'HOWDY', 'HOWES',\n  'HOWFF', 'HOWFS', 'HOWKS', 'HOWLS', 'HOWRE', 'HOWSO', 'HOXED', 'HOXES', 'HOYAS', 'HOYED',\n  'HOYLE', 'HUBBY', 'HUCKS', 'HUDNA', 'HUDUD', 'HUERS', 'HUFFS', 'HUFFY', 'HUGGY', 'HUHUS',\n  'HUIAS', 'HULAS', 'HULKS', 'HULKY', 'HULLS', 'HULLY', 'HUMAN', 'HUMAS', 'HUMBO', 'HUMFS',\n  'HUMIC', 'HUMID', 'HUMPS', 'HUMPY', 'HUMUS', 'HUNCH', 'HUNKS', 'HUNKY', 'HUNTS', 'HURDS',\n  'HURLS', 'HURLY', 'HURRA', 'HURRY', 'HURST', 'HURTS', 'HUSHY', 'HUSKS', 'HUSKY', 'HUSOS',\n  'HUSSY', 'HUTCH', 'HUTIA', 'HUZZA', 'HUZZY', 'HWYLS', 'HYADS', 'HYALE', 'HYANG', 'HYANS',\n  'HYDRA', 'HYENA', 'HYENS', 'HYGGE', 'HYING', 'HYKES', 'HYLAS', 'HYLEG', 'HYLES', 'HYLIC',\n  'HYMNS', 'HYNDE', 'HYOID', 'HYPED', 'HYPER', 'HYPES', 'HYPHA', 'HYPOS', 'HYRAX', 'HYSON'\n];\n\n// Dynamic sets that can be updated with custom words\n// Use filtered word sets instead of raw lists\nlet ANSWER_WORD_SET = new Set(getFilteredAnswerWords());\nlet VALID_GUESS_WORD_SET = new Set(getFilteredGuessWords());\n\n// Function to add custom words to the valid guess set\nexport function addCustomWordsToSet(customWords: Set<string>): void {\n  for (const word of customWords) {\n    VALID_GUESS_WORD_SET.add(word.toUpperCase());\n  }\n  console.log(`Added ${customWords.size} custom words to valid guess set`);\n  \n  // Regenerate filtered sets to include custom words\n  refreshWordSets();\n}\n\n// Function to refresh word sets (call after settings change)\nexport function refreshWordSets(): void {\n  ANSWER_WORD_SET = new Set(getFilteredAnswerWords());\n  VALID_GUESS_WORD_SET = new Set(getFilteredGuessWords());\n}\n\n// Function to get current sets (for external access)\nexport function getWordSets(): { answerSet: Set<string>; guessSet: Set<string> } {\n  return {\n    answerSet: ANSWER_WORD_SET,\n    guessSet: VALID_GUESS_WORD_SET\n  };\n}\n\n// Functions for word selection and validation\nexport function getRandomAnswerWord(): string {\n  return ANSWER_WORDS[Math.floor(Math.random() * ANSWER_WORDS.length)];\n}\n\nexport function isValidGuess(word: string): boolean {\n  return VALID_GUESS_WORD_SET.has(word.toUpperCase());\n}\n\nexport function isAnswerWord(word: string): boolean {\n  return ANSWER_WORD_SET.has(word.toUpperCase());\n}\n\nexport function getWordCount(): { answerWords: number; validGuesses: number } {\n  return {\n    answerWords: ANSWER_WORDS.length,\n    validGuesses: VALID_GUESS_WORDS.length\n  };\n}\n\n// Category-based word selection for themed games\nexport const THEMED_WORDS = {\n  NATURE: ['OCEAN', 'RIVER', 'BEACH', 'FIELD', 'WOODS', 'STONE', 'CLOUD', 'STORM', 'GRASS', 'WATER', 'EARTH', 'WINDS', 'WAVES', 'BLOOM', 'FRESH'],\n  EMOTIONS: ['HAPPY', 'BRAVE', 'PROUD', 'LOVED', 'EAGER', 'MERRY', 'SWEET', 'SMILE', 'PEACE', 'GRACE', 'CHARM', 'TRUST', 'PRIDE', 'DREAM', 'HOPES'],\n  ACTIONS: ['DANCE', 'CLIMB', 'WRITE', 'PAINT', 'BUILD', 'LEARN', 'TEACH', 'LAUGH', 'REACH', 'SWIFT', 'SPEED', 'FLASH', 'SPARK', 'SHINE', 'GLIDE'],\n  OBJECTS: ['CHAIR', 'TABLE', 'BOOKS', 'PHONE', 'WATCH', 'LIGHT', 'MUSIC', 'GLASS', 'PAPER', 'TOOLS', 'KNIFE', 'SPOON', 'PLATE', 'BOWL', 'FRAME']\n};\n\nexport function getThemedWord(theme: keyof typeof THEMED_WORDS): string {\n  const words = THEMED_WORDS[theme];\n  return words[Math.floor(Math.random() * words.length)];\n}","size_bytes":69825},"client/src/components/word-admin-panel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { CheckCircle, XCircle, Plus, Clock } from 'lucide-react';\n\ninterface PendingWord {\n  word: string;\n}\n\nexport function WordAdminPanel() {\n  const [newWord, setNewWord] = useState('');\n  const [pendingWords, setPendingWords] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  // Load pending words on component mount\n  useEffect(() => {\n    loadPendingWords();\n  }, []);\n\n  const loadPendingWords = async () => {\n    try {\n      const response = await fetch('/api/admin/words/pending');\n      const data = await response.json();\n      setPendingWords(data.words || []);\n    } catch (error) {\n      console.error('Failed to load pending words:', error);\n    }\n  };\n\n  const addWord = async () => {\n    if (!newWord.trim() || newWord.length !== 5) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid word\",\n        description: \"Please enter a 5-letter word.\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/admin/words', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ word: newWord.trim() })\n      });\n\n      const data = await response.json();\n      \n      if (response.ok) {\n        toast({\n          title: \"Word added!\",\n          description: `\"${data.word}\" is now valid for guesses.`\n        });\n        setNewWord('');\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Failed to add word\",\n          description: data.message\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to add word. Please try again.\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const approveWord = async (word: string) => {\n    try {\n      const response = await fetch('/api/admin/words/approve', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ word })\n      });\n\n      const data = await response.json();\n      \n      if (response.ok) {\n        toast({\n          title: \"Word approved!\",\n          description: `\"${word}\" has been added to the word list.`\n        });\n        setPendingWords(prev => prev.filter(w => w !== word));\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Failed to approve\",\n          description: data.message\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to approve word.\"\n      });\n    }\n  };\n\n  const rejectWord = async (word: string) => {\n    try {\n      const response = await fetch('/api/admin/words/reject', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ word })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Word rejected\",\n          description: `\"${word}\" has been removed from pending list.`\n        });\n        setPendingWords(prev => prev.filter(w => w !== word));\n      } else {\n        const data = await response.json();\n        toast({\n          variant: \"destructive\",\n          title: \"Failed to reject\",\n          description: data.message\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to reject word.\"\n      });\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      addWord();\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"word-admin-panel\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Plus className=\"h-5 w-5\" />\n            Add New Word\n          </CardTitle>\n          <CardDescription>\n            Add words directly to the valid guess list. Words will be available immediately.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Enter 5-letter word\"\n              value={newWord}\n              onChange={(e) => setNewWord(e.target.value.slice(0, 5))}\n              onKeyPress={handleKeyPress}\n              className=\"flex-1\"\n              data-testid=\"input-new-word\"\n            />\n            <Button \n              onClick={addWord} \n              disabled={isLoading || newWord.length !== 5}\n              data-testid=\"button-add-word\"\n            >\n              {isLoading ? 'Adding...' : 'Add'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {pendingWords.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Pending Word Suggestions\n              <Badge variant=\"secondary\">{pendingWords.length}</Badge>\n            </CardTitle>\n            <CardDescription>\n              Words suggested by players that need approval.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {pendingWords.map((word) => (\n                <div key={word} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <span className=\"font-mono text-lg font-semibold\" data-testid={`pending-word-${word}`}>\n                    {word}\n                  </span>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => approveWord(word)}\n                      className=\"text-green-600 hover:text-green-700\"\n                      data-testid={`button-approve-${word}`}\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => rejectWord(word)}\n                      className=\"text-red-600 hover:text-red-700\"\n                      data-testid={`button-reject-${word}`}\n                    >\n                      <XCircle className=\"h-4 w-4 mr-1\" />\n                      Reject\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Custom Word System</CardTitle>\n          <CardDescription>\n            Words are stored in <code>custom_words.txt</code> and merged with the built-in dictionary.\n            All lookups remain O(1) performance with Set-based validation.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-sm text-muted-foreground space-y-2\">\n            <p>• Words are normalized to uppercase internally</p>\n            <p>• Custom words file: <code>custom_words.txt</code> (one word per line)</p>\n            <p>• Pending suggestions: <code>pending_words.txt</code></p>\n            <p>• All changes take effect immediately</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7748},"client/src/components/word-suggestion-prompt.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { Lightbulb } from 'lucide-react';\n\ninterface WordSuggestionPromptProps {\n  word: string;\n  onClose: () => void;\n}\n\nexport function WordSuggestionPrompt({ word, onClose }: WordSuggestionPromptProps) {\n  const { toast } = useToast();\n\n  const suggestWord = async () => {\n    try {\n      const response = await fetch('/api/admin/words/suggest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ word })\n      });\n\n      const data = await response.json();\n      \n      if (response.ok) {\n        toast({\n          title: \"Word suggestion sent!\",\n          description: `\"${word.toUpperCase()}\" has been added to the review queue.`\n        });\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Failed to suggest word\",\n          description: data.message\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to send word suggestion.\"\n      });\n    } finally {\n      onClose();\n    }\n  };\n\n  return (\n    <Alert className=\"border-orange-200 bg-orange-50\" data-testid=\"word-suggestion-prompt\">\n      <Lightbulb className=\"h-4 w-4\" />\n      <AlertDescription className=\"flex items-center justify-between\">\n        <span>\n          \"<strong>{word.toUpperCase()}</strong>\" isn't recognized. Want to suggest it as a valid word?\n        </span>\n        <div className=\"flex gap-2 ml-4\">\n          <Button \n            size=\"sm\" \n            onClick={suggestWord}\n            data-testid=\"button-suggest-word\"\n          >\n            Suggest Word\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={onClose}\n            data-testid=\"button-dismiss-suggestion\"\n          >\n            Dismiss\n          </Button>\n        </div>\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":2102},"client/src/pages/admin.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Settings } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\n\nexport default function AdminPage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-100 via-blue-50 to-green-100 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-6 w-6\" />\n              Word Pop! Admin Panel\n            </CardTitle>\n            <CardDescription>\n              Admin panel has been simplified - now using official Wordle words exclusively (2,309 answers + 10,657 valid guesses).\n              Custom word management is no longer available.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Word Pop! now uses the official NYT Wordle word list for the most authentic experience.\n              </p>\n              <Link href=\"/\">\n                <Button>Return to Home</Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1371},"server/custom-word-manager.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\n\nconst CUSTOM_WORDS_FILE = path.join(process.cwd(), 'custom_words.txt');\nconst PENDING_WORDS_FILE = path.join(process.cwd(), 'pending_words.txt');\n\nlet customWordsCache = new Set<string>();\nlet pendingWordsCache = new Set<string>();\n\n// Load custom words from file\nexport async function loadCustomWords(): Promise<Set<string>> {\n  try {\n    const content = await fs.readFile(CUSTOM_WORDS_FILE, 'utf-8');\n    const words = content\n      .split('\\n')\n      .map(word => word.trim().toUpperCase())\n      .filter(word => word.length === 5 && /^[A-Z]+$/.test(word));\n    \n    customWordsCache = new Set(words);\n    console.log(`Loaded ${customWordsCache.size} custom words`);\n    return customWordsCache;\n  } catch (error) {\n    console.log('No custom words file found, creating empty one');\n    await fs.writeFile(CUSTOM_WORDS_FILE, '');\n    customWordsCache = new Set();\n    return customWordsCache;\n  }\n}\n\n// Load pending words from file\nexport async function loadPendingWords(): Promise<Set<string>> {\n  try {\n    const content = await fs.readFile(PENDING_WORDS_FILE, 'utf-8');\n    const words = content\n      .split('\\n')\n      .map(word => word.trim().toUpperCase())\n      .filter(word => word.length === 5 && /^[A-Z]+$/.test(word));\n    \n    pendingWordsCache = new Set(words);\n    return pendingWordsCache;\n  } catch (error) {\n    await fs.writeFile(PENDING_WORDS_FILE, '');\n    pendingWordsCache = new Set();\n    return pendingWordsCache;\n  }\n}\n\n// Add word to custom words file\nexport async function addCustomWord(word: string): Promise<boolean> {\n  const normalizedWord = word.trim().toUpperCase();\n  \n  if (normalizedWord.length !== 5 || !/^[A-Z]+$/.test(normalizedWord)) {\n    return false;\n  }\n\n  if (customWordsCache.has(normalizedWord)) {\n    return true; // Already exists\n  }\n\n  customWordsCache.add(normalizedWord);\n  \n  try {\n    const words = Array.from(customWordsCache).sort().join('\\n');\n    await fs.writeFile(CUSTOM_WORDS_FILE, words + '\\n');\n    console.log(`Added custom word: ${normalizedWord}`);\n    return true;\n  } catch (error) {\n    console.error('Error adding custom word:', error);\n    customWordsCache.delete(normalizedWord);\n    return false;\n  }\n}\n\n// Add word to pending review list\nexport async function addPendingWord(word: string): Promise<boolean> {\n  const normalizedWord = word.trim().toUpperCase();\n  \n  if (normalizedWord.length !== 5 || !/^[A-Z]+$/.test(normalizedWord)) {\n    return false;\n  }\n\n  if (pendingWordsCache.has(normalizedWord) || customWordsCache.has(normalizedWord)) {\n    return true; // Already exists\n  }\n\n  pendingWordsCache.add(normalizedWord);\n  \n  try {\n    const words = Array.from(pendingWordsCache).sort().join('\\n');\n    await fs.writeFile(PENDING_WORDS_FILE, words + '\\n');\n    console.log(`Added pending word: ${normalizedWord}`);\n    return true;\n  } catch (error) {\n    console.error('Error adding pending word:', error);\n    pendingWordsCache.delete(normalizedWord);\n    return false;\n  }\n}\n\n// Get all pending words\nexport function getPendingWords(): string[] {\n  return Array.from(pendingWordsCache).sort();\n}\n\n// Approve pending word (move to custom words)\nexport async function approvePendingWord(word: string): Promise<boolean> {\n  const normalizedWord = word.trim().toUpperCase();\n  \n  if (!pendingWordsCache.has(normalizedWord)) {\n    return false;\n  }\n\n  const added = await addCustomWord(normalizedWord);\n  if (added) {\n    pendingWordsCache.delete(normalizedWord);\n    const words = Array.from(pendingWordsCache).sort().join('\\n');\n    await fs.writeFile(PENDING_WORDS_FILE, words + '\\n');\n    return true;\n  }\n  \n  return false;\n}\n\n// Reject pending word (remove from pending)\nexport async function rejectPendingWord(word: string): Promise<boolean> {\n  const normalizedWord = word.trim().toUpperCase();\n  \n  if (!pendingWordsCache.has(normalizedWord)) {\n    return false;\n  }\n\n  pendingWordsCache.delete(normalizedWord);\n  const words = Array.from(pendingWordsCache).sort().join('\\n');\n  await fs.writeFile(PENDING_WORDS_FILE, words + '\\n');\n  return true;\n}\n\n// Get all custom words\nexport function getCustomWords(): Set<string> {\n  return new Set(customWordsCache);\n}\n\n// Initialize - load words on startup\nexport async function initializeCustomWords(): Promise<void> {\n  await loadCustomWords();\n  await loadPendingWords();\n}","size_bytes":4368},"client/src/components/font-store-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { X, Coins, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AdManager } from \"./ad-manager\";\n\nexport interface Font {\n  id: string;\n  name: string;\n  family: string;\n  fallback: string;\n  price: number;\n  category: 'serif' | 'sans' | 'mono' | 'playful' | 'fun';\n  googleFont?: string;\n}\n\nexport interface ColorOption {\n  id: string;\n  name: string;\n  value: string;\n  price: number;\n}\n\nexport interface BackgroundOption {\n  id: string;\n  name: string;\n  value: string;\n  type: 'gradient' | 'solid' | 'pattern';\n  price: number;\n}\n\nconst AVAILABLE_FONTS: Font[] = [\n  {\n    id: 'default',\n    name: 'Classic',\n    family: 'Inter',\n    fallback: 'system-ui, sans-serif',\n    price: 0,\n    category: 'sans'\n  },\n  \n  // SERIF FONTS (15 total)\n  {\n    id: 'playfair',\n    name: 'Elegant',\n    family: 'Playfair Display',\n    fallback: 'Georgia, serif',\n    price: 1500,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&display=swap'\n  },\n  {\n    id: 'merriweather',\n    name: 'Reader',\n    family: 'Merriweather',\n    fallback: 'Times, serif',\n    price: 1200,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Merriweather:wght@300;400;700&display=swap'\n  },\n  {\n    id: 'roboto-slab',\n    name: 'Strong',\n    family: 'Roboto Slab',\n    fallback: 'Georgia, serif',\n    price: 1800,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300;400;500;700&display=swap'\n  },\n  {\n    id: 'crimson-text',\n    name: 'Literary',\n    family: 'Crimson Text',\n    fallback: 'Times, serif',\n    price: 1600,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Crimson+Text:wght@400;600;700&display=swap'\n  },\n  {\n    id: 'libre-baskerville',\n    name: 'Classic Book',\n    family: 'Libre Baskerville',\n    fallback: 'Times, serif',\n    price: 1400,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&display=swap'\n  },\n  {\n    id: 'lora',\n    name: 'Scholarly',\n    family: 'Lora',\n    fallback: 'Times, serif',\n    price: 1300,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Lora:wght@400;500;600;700&display=swap'\n  },\n  {\n    id: 'cormorant-garamond',\n    name: 'Royal',\n    family: 'Cormorant Garamond',\n    fallback: 'Times, serif',\n    price: 2000,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'eb-garamond',\n    name: 'Vintage',\n    family: 'EB Garamond',\n    fallback: 'Times, serif',\n    price: 1700,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=EB+Garamond:wght@400;500;600;700&display=swap'\n  },\n  {\n    id: 'domine',\n    name: 'Bold Serif',\n    family: 'Domine',\n    fallback: 'Times, serif',\n    price: 1600,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Domine:wght@400;500;600;700&display=swap'\n  },\n  {\n    id: 'spectral',\n    name: 'Magazine',\n    family: 'Spectral',\n    fallback: 'Times, serif',\n    price: 1900,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Spectral:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'bitter',\n    name: 'Modern Slab',\n    family: 'Bitter',\n    fallback: 'Times, serif',\n    price: 1500,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bitter:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'zilla-slab',\n    name: 'Tech Slab',\n    family: 'Zilla Slab',\n    fallback: 'Times, serif',\n    price: 1800,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Zilla+Slab:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'alegreya',\n    name: 'Warm Serif',\n    family: 'Alegreya',\n    fallback: 'Times, serif',\n    price: 1400,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Alegreya:wght@400;500;700&display=swap'\n  },\n  {\n    id: 'frank-ruhl-libre',\n    name: 'Hebrew Style',\n    family: 'Frank Ruhl Libre',\n    fallback: 'Times, serif',\n    price: 2100,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Frank+Ruhl+Libre:wght@300;400;500;700&display=swap'\n  },\n  {\n    id: 'source-serif-pro',\n    name: 'Code Serif',\n    family: 'Source Serif Pro',\n    fallback: 'Times, serif',\n    price: 1700,\n    category: 'serif',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Source+Serif+Pro:wght@300;400;600;700&display=swap'\n  },\n\n  // SANS SERIF FONTS (15 total)\n  {\n    id: 'poppins',\n    name: 'Modern',\n    family: 'Poppins',\n    fallback: 'Arial, sans-serif',\n    price: 1400,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap'\n  },\n  {\n    id: 'space-grotesk',\n    name: 'Futuristic',\n    family: 'Space Grotesk',\n    fallback: 'Arial, sans-serif',\n    price: 2200,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600&display=swap'\n  },\n  {\n    id: 'nunito',\n    name: 'Friendly',\n    family: 'Nunito',\n    fallback: 'Arial, sans-serif',\n    price: 1300,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&display=swap'\n  },\n  {\n    id: 'montserrat',\n    name: 'Clean',\n    family: 'Montserrat',\n    fallback: 'Arial, sans-serif',\n    price: 1500,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&display=swap'\n  },\n  {\n    id: 'open-sans',\n    name: 'Professional',\n    family: 'Open Sans',\n    fallback: 'Arial, sans-serif',\n    price: 1200,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'raleway',\n    name: 'Elegant Sans',\n    family: 'Raleway',\n    fallback: 'Arial, sans-serif',\n    price: 1600,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Raleway:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'rubik',\n    name: 'Rounded Sans',\n    family: 'Rubik',\n    fallback: 'Arial, sans-serif',\n    price: 1400,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'work-sans',\n    name: 'Work Style',\n    family: 'Work Sans',\n    fallback: 'Arial, sans-serif',\n    price: 1300,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Work+Sans:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'dm-sans',\n    name: 'Digital',\n    family: 'DM Sans',\n    fallback: 'Arial, sans-serif',\n    price: 1800,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap'\n  },\n  {\n    id: 'inter',\n    name: 'Interface',\n    family: 'Inter',\n    fallback: 'Arial, sans-serif',\n    price: 1500,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'lato',\n    name: 'Humanist',\n    family: 'Lato',\n    fallback: 'Arial, sans-serif',\n    price: 1200,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap'\n  },\n  {\n    id: 'source-sans-pro',\n    name: 'Adobe Sans',\n    family: 'Source Sans Pro',\n    fallback: 'Arial, sans-serif',\n    price: 1400,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400;600;700&display=swap'\n  },\n  {\n    id: 'archivo',\n    name: 'Archive',\n    family: 'Archivo',\n    fallback: 'Arial, sans-serif',\n    price: 1700,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Archivo:wght@400;500;600;700&display=swap'\n  },\n  {\n    id: 'manrope',\n    name: 'Modern Geometric',\n    family: 'Manrope',\n    fallback: 'Arial, sans-serif',\n    price: 1900,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Manrope:wght@300;400;500;600;700&display=swap'\n  },\n  {\n    id: 'public-sans',\n    name: 'Government',\n    family: 'Public Sans',\n    fallback: 'Arial, sans-serif',\n    price: 1600,\n    category: 'sans',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Public+Sans:wght@300;400;500;600;700&display=swap'\n  },\n\n  // MONOSPACE FONTS (8 total)\n  {\n    id: 'fira-code',\n    name: 'Code Style',\n    family: 'Fira Code',\n    fallback: 'Monaco, monospace',\n    price: 1700,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500&display=swap'\n  },\n  {\n    id: 'jetbrains-mono',\n    name: 'Terminal',\n    family: 'JetBrains Mono',\n    fallback: 'Courier, monospace',\n    price: 1900,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500&display=swap'\n  },\n  {\n    id: 'source-code-pro',\n    name: 'Developer',\n    family: 'Source Code Pro',\n    fallback: 'Courier, monospace',\n    price: 1600,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@300;400;500&display=swap'\n  },\n  {\n    id: 'roboto-mono',\n    name: 'Robot Code',\n    family: 'Roboto Mono',\n    fallback: 'Courier, monospace',\n    price: 1500,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300;400;500;700&display=swap'\n  },\n  {\n    id: 'space-mono',\n    name: 'Space Code',\n    family: 'Space Mono',\n    fallback: 'Courier, monospace',\n    price: 2000,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&display=swap'\n  },\n  {\n    id: 'inconsolata',\n    name: 'Programmer',\n    family: 'Inconsolata',\n    fallback: 'Courier, monospace',\n    price: 1400,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Inconsolata:wght@300;400;500;700&display=swap'\n  },\n  {\n    id: 'courier-prime',\n    name: 'Typewriter',\n    family: 'Courier Prime',\n    fallback: 'Courier, monospace',\n    price: 1800,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&display=swap'\n  },\n  {\n    id: 'ubuntu-mono',\n    name: 'Linux Code',\n    family: 'Ubuntu Mono',\n    fallback: 'Courier, monospace',\n    price: 1600,\n    category: 'mono',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Ubuntu+Mono:wght@400;700&display=swap'\n  },\n\n  // PLAYFUL FONTS (10 total)\n  {\n    id: 'comfortaa',\n    name: 'Rounded',\n    family: 'Comfortaa',\n    fallback: 'Arial, sans-serif',\n    price: 2000,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;600&display=swap'\n  },\n  {\n    id: 'fredoka',\n    name: 'Bubbly',\n    family: 'Fredoka',\n    fallback: 'Arial, sans-serif',\n    price: 2300,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600&display=swap'\n  },\n  {\n    id: 'quicksand',\n    name: 'Smooth',\n    family: 'Quicksand',\n    fallback: 'Arial, sans-serif',\n    price: 1800,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600&display=swap'\n  },\n  {\n    id: 'varela-round',\n    name: 'Circle',\n    family: 'Varela Round',\n    fallback: 'Arial, sans-serif',\n    price: 1700,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Varela+Round&display=swap'\n  },\n  {\n    id: 'baloo-2',\n    name: 'Friendly Bear',\n    family: 'Baloo 2',\n    fallback: 'Arial, sans-serif',\n    price: 2100,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;500;600;700&display=swap'\n  },\n  {\n    id: 'nunito-sans',\n    name: 'Soft Sans',\n    family: 'Nunito Sans',\n    fallback: 'Arial, sans-serif',\n    price: 1600,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700&display=swap'\n  },\n  {\n    id: 'cabin',\n    name: 'Cozy',\n    family: 'Cabin',\n    fallback: 'Arial, sans-serif',\n    price: 1500,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Cabin:wght@400;500;600;700&display=swap'\n  },\n  {\n    id: 'righteous',\n    name: 'Bold Play',\n    family: 'Righteous',\n    fallback: 'Arial, sans-serif',\n    price: 2400,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Righteous&display=swap'\n  },\n  {\n    id: 'pacifico',\n    name: 'Surf Style',\n    family: 'Pacifico',\n    fallback: 'Arial, sans-serif',\n    price: 2600,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Pacifico&display=swap'\n  },\n  {\n    id: 'indie-flower',\n    name: 'Garden',\n    family: 'Indie Flower',\n    fallback: 'Arial, sans-serif',\n    price: 2200,\n    category: 'playful',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap'\n  },\n\n  // FUN FONTS (25 total - expanded collection!)\n  {\n    id: 'bangers',\n    name: 'Comic Book',\n    family: 'Bangers',\n    fallback: 'Arial, sans-serif',\n    price: 3200,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bangers&display=swap'\n  },\n  {\n    id: 'luckiest-guy',\n    name: 'Bold Fun',\n    family: 'Luckiest Guy',\n    fallback: 'Arial, sans-serif',\n    price: 3000,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap'\n  },\n  {\n    id: 'amatic-sc',\n    name: 'Hand Drawn',\n    family: 'Amatic SC',\n    fallback: 'Arial, sans-serif',\n    price: 2800,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Amatic+SC:wght@400;700&display=swap'\n  },\n  {\n    id: 'bungee',\n    name: 'Street Art',\n    family: 'Bungee',\n    fallback: 'Arial, sans-serif',\n    price: 3500,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bungee&display=swap'\n  },\n  {\n    id: 'creepster',\n    name: 'Spooky',\n    family: 'Creepster',\n    fallback: 'Arial, sans-serif',\n    price: 4000,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Creepster&display=swap'\n  },\n  {\n    id: 'kalam',\n    name: 'Handwriting',\n    family: 'Kalam',\n    fallback: 'Arial, sans-serif',\n    price: 2500,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap'\n  },\n  {\n    id: 'permanent-marker',\n    name: 'Marker Pen',\n    family: 'Permanent Marker',\n    fallback: 'Arial, sans-serif',\n    price: 2900,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap'\n  },\n  {\n    id: 'press-start-2p',\n    name: 'Pixel Game',\n    family: 'Press Start 2P',\n    fallback: 'Arial, sans-serif',\n    price: 3800,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap'\n  },\n  {\n    id: 'shadows-into-light',\n    name: 'Shadow Script',\n    family: 'Shadows Into Light',\n    fallback: 'Arial, sans-serif',\n    price: 2700,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Shadows+Into+Light&display=swap'\n  },\n  {\n    id: 'orbitron',\n    name: 'Sci-Fi',\n    family: 'Orbitron',\n    fallback: 'Arial, sans-serif',\n    price: 3600,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&display=swap'\n  },\n  {\n    id: 'cabin-sketch',\n    name: 'Sketch',\n    family: 'Cabin Sketch',\n    fallback: 'Arial, sans-serif',\n    price: 3100,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Cabin+Sketch:wght@400;700&display=swap'\n  },\n  {\n    id: 'special-elite',\n    name: 'Vintage Type',\n    family: 'Special Elite',\n    fallback: 'Arial, sans-serif',\n    price: 3300,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Special+Elite&display=swap'\n  },\n  // NEW FUN FONTS ADDITIONS\n  {\n    id: 'fredoka-one',\n    name: 'Super Bubbly',\n    family: 'Fredoka One',\n    fallback: 'Arial, sans-serif',\n    price: 3400,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap'\n  },\n  {\n    id: 'ribeye',\n    name: 'Meat Lover',\n    family: 'Ribeye',\n    fallback: 'Arial, sans-serif',\n    price: 4200,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Ribeye&display=swap'\n  },\n  {\n    id: 'monoton',\n    name: 'Neon Sign',\n    family: 'Monoton',\n    fallback: 'Arial, sans-serif',\n    price: 4500,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Monoton&display=swap'\n  },\n  {\n    id: 'jolly-lodger',\n    name: 'Pirate Ship',\n    family: 'Jolly Lodger',\n    fallback: 'Arial, sans-serif',\n    price: 3700,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Jolly+Lodger&display=swap'\n  },\n  {\n    id: 'bungee-shade',\n    name: 'Street Shadow',\n    family: 'Bungee Shade',\n    fallback: 'Arial, sans-serif',\n    price: 4000,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bungee+Shade&display=swap'\n  },\n  {\n    id: 'nosifer',\n    name: 'Horror Movie',\n    family: 'Nosifer',\n    fallback: 'Arial, sans-serif',\n    price: 4300,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Nosifer&display=swap'\n  },\n  {\n    id: 'bungee-outline',\n    name: 'Hollow Block',\n    family: 'Bungee Outline',\n    fallback: 'Arial, sans-serif',\n    price: 3900,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bungee+Outline&display=swap'\n  },\n  {\n    id: 'shrikhand',\n    name: 'Bollywood',\n    family: 'Shrikhand',\n    fallback: 'Arial, sans-serif',\n    price: 3800,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Shrikhand&display=swap'\n  },\n  {\n    id: 'modak',\n    name: 'Party Balloon',\n    family: 'Modak',\n    fallback: 'Arial, sans-serif',\n    price: 4100,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Modak&display=swap'\n  },\n  {\n    id: 'fascinate',\n    name: 'Carnival',\n    family: 'Fascinate',\n    fallback: 'Arial, sans-serif',\n    price: 4400,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Fascinate&display=swap'\n  },\n  {\n    id: 'fascinate-inline',\n    name: 'Circus Tent',\n    family: 'Fascinate Inline',\n    fallback: 'Arial, sans-serif',\n    price: 4600,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Fascinate+Inline&display=swap'\n  },\n  {\n    id: 'griffy',\n    name: 'Medieval Quest',\n    family: 'Griffy',\n    fallback: 'Arial, sans-serif',\n    price: 3600,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Griffy&display=swap'\n  },\n  {\n    id: 'butcherman',\n    name: 'Zombie Hunter',\n    family: 'Butcherman',\n    fallback: 'Arial, sans-serif',\n    price: 4700,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Butcherman&display=swap'\n  },\n  // EVEN MORE FUN FONTS!\n  {\n    id: 'chela-one',\n    name: 'Retro Diner',\n    family: 'Chela One',\n    fallback: 'Arial, sans-serif',\n    price: 3800,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Chela+One&display=swap'\n  },\n  {\n    id: 'lacquer',\n    name: 'Graffiti Tag',\n    family: 'Lacquer',\n    fallback: 'Arial, sans-serif',\n    price: 4200,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Lacquer&display=swap'\n  },\n  {\n    id: 'squada-one',\n    name: 'Robot Factory',\n    family: 'Squada One',\n    fallback: 'Arial, sans-serif',\n    price: 3900,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Squada+One&display=swap'\n  },\n  {\n    id: 'rye',\n    name: 'Wild West',\n    family: 'Rye',\n    fallback: 'Arial, sans-serif',\n    price: 4300,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Rye&display=swap'\n  },\n  {\n    id: 'metal-mania',\n    name: 'Heavy Metal',\n    family: 'Metal Mania',\n    fallback: 'Arial, sans-serif',\n    price: 4500,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Metal+Mania&display=swap'\n  },\n  {\n    id: 'wallpoet',\n    name: 'Street Stencil',\n    family: 'Wallpoet',\n    fallback: 'Arial, sans-serif',\n    price: 4100,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Wallpoet&display=swap'\n  },\n  {\n    id: 'unlock',\n    name: 'Digital Matrix',\n    family: 'Unlock',\n    fallback: 'Arial, sans-serif',\n    price: 4400,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Unlock&display=swap'\n  },\n  {\n    id: 'rammetto-one',\n    name: 'Action Hero',\n    family: 'Rammetto One',\n    fallback: 'Arial, sans-serif',\n    price: 4000,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Rammetto+One&display=swap'\n  },\n  {\n    id: 'passion-one',\n    name: 'Love Letter',\n    family: 'Passion One',\n    fallback: 'Arial, sans-serif',\n    price: 3700,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Passion+One:wght@400;700&display=swap'\n  },\n  {\n    id: 'diplomata-sc',\n    name: 'Royal Decree',\n    family: 'Diplomata SC',\n    fallback: 'Arial, sans-serif',\n    price: 4600,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Diplomata+SC&display=swap'\n  },\n  {\n    id: 'new-rocker',\n    name: 'Punk Rock',\n    family: 'New Rocker',\n    fallback: 'Arial, sans-serif',\n    price: 4300,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=New+Rocker&display=swap'\n  },\n  {\n    id: 'pirata-one',\n    name: 'Treasure Map',\n    family: 'Pirata One',\n    fallback: 'Arial, sans-serif',\n    price: 3900,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Pirata+One&display=swap'\n  },\n  {\n    id: 'eater',\n    name: 'Zombie Bite',\n    family: 'Eater',\n    fallback: 'Arial, sans-serif',\n    price: 4800,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Eater&display=swap'\n  },\n  {\n    id: 'iceberg',\n    name: 'Arctic Freeze',\n    family: 'Iceberg',\n    fallback: 'Arial, sans-serif',\n    price: 3600,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Iceberg&display=swap'\n  },\n  {\n    id: 'trade-winds',\n    name: 'Tropical Breeze',\n    family: 'Trade Winds',\n    fallback: 'Arial, sans-serif',\n    price: 3800,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Trade+Winds&display=swap'\n  },\n  {\n    id: 'atomic-age',\n    name: 'Space Age',\n    family: 'Atomic Age',\n    fallback: 'Arial, sans-serif',\n    price: 4400,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Atomic+Age&display=swap'\n  },\n  {\n    id: 'bowlby-one',\n    name: 'Cartoon Bubble',\n    family: 'Bowlby One',\n    fallback: 'Arial, sans-serif',\n    price: 3500,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bowlby+One&display=swap'\n  },\n  {\n    id: 'bungee-hairline',\n    name: 'Wire Frame',\n    family: 'Bungee Hairline',\n    fallback: 'Arial, sans-serif',\n    price: 4200,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Bungee+Hairline&display=swap'\n  },\n  {\n    id: 'faster-one',\n    name: 'Speed Racer',\n    family: 'Faster One',\n    fallback: 'Arial, sans-serif',\n    price: 4100,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Faster+One&display=swap'\n  },\n  {\n    id: 'stalinist-one',\n    name: 'Soviet Era',\n    family: 'Stalinist One',\n    fallback: 'Arial, sans-serif',\n    price: 4500,\n    category: 'fun',\n    googleFont: 'https://fonts.googleapis.com/css2?family=Stalinist+One&display=swap'\n  }\n];\n\nconst AVAILABLE_COLORS: ColorOption[] = [\n  { id: 'default', name: 'Black', value: '#000000', price: 0 },\n  { id: 'white', name: 'White', value: '#ffffff', price: 1000 },\n  { id: 'yellow', name: 'Sunny Yellow', value: '#fbbf24', price: 1200 },\n  { id: 'purple', name: 'Royal Purple', value: '#8b5cf6', price: 1600 },\n  { id: 'cyan', name: 'Electric Cyan', value: '#06b6d4', price: 1600 },\n  { id: 'red', name: 'Crimson Red', value: '#ef4444', price: 1400 },\n  { id: 'green', name: 'Forest Green', value: '#10b981', price: 1400 },\n  { id: 'orange', name: 'Sunset Orange', value: '#f97316', price: 1300 },\n  { id: 'pink', name: 'Hot Pink', value: '#ec4899', price: 1800 },\n  { id: 'blue', name: 'Ocean Blue', value: '#3b82f6', price: 1500 },\n  { id: 'gold', name: 'Golden', value: '#d97706', price: 2400 },\n  { id: 'silver', name: 'Silver', value: '#6b7280', price: 2200 }\n];\n\nconst AVAILABLE_BACKGROUNDS: BackgroundOption[] = [\n  { id: 'default', name: 'Classic', value: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', type: 'gradient', price: 0 },\n  // Solid backgrounds\n  { id: 'midnight', name: 'Midnight Black', value: '#1a1a2e', type: 'solid', price: 1500 },\n  { id: 'ocean', name: 'Deep Ocean', value: '#0f3460', type: 'solid', price: 1800 },\n  { id: 'forest', name: 'Forest Night', value: '#16423c', type: 'solid', price: 1600 },\n  { id: 'wine', name: 'Wine Red', value: '#722f37', type: 'solid', price: 2000 },\n  // Gradient backgrounds\n  { id: 'sunset', name: 'Sunset Paradise', value: 'linear-gradient(135deg, #ff6b6b 0%, #ffa726 50%, #ff5722 100%)', type: 'gradient', price: 2500 },\n  { id: 'aurora', name: 'Aurora Borealis', value: 'linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%)', type: 'gradient', price: 3500 },\n  { id: 'galaxy', name: 'Galaxy Dreams', value: 'linear-gradient(135deg, #000051 0%, #1e0845 25%, #5b2c6f 50%, #a17c6b 75%, #c9b037 100%)', type: 'gradient', price: 4000 },\n  { id: 'rainbow', name: 'Rainbow Burst', value: 'linear-gradient(135deg, #ff0000 0%, #ff8c00 14%, #ffd700 28%, #adff2f 42%, #00ff7f 57%, #00bfff 71%, #8a2be2 85%, #ff1493 100%)', type: 'gradient', price: 5000 },\n  { id: 'cyberpunk', name: 'Cyberpunk Neon', value: 'linear-gradient(135deg, #0f0f23 0%, #ff006e 25%, #8338ec 50%, #3a86ff 75%, #06ffa5 100%)', type: 'gradient', price: 4500 },\n  { id: 'pastel', name: 'Pastel Dreams', value: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 25%, #ffecd2 50%, #c3cfe2 75%, #a8e6cf 100%)', type: 'gradient', price: 3000 },\n  { id: 'fire', name: 'Fire Blaze', value: 'linear-gradient(135deg, #ff9a9e 0%, #fecfef 25%, #fecfef 50%, #ff6b6b 75%, #ff4757 100%)', type: 'gradient', price: 3800 },\n  { id: 'ice', name: 'Ice Crystal', value: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 25%, #d299c2 50%, #fef9d7 75%, #84fab0 100%)', type: 'gradient', price: 3200 }\n];\n\ninterface FontStoreState {\n  coins: number;\n  ownedFonts: string[];\n  equippedFont: string;\n  ownedColors: string[];\n  equippedColor: string;\n  ownedBackgrounds: string[];\n  equippedBackground: string;\n}\n\nconst DEFAULT_STATE: FontStoreState = {\n  coins: 1500, // Start with enough to buy some fonts and colors\n  ownedFonts: ['default'],\n  equippedFont: 'default',\n  ownedColors: ['default'],\n  equippedColor: 'default',\n  ownedBackgrounds: ['default'],\n  equippedBackground: 'default'\n};\n\ninterface FontStoreModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function FontStoreModal({ isOpen, onClose }: FontStoreModalProps) {\n  const { toast } = useToast();\n  const [state, setState] = useState<FontStoreState>(DEFAULT_STATE);\n  const [loadedFonts, setLoadedFonts] = useState<Set<string>>(new Set(['default']));\n  const [activeTab, setActiveTab] = useState<'fonts' | 'colors' | 'backgrounds'>('fonts');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n\n  // Load state from localStorage on mount and preload fonts\n  useEffect(() => {\n    const savedState = localStorage.getItem('wordpop-font-store');\n    if (savedState) {\n      try {\n        const parsed = JSON.parse(savedState);\n        setState({ ...DEFAULT_STATE, ...parsed });\n      } catch (error) {\n        console.error('Error loading font store state:', error);\n      }\n    }\n\n    // Preload all Google Fonts when modal opens\n    if (isOpen) {\n      AVAILABLE_FONTS.forEach(font => {\n        if (font.googleFont) {\n          loadFont(font);\n        }\n      });\n    }\n  }, [isOpen]);\n\n  // Save state to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('wordpop-font-store', JSON.stringify(state));\n  }, [state]);\n\n  // Apply equipped font and color to game elements\n  useEffect(() => {\n    const font = AVAILABLE_FONTS.find(f => f.id === state.equippedFont);\n    const color = AVAILABLE_COLORS.find(c => c.id === state.equippedColor);\n    if (font && color) {\n      applyStyles(font, color);\n      // Emit global event for other modules\n      window.dispatchEvent(new CustomEvent('stylesChanged', { detail: { font, color } }));\n    }\n  }, [state.equippedFont, state.equippedColor]);\n\n  // Load Google Fonts when needed\n  const loadFont = async (font: Font) => {\n    if (loadedFonts.has(font.id) || !font.googleFont) {\n      return;\n    }\n\n    try {\n      // Check if font link already exists\n      const existingLink = document.querySelector(`link[href=\"${font.googleFont}\"]`);\n      if (existingLink) {\n        setLoadedFonts(prev => new Set(Array.from(prev).concat(font.id)));\n        return;\n      }\n\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = font.googleFont;\n      link.onload = () => {\n        setLoadedFonts(prev => new Set(Array.from(prev).concat(font.id)));\n      };\n      document.head.appendChild(link);\n      \n      // Wait for font to load with timeout\n      const fontLoadPromise = document.fonts.load(`16px \"${font.family}\"`);\n      const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Font load timeout')), 3000)\n      );\n      \n      await Promise.race([fontLoadPromise, timeoutPromise]);\n    } catch (error) {\n      console.error(`Failed to load font ${font.name}:`, error);\n      // Still mark as loaded to show fallback\n      setLoadedFonts(prev => new Set(Array.from(prev).concat(font.id)));\n    }\n  };\n\n  // Apply font and color to game elements\n  const applyStyles = (font?: Font, color?: ColorOption) => {\n    const currentFont = font || AVAILABLE_FONTS.find(f => f.id === state.equippedFont);\n    const currentColor = color || AVAILABLE_COLORS.find(c => c.id === state.equippedColor);\n    \n    if (!currentFont || !currentColor) return;\n    \n    const fontStack = `\"${currentFont.family}\", ${currentFont.fallback}`;\n    const colorValue = currentColor.value;\n    \n    const style = document.getElementById('dynamic-font-style') || document.createElement('style');\n    style.id = 'dynamic-font-style';\n    \n    style.textContent = `\n      /* Game tiles - font and structure */\n      .tile,\n      .tile-correct,\n      .tile-present, \n      .tile-absent,\n      .tile-current,\n      .tile-empty,\n      [data-testid*=\"tile\"] {\n        font-family: ${fontStack} !important;\n      }\n      \n      /* Game tiles - text color with outline */\n      .tile *,\n      .tile-correct *,\n      .tile-present *,\n      .tile-absent *,\n      .tile-current *,\n      .tile-empty *,\n      [data-testid*=\"tile\"] * {\n        color: ${colorValue} !important;\n        font-family: ${fontStack} !important;\n        text-shadow: \n          -1px -1px 0 #000,\n          1px -1px 0 #000,\n          -1px 1px 0 #000,\n          1px 1px 0 #000,\n          0 -1px 0 #000,\n          0 1px 0 #000,\n          -1px 0 0 #000,\n          1px 0 0 #000 !important;\n      }\n      \n      /* Keyboard keys - font and structure */\n      .keyboard-key,\n      .keyboard-key-default,\n      .keyboard-key-correct,\n      .keyboard-key-present,\n      .keyboard-key-absent,\n      .keyboard-key-special,\n      [data-testid*=\"key\"] {\n        font-family: ${fontStack} !important;\n      }\n      \n      /* Keyboard keys - text color with outline */\n      .keyboard-key *,\n      .keyboard-key-default *,\n      .keyboard-key-correct *,\n      .keyboard-key-present *,\n      .keyboard-key-absent *,\n      .keyboard-key-special *,\n      [data-testid*=\"key\"] * {\n        color: ${colorValue} !important;\n        font-family: ${fontStack} !important;\n        text-shadow: \n          -1px -1px 0 #000,\n          1px -1px 0 #000,\n          -1px 1px 0 #000,\n          1px 1px 0 #000,\n          0 -1px 0 #000,\n          0 1px 0 #000,\n          -1px 0 0 #000,\n          1px 0 0 #000 !important;\n      }\n    `;\n    \n    if (!document.head.contains(style)) {\n      document.head.appendChild(style);\n    }\n  };\n\n  const buyFont = async (font: Font) => {\n    if (state.coins < font.price) {\n      toast({\n        title: \"Insufficient Coins\",\n        description: `You need ${font.price} coins but only have ${state.coins}.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Load font if needed\n    await loadFont(font);\n\n    setState(prev => ({\n      ...prev,\n      coins: prev.coins - font.price,\n      ownedFonts: [...prev.ownedFonts, font.id]\n    }));\n\n    toast({\n      title: \"Font Purchased!\",\n      description: `${font.name} has been added to your collection.`,\n    });\n  };\n\n  const equipFont = async (font: Font) => {\n    // Load font if needed\n    await loadFont(font);\n\n    setState(prev => ({\n      ...prev,\n      equippedFont: font.id\n    }));\n\n    // Apply the new font styles immediately\n    applyStyles(font);\n\n    toast({\n      title: \"Font Equipped!\",\n      description: `${font.name} is now active.`,\n    });\n  };\n\n  const buyColor = (color: ColorOption) => {\n    if (state.coins < color.price) {\n      toast({\n        title: \"Insufficient Coins\",\n        description: `You need ${color.price} coins but only have ${state.coins}.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setState(prev => ({\n      ...prev,\n      coins: prev.coins - color.price,\n      ownedColors: [...prev.ownedColors, color.id]\n    }));\n\n    toast({\n      title: \"Color Purchased!\",\n      description: `${color.name} has been added to your collection.`,\n    });\n  };\n\n  const equipColor = (color: ColorOption) => {\n    setState(prev => ({\n      ...prev,\n      equippedColor: color.id\n    }));\n\n    // Apply the new color styles immediately\n    applyStyles(undefined, color);\n\n    toast({\n      title: \"Color Equipped!\",\n      description: `${color.name} is now active.`,\n    });\n  };\n\n  const getButtonState = (font: Font) => {\n    const isOwned = state.ownedFonts.includes(font.id);\n    const isEquipped = state.equippedFont === font.id;\n\n    if (isEquipped) return { text: 'Equipped', disabled: true, variant: 'secondary' as const };\n    if (isOwned) return { text: 'Equip', disabled: false, variant: 'default' as const };\n    return { text: `Buy (${font.price})`, disabled: state.coins < font.price, variant: 'default' as const };\n  };\n\n  const getColorButtonState = (color: ColorOption) => {\n    const isOwned = state.ownedColors.includes(color.id);\n    const isEquipped = state.equippedColor === color.id;\n\n    if (isEquipped) return { text: 'Equipped', disabled: true, variant: 'secondary' as const };\n    if (isOwned) return { text: 'Equip', disabled: false, variant: 'default' as const };\n    return { text: `Buy (${color.price})`, disabled: state.coins < color.price, variant: 'default' as const };\n  };\n\n  const buyBackground = (background: BackgroundOption) => {\n    if (state.coins < background.price) {\n      toast({\n        title: \"Insufficient Coins\",\n        description: `You need ${background.price} coins but only have ${state.coins}.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setState(prev => ({\n      ...prev,\n      coins: prev.coins - background.price,\n      ownedBackgrounds: [...prev.ownedBackgrounds, background.id]\n    }));\n\n    toast({\n      title: \"Background Purchased!\",\n      description: `${background.name} has been added to your collection.`,\n    });\n  };\n\n  const equipBackground = (background: BackgroundOption) => {\n    setState(prev => ({\n      ...prev,\n      equippedBackground: background.id\n    }));\n\n    toast({\n      title: \"Background Equipped!\",\n      description: `${background.name} is now active.`,\n    });\n  };\n\n  const getBackgroundButtonState = (background: BackgroundOption) => {\n    const isOwned = state.ownedBackgrounds.includes(background.id);\n    const isEquipped = state.equippedBackground === background.id;\n\n    if (isEquipped) return { text: 'Equipped', disabled: true, variant: 'secondary' as const };\n    if (isOwned) return { text: 'Equip', disabled: false, variant: 'default' as const };\n    return { text: `Buy (${background.price})`, disabled: state.coins < background.price, variant: 'default' as const };\n  };\n\n  const handleFontAction = (font: Font) => {\n    const isOwned = state.ownedFonts.includes(font.id);\n    if (isOwned) {\n      equipFont(font);\n    } else {\n      buyFont(font);\n    }\n  };\n\n  const handleColorAction = (color: ColorOption) => {\n    const isOwned = state.ownedColors.includes(color.id);\n    if (isOwned) {\n      equipColor(color);\n    } else {\n      buyColor(color);\n    }\n  };\n\n  const handleBackgroundAction = (background: BackgroundOption) => {\n    const isOwned = state.ownedBackgrounds.includes(background.id);\n    if (isOwned) {\n      equipBackground(background);\n    } else {\n      buyBackground(background);\n    }\n  };\n\n  const filteredFonts = selectedCategory === 'all' \n    ? AVAILABLE_FONTS \n    : AVAILABLE_FONTS.filter(font => font.category === selectedCategory);\n\n  const categories = [\n    { id: 'all', name: 'All Fonts' },\n    { id: 'sans', name: 'Sans Serif' },\n    { id: 'serif', name: 'Serif' },\n    { id: 'mono', name: 'Monospace' },\n    { id: 'playful', name: 'Playful' },\n    { id: 'fun', name: 'Fun Fonts' }\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold\">Style Store</DialogTitle>\n            <div className=\"flex items-center space-x-2 bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-3 py-1 rounded-full\">\n              <Coins className=\"w-4 h-4\" />\n              <span className=\"font-bold\">{state.coins}</span>\n            </div>\n          </div>\n          <p className=\"text-gray-600 text-sm\">\n            Customize your game with fonts and colors. Buy once, equip anytime!\n          </p>\n        </DialogHeader>\n\n        {/* Ad Banner for Free Coins */}\n        <AdManager\n          onCoinsEarned={(coins) => {\n            setState(prev => ({ ...prev, coins: prev.coins + coins }));\n          }}\n          variant=\"store\"\n          className=\"mb-4\"\n        />\n\n        {/* Tabs */}\n        <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1 mt-4\">\n          <Button\n            variant={activeTab === 'fonts' ? 'default' : 'outline'}\n            className={`flex-1 text-xs sm:text-sm ${activeTab === 'fonts' ? 'bg-blue-600 text-white' : 'bg-white/90 text-gray-800 border-gray-300'}`}\n            onClick={() => setActiveTab('fonts')}\n          >\n            Fonts\n          </Button>\n          <Button\n            variant={activeTab === 'colors' ? 'default' : 'outline'}\n            className={`flex-1 text-xs sm:text-sm ${activeTab === 'colors' ? 'bg-blue-600 text-white' : 'bg-white/90 text-gray-800 border-gray-300'}`}\n            onClick={() => setActiveTab('colors')}\n          >\n            Colors\n          </Button>\n          <Button\n            variant={activeTab === 'backgrounds' ? 'default' : 'outline'}\n            className={`flex-1 text-xs sm:text-sm ${activeTab === 'backgrounds' ? 'bg-blue-600 text-white' : 'bg-white/90 text-gray-800 border-gray-300'}`}\n            onClick={() => setActiveTab('backgrounds')}\n          >\n            Backgrounds\n          </Button>\n        </div>\n\n        {/* Fonts Tab */}\n        {activeTab === 'fonts' && (\n          <div>\n            {/* Category Filter */}\n            <div className=\"flex flex-wrap gap-2 mt-4 mb-6\">\n              {categories.map((category) => (\n                <Button\n                  key={category.id}\n                  variant={selectedCategory === category.id ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category.id)}\n                >\n                  {category.name}\n                </Button>\n              ))}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredFonts.map((font) => {\n                const buttonState = getButtonState(font);\n\n                return (\n                  <Card \n                    key={font.id} \n                    className={`transition-all duration-200 hover:shadow-lg ${\n                      state.equippedFont === font.id ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{font.name}</h3>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {font.category}\n                          </Badge>\n                        </div>\n                        {state.equippedFont === font.id && (\n                          <Check className=\"w-5 h-5 text-green-500\" />\n                        )}\n                      </div>\n\n                      <div \n                        className=\"bg-gray-50 rounded-lg p-3 mb-4 min-h-[80px] flex items-center justify-center text-center transition-all duration-200 border\"\n                        style={{\n                          fontFamily: `\"${font.family}\", ${font.fallback}`\n                        }}\n                      >\n                        <div>\n                          <div className=\"text-lg font-semibold text-gray-800\">WORD</div>\n                          <div className=\"text-sm text-gray-600\">guess</div>\n                          <div className=\"text-xs text-gray-500\">letter</div>\n                        </div>\n                      </div>\n\n                      <Button\n                        className=\"w-full\"\n                        variant={buttonState.variant}\n                        disabled={buttonState.disabled}\n                        onClick={() => handleFontAction(font)}\n                      >\n                        {buttonState.text}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Colors Tab */}\n        {activeTab === 'colors' && (\n          <div className=\"mt-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {AVAILABLE_COLORS.map((color) => {\n                const buttonState = getColorButtonState(color);\n\n                return (\n                  <Card \n                    key={color.id} \n                    className={`transition-all duration-200 hover:shadow-lg ${\n                      state.equippedColor === color.id ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-sm\">{color.name}</h3>\n                        </div>\n                        {state.equippedColor === color.id && (\n                          <Check className=\"w-4 h-4 text-green-500\" />\n                        )}\n                      </div>\n\n                      <div \n                        className=\"rounded-lg p-4 mb-4 min-h-[60px] flex items-center justify-center text-center transition-all duration-200 border-2\"\n                        style={{\n                          backgroundColor: color.value === '#ffffff' ? '#f3f4f6' : color.value,\n                          color: color.value === '#ffffff' ? '#000000' : \n                                color.value === '#000000' ? '#ffffff' : \n                                '#ffffff',\n                          borderColor: color.value === '#ffffff' ? '#d1d5db' : color.value\n                        }}\n                      >\n                        <div style={{ fontWeight: 'bold' }}>Aa</div>\n                      </div>\n\n                      <Button\n                        className=\"w-full\"\n                        variant={buttonState.variant}\n                        disabled={buttonState.disabled}\n                        onClick={() => handleColorAction(color)}\n                        size=\"sm\"\n                      >\n                        {buttonState.text}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Backgrounds Tab */}\n        {activeTab === 'backgrounds' && (\n          <div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\n              {AVAILABLE_BACKGROUNDS.map((background) => {\n                const buttonState = getBackgroundButtonState(background);\n\n                return (\n                  <Card \n                    key={background.id} \n                    className={`transition-all duration-200 hover:shadow-lg ${\n                      state.equippedBackground === background.id ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{background.name}</h3>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {background.type}\n                          </Badge>\n                        </div>\n                        {state.equippedBackground === background.id && (\n                          <Check className=\"w-5 h-5 text-green-500\" />\n                        )}\n                      </div>\n\n                      <div \n                        className=\"rounded-lg p-4 mb-4 min-h-[80px] flex items-center justify-center text-center transition-all duration-200 border relative overflow-hidden\"\n                        style={{\n                          background: background.value\n                        }}\n                      >\n                        <div className=\"text-white font-bold text-lg drop-shadow-lg\">\n                          Preview\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <span className=\"text-sm text-gray-600\">\n                          {background.price === 0 ? 'Free' : `${background.price} coins`}\n                        </span>\n                      </div>\n\n                      <Button\n                        className=\"w-full\"\n                        variant={buttonState.variant}\n                        disabled={buttonState.disabled}\n                        onClick={() => handleBackgroundAction(background)}\n                      >\n                        {buttonState.text}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Export state and functions for use in other components\nexport const FontStoreAPI = {\n  getState: (): FontStoreState => {\n    const saved = localStorage.getItem('wordpop-font-store');\n    if (saved) {\n      try {\n        return { ...DEFAULT_STATE, ...JSON.parse(saved) };\n      } catch {\n        return DEFAULT_STATE;\n      }\n    }\n    return DEFAULT_STATE;\n  },\n  \n  addCoins: (amount: number) => {\n    const current = FontStoreAPI.getState();\n    const newState = { ...current, coins: current.coins + amount };\n    localStorage.setItem('wordpop-font-store', JSON.stringify(newState));\n    return newState;\n  },\n\n  getEquippedFont: (): Font => {\n    const state = FontStoreAPI.getState();\n    return AVAILABLE_FONTS.find(f => f.id === state.equippedFont) || AVAILABLE_FONTS[0];\n  },\n\n  getEquippedColor: (): ColorOption => {\n    const state = FontStoreAPI.getState();\n    return AVAILABLE_COLORS.find(c => c.id === state.equippedColor) || AVAILABLE_COLORS[0];\n  },\n\n  applyStoredStyles: () => {\n    const state = FontStoreAPI.getState();\n    const currentFont = AVAILABLE_FONTS.find(f => f.id === state.equippedFont);\n    const currentColor = AVAILABLE_COLORS.find(c => c.id === state.equippedColor);\n    \n    if (!currentFont || !currentColor) return;\n    \n    const fontStack = `\"${currentFont.family}\", ${currentFont.fallback}`;\n    const colorValue = currentColor.value;\n    \n    const style = document.getElementById('dynamic-font-style') || document.createElement('style');\n    style.id = 'dynamic-font-style';\n    \n    style.textContent = `\n      /* Game tiles - font and structure */\n      .tile,\n      .tile-correct,\n      .tile-present, \n      .tile-absent,\n      .tile-current,\n      .tile-empty,\n      [data-testid*=\"tile\"] {\n        font-family: ${fontStack} !important;\n      }\n      \n      /* Game tiles - text color with outline */\n      .tile *,\n      .tile-correct *,\n      .tile-present *,\n      .tile-absent *,\n      .tile-current *,\n      .tile-empty *,\n      [data-testid*=\"tile\"] * {\n        color: ${colorValue} !important;\n        font-family: ${fontStack} !important;\n        text-shadow: \n          -1px -1px 0 #000,\n          1px -1px 0 #000,\n          -1px 1px 0 #000,\n          1px 1px 0 #000,\n          0 -1px 0 #000,\n          0 1px 0 #000,\n          -1px 0 0 #000,\n          1px 0 0 #000 !important;\n      }\n      \n      /* Keyboard keys - font and structure */\n      .keyboard-key,\n      .keyboard-key-default,\n      .keyboard-key-correct,\n      .keyboard-key-present,\n      .keyboard-key-absent,\n      .keyboard-key-special,\n      [data-testid*=\"key\"] {\n        font-family: ${fontStack} !important;\n      }\n      \n      /* Keyboard keys - text color with outline */\n      .keyboard-key *,\n      .keyboard-key-default *,\n      .keyboard-key-correct *,\n      .keyboard-key-present *,\n      .keyboard-key-absent *,\n      .keyboard-key-special *,\n      [data-testid*=\"key\"] * {\n        color: ${colorValue} !important;\n        font-family: ${fontStack} !important;\n        text-shadow: \n          -1px -1px 0 #000,\n          1px -1px 0 #000,\n          -1px 1px 0 #000,\n          1px 1px 0 #000,\n          0 -1px 0 #000,\n          0 1px 0 #000,\n          -1px 0 0 #000,\n          1px 0 0 #000 !important;\n      }\n    `;\n    \n    if (!document.head.contains(style)) {\n      document.head.appendChild(style);\n    }\n  }\n};","size_bytes":51456},"client/src/components/ad-manager.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Play, Gift } from 'lucide-react';\n\n// TODO: Replace with your actual AdMob Ad Unit IDs\nconst AD_UNIT_IDS = {\n  // TODO: Add your real Android rewarded ad unit ID here\n  android: 'ca-app-pub-3940256099942544/5224354917', // Test ID - REPLACE WITH REAL ID\n  // TODO: Add your real iOS rewarded ad unit ID here  \n  ios: 'ca-app-pub-3940256099942544/1712485313', // Test ID - REPLACE WITH REAL ID\n  // TODO: Add your real web rewarded ad unit ID here (if needed)\n  web: 'ca-app-pub-3940256099942544/5224354917' // Test ID - REPLACE WITH REAL ID\n};\n\ninterface AdManagerProps {\n  onCoinsEarned: (coins: number) => void;\n  className?: string;\n  variant?: 'default' | 'store' | 'compact';\n}\n\n// Mock AdMob interface for web development\n// In production, this will be replaced by the actual AdMob SDK\ninterface MockAdMob {\n  isLoaded: boolean;\n  load: () => Promise<void>;\n  show: () => Promise<{ dismissed: boolean; rewarded: boolean }>;\n}\n\n// Simulate AdMob behavior for web development\nconst createMockAdMob = (): MockAdMob => ({\n  isLoaded: false,\n  async load() {\n    // Simulate ad loading time\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n    this.isLoaded = true;\n  },\n  async show() {\n    // Simulate watching an ad (3-5 seconds)\n    await new Promise(resolve => setTimeout(resolve, 3000 + Math.random() * 2000));\n    \n    // Simulate 90% success rate\n    const success = Math.random() > 0.1;\n    return {\n      dismissed: !success,\n      rewarded: success\n    };\n  }\n});\n\nexport function AdManager({ onCoinsEarned, className = '', variant = 'default' }: AdManagerProps) {\n  const [adState, setAdState] = useState<'idle' | 'loading' | 'ready' | 'showing' | 'error'>('idle');\n  const [adMob, setAdMob] = useState<MockAdMob | null>(null);\n  const { toast } = useToast();\n\n  // Initialize AdMob\n  useEffect(() => {\n    // TODO: In production mobile app, replace this with actual AdMob initialization\n    // For React Native: import { RewardedAd, RewardedAdEventType } from 'react-native-google-mobile-ads';\n    // For Cordova: Use AdMob plugin\n    // For web: Use Google Ad Manager or alternative web ad solution\n    \n    const mockAd = createMockAdMob();\n    setAdMob(mockAd);\n    \n    // Auto-load the first ad\n    loadAd(mockAd);\n  }, []);\n\n  const loadAd = async (adInstance?: MockAdMob) => {\n    const ad = adInstance || adMob;\n    if (!ad) return;\n\n    setAdState('loading');\n    \n    try {\n      await ad.load();\n      setAdState('ready');\n    } catch (error) {\n      console.error('Failed to load ad:', error);\n      setAdState('error');\n      toast({\n        title: \"Ad Not Available\",\n        description: \"No ads are available right now. Try again later.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const showAd = async () => {\n    if (!adMob || adState !== 'ready') return;\n\n    setAdState('showing');\n    \n    try {\n      const result = await adMob.show();\n      \n      if (result.rewarded) {\n        // Calculate reward coins (25-50 coins for watching an ad)\n        const coinReward = 25 + Math.floor(Math.random() * 26);\n        onCoinsEarned(coinReward);\n        \n        toast({\n          title: \"Ad Reward!\",\n          description: `You earned ${coinReward} coins for watching the ad!`\n        });\n      } else if (result.dismissed) {\n        toast({\n          title: \"Ad Skipped\",\n          description: \"You need to watch the full ad to earn coins.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Failed to show ad:', error);\n      toast({\n        title: \"Ad Error\",\n        description: \"Something went wrong while showing the ad.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      // Load the next ad\n      setAdState('idle');\n      setTimeout(() => loadAd(), 1000);\n    }\n  };\n\n  const getButtonText = () => {\n    switch (adState) {\n      case 'loading':\n        return 'Loading Ad...';\n      case 'ready':\n        return 'Watch Ad for Coins';\n      case 'showing':\n        return 'Watching Ad...';\n      case 'error':\n        return 'Ad Unavailable';\n      default:\n        return 'Loading...';\n    }\n  };\n\n  const getButtonIcon = () => {\n    switch (adState) {\n      case 'loading':\n        return <Loader2 className=\"w-4 h-4 animate-spin\" />;\n      case 'ready':\n        return <Play className=\"w-4 h-4\" />;\n      case 'showing':\n        return <Loader2 className=\"w-4 h-4 animate-spin\" />;\n      case 'error':\n        return <Gift className=\"w-4 h-4\" />;\n      default:\n        return <Loader2 className=\"w-4 h-4 animate-spin\" />;\n    }\n  };\n\n  const isDisabled = adState !== 'ready';\n\n  if (variant === 'compact') {\n    return (\n      <Button\n        onClick={showAd}\n        disabled={isDisabled}\n        variant=\"outline\"\n        size=\"sm\"\n        className={`flex items-center space-x-2 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white border-0 ${className}`}\n        data-testid=\"button-watch-ad-compact\"\n      >\n        {getButtonIcon()}\n        <span className=\"hidden sm:inline\">+Coins</span>\n      </Button>\n    );\n  }\n\n  if (variant === 'store') {\n    return (\n      <div className={`p-4 bg-gradient-to-r from-green-100 to-emerald-100 rounded-lg border-2 border-green-200 ${className}`}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-green-800\">Free Coins!</h3>\n            <p className=\"text-sm text-green-600\">Watch a short ad to earn 25-50 coins</p>\n          </div>\n          <Button\n            onClick={showAd}\n            disabled={isDisabled}\n            className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white flex items-center space-x-2\"\n            data-testid=\"button-watch-ad-store\"\n          >\n            {getButtonIcon()}\n            <span>{adState === 'ready' ? 'Watch Ad' : getButtonText()}</span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Default variant\n  return (\n    <Button\n      onClick={showAd}\n      disabled={isDisabled}\n      className={`bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white flex items-center space-x-2 ${className}`}\n      data-testid=\"button-watch-ad\"\n    >\n      {getButtonIcon()}\n      <span>{getButtonText()}</span>\n    </Button>\n  );\n}\n\n// Hook for managing coin balance with localStorage persistence\nexport function useCoins() {\n  const [coins, setCoins] = useState<number>(() => {\n    // Load coins from localStorage on initialization\n    if (typeof window !== 'undefined') {\n      const savedCoins = localStorage.getItem('wordpop-coins');\n      return savedCoins ? parseInt(savedCoins, 10) : 25; // Start with 25 coins\n    }\n    return 25;\n  });\n\n  // Save coins to localStorage whenever they change\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('wordpop-coins', coins.toString());\n    }\n  }, [coins]);\n\n  const addCoins = (amount: number) => {\n    setCoins(prev => prev + amount);\n  };\n\n  const spendCoins = (amount: number): boolean => {\n    if (coins >= amount) {\n      setCoins(prev => prev - amount);\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    coins,\n    addCoins,\n    spendCoins,\n    setCoins\n  };\n}\n\n/*\nTODO: Mobile App Integration Guide\n\nFor React Native Apps:\n1. Install: npm install react-native-google-mobile-ads\n2. Configure AdMob App IDs in app.json or native config\n3. Replace MockAdMob with:\n   ```\n   import { RewardedAd, RewardedAdEventType, TestIds } from 'react-native-google-mobile-ads';\n   \n   const rewardedAd = RewardedAd.createForAdRequest(AD_UNIT_IDS.android, {\n     requestNonPersonalizedAdsOnly: false,\n   });\n   ```\n\nFor Cordova/PhoneGap Apps:\n1. Install: cordova plugin add cordova-plugin-admob-free\n2. Configure AdMob in config.xml\n3. Use cordova.plugins.admob API\n\nFor Capacitor Apps:\n1. Install: npm install @capacitor-community/admob\n2. Configure native projects\n3. Use Capacitor AdMob plugin\n\nProduction Checklist:\n- Replace test Ad Unit IDs with real ones\n- Test on actual devices\n- Implement proper error handling for network issues\n- Add frequency capping (limit ads per day/hour)\n- Comply with GDPR/CCPA requirements\n- Test ad loading in poor network conditions\n*/","size_bytes":8505},"client/src/components/how-to-play-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HowToPlayModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function HowToPlayModal({ isOpen, onClose }: HowToPlayModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"font-bold text-2xl text-gray-800\">How to Play</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Game Rules</h3>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li>• Guess the 5-letter word in 6 attempts</li>\n              <li>• Each guess must be a valid English word</li>\n              <li>• Colors will show how close your guess was</li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Color Guide</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white font-bold text-sm\">\n                  W\n                </div>\n                <span className=\"text-sm\">Green: Letter is correct and in the right position</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-yellow-500 rounded flex items-center justify-center text-white font-bold text-sm\">\n                  O\n                </div>\n                <span className=\"text-sm\">Yellow: Letter is in the word but wrong position</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gray-400 rounded flex items-center justify-center text-white font-bold text-sm\">\n                  R\n                </div>\n                <span className=\"text-sm\">Gray: Letter is not in the word</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Game Modes</h3>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li>• <strong>Classic:</strong> Standard Wordle gameplay</li>\n              <li>• <strong>Timed Challenge:</strong> Complete within 3 minutes for bonus points</li>\n              <li>• <strong>Daily Challenge:</strong> One special word per day</li>\n              <li>• <strong>Blind Challenge:</strong> No keyboard color hints</li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Scoring</h3>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li>• Fewer guesses = higher score</li>\n              <li>• Timed challenges give bonus points</li>\n              <li>• Earn coins to buy fonts and colors</li>\n              <li>• Build streaks for extra rewards</li>\n            </ul>\n          </div>\n\n          <Button \n            onClick={onClose}\n            className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n            data-testid=\"button-start-playing\"\n          >\n            Start Playing!\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3520},"shared/official-wordle-words.ts":{"content":"// Official Wordle word lists from The New York Times\n// Source: https://github.com/stuartpb/wordles\n\n// Official answer words (2,309 words) - these are the possible daily solutions\nexport const OFFICIAL_WORDLE_ANSWERS = [\"cigar\",\"rebut\",\"sissy\",\"humph\",\"awake\",\"blush\",\"focal\",\"evade\",\"naval\",\"serve\",\"heath\",\"dwarf\",\"model\",\"karma\",\"stink\",\"grade\",\"quiet\",\"bench\",\"abate\",\"feign\",\"major\",\"death\",\"fresh\",\"crust\",\"stool\",\"colon\",\"abase\",\"marry\",\"react\",\"batty\",\"pride\",\"floss\",\"helix\",\"croak\",\"staff\",\"paper\",\"unfed\",\"whelp\",\"trawl\",\"outdo\",\"adobe\",\"crazy\",\"sower\",\"repay\",\"digit\",\"crate\",\"cluck\",\"spike\",\"mimic\",\"pound\",\"maxim\",\"linen\",\"unmet\",\"flesh\",\"booby\",\"forth\",\"first\",\"stand\",\"belly\",\"ivory\",\"seedy\",\"print\",\"yearn\",\"drain\",\"bribe\",\"stout\",\"panel\",\"crass\",\"flume\",\"offal\",\"agree\",\"error\",\"swirl\",\"argue\",\"bleed\",\"delta\",\"flick\",\"totem\",\"wooer\",\"front\",\"shrub\",\"parry\",\"biome\",\"lapel\",\"start\",\"greet\",\"goner\",\"golem\",\"lusty\",\"loopy\",\"round\",\"audit\",\"lying\",\"gamma\",\"labor\",\"islet\",\"civic\",\"forge\",\"corny\",\"moult\",\"basic\",\"salad\",\"agate\",\"spicy\",\"spray\",\"essay\",\"fjord\",\"spend\",\"kebab\",\"guild\",\"aback\",\"motor\",\"alone\",\"hatch\",\"hyper\",\"thumb\",\"dowry\",\"ought\",\"belch\",\"dutch\",\"pilot\",\"tweed\",\"comet\",\"jaunt\",\"enema\",\"steed\",\"abyss\",\"growl\",\"fling\",\"dozen\",\"boozy\",\"erode\",\"world\",\"gouge\",\"click\",\"briar\",\"great\",\"altar\",\"pulpy\",\"blurt\",\"coast\",\"duchy\",\"groin\",\"fixer\",\"group\",\"rogue\",\"badly\",\"smart\",\"pithy\",\"gaudy\",\"chill\",\"heron\",\"vodka\",\"finer\",\"surer\",\"radio\",\"rouge\",\"perch\",\"retch\",\"wrote\",\"clock\",\"tilde\",\"store\",\"prove\",\"bring\",\"solve\",\"cheat\",\"grime\",\"exult\",\"usher\",\"epoch\",\"triad\",\"break\",\"rhino\",\"viral\",\"conic\",\"masse\",\"sonic\",\"vital\",\"trace\",\"using\",\"peach\",\"champ\",\"baton\",\"brake\",\"pluck\",\"craze\",\"gripe\",\"weary\",\"picky\",\"acute\",\"ferry\",\"aside\",\"tapir\",\"troll\",\"unify\",\"rebus\",\"boost\",\"truss\",\"siege\",\"tiger\",\"banal\",\"slump\",\"crank\",\"gorge\",\"query\",\"drink\",\"favor\",\"abbey\",\"tangy\",\"panic\",\"solar\",\"shire\",\"proxy\",\"point\",\"robot\",\"prick\",\"wince\",\"crimp\",\"knoll\",\"sugar\",\"whack\",\"mount\",\"perky\",\"could\",\"wrung\",\"light\",\"those\",\"moist\",\"shard\",\"pleat\",\"aloft\",\"skill\",\"elder\",\"frame\",\"humor\",\"pause\",\"ulcer\",\"ultra\",\"robin\",\"cynic\",\"aroma\",\"caulk\",\"shake\",\"dodge\",\"swill\",\"tacit\",\"other\",\"thorn\",\"trove\",\"bloke\",\"vivid\",\"spill\",\"chant\",\"choke\",\"rupee\",\"nasty\",\"mourn\",\"ahead\",\"brine\",\"cloth\",\"hoard\",\"sweet\",\"month\",\"lapse\",\"watch\",\"today\",\"focus\",\"smelt\",\"tease\",\"cater\",\"movie\",\"saute\",\"allow\",\"renew\",\"their\",\"slosh\",\"purge\",\"chest\",\"depot\",\"epoxy\",\"nymph\",\"found\",\"shall\",\"harry\",\"stove\",\"lowly\",\"snout\",\"trope\",\"fewer\",\"shawl\",\"natal\",\"comma\",\"foray\",\"scare\",\"stair\",\"black\",\"squad\",\"royal\",\"chunk\",\"mince\",\"shame\",\"cheek\",\"ample\",\"flair\",\"foyer\",\"cargo\",\"oxide\",\"plant\",\"olive\",\"inert\",\"askew\",\"heist\",\"shown\",\"zesty\",\"hasty\",\"trash\",\"fella\",\"larva\",\"forgo\",\"story\",\"hairy\",\"train\",\"homer\",\"badge\",\"midst\",\"canny\",\"fetus\",\"butch\",\"farce\",\"slung\",\"tipsy\",\"metal\",\"yield\",\"delve\",\"being\",\"scour\",\"glass\",\"gamer\",\"scrap\",\"money\",\"hinge\",\"album\",\"vouch\",\"asset\",\"tiara\",\"crept\",\"bayou\",\"atoll\",\"manor\",\"creak\",\"showy\",\"phase\",\"froth\",\"depth\",\"gloom\",\"flood\",\"trait\",\"girth\",\"piety\",\"payer\",\"goose\",\"float\",\"donor\",\"atone\",\"primo\",\"apron\",\"blown\",\"cacao\",\"loser\",\"input\",\"gloat\",\"awful\",\"brink\",\"smite\",\"beady\",\"rusty\",\"retro\",\"droll\",\"gawky\",\"hutch\",\"pinto\",\"gaily\",\"egret\",\"lilac\",\"sever\",\"field\",\"fluff\",\"hydro\",\"flack\",\"agape\",\"voice\",\"stead\",\"stalk\",\"berth\",\"madam\",\"night\",\"bland\",\"liver\",\"wedge\",\"augur\",\"roomy\",\"wacky\",\"flock\",\"angry\",\"bobby\",\"trite\",\"aphid\",\"tryst\",\"midge\",\"power\",\"elope\",\"cinch\",\"motto\",\"stomp\",\"upset\",\"bluff\",\"cramp\",\"quart\",\"coyly\",\"youth\",\"rhyme\",\"buggy\",\"alien\",\"smear\",\"unfit\",\"patty\",\"cling\",\"glean\",\"label\",\"hunky\",\"khaki\",\"poker\",\"gruel\",\"twice\",\"twang\",\"shrug\",\"treat\",\"unlit\",\"waste\",\"merit\",\"woven\",\"octal\",\"needy\",\"clown\",\"widow\",\"irony\",\"ruder\",\"gauze\",\"chief\",\"onset\",\"prize\",\"fungi\",\"charm\",\"gully\",\"inter\",\"whoop\",\"taunt\",\"leery\",\"class\",\"theme\",\"lofty\",\"tibia\",\"booze\",\"alpha\",\"thyme\",\"eclat\",\"doubt\",\"parer\",\"chute\",\"stick\",\"trice\",\"alike\",\"sooth\",\"recap\",\"saint\",\"liege\",\"glory\",\"grate\",\"admit\",\"brisk\",\"soggy\",\"usurp\",\"scald\",\"scorn\",\"leave\",\"twine\",\"sting\",\"bough\",\"marsh\",\"sloth\",\"dandy\",\"vigor\",\"howdy\",\"enjoy\",\"valid\",\"ionic\",\"equal\",\"unset\",\"floor\",\"catch\",\"spade\",\"stein\",\"exist\",\"quirk\",\"denim\",\"grove\",\"spiel\",\"mummy\",\"fault\",\"foggy\",\"flout\",\"carry\",\"sneak\",\"libel\",\"waltz\",\"aptly\",\"piney\",\"inept\",\"aloud\",\"photo\",\"dream\",\"stale\",\"vomit\",\"ombre\",\"fanny\",\"unite\",\"snarl\",\"baker\",\"there\",\"glyph\",\"pooch\",\"hippy\",\"spell\",\"folly\",\"louse\",\"gulch\",\"vault\",\"godly\",\"threw\",\"fleet\",\"grave\",\"inane\",\"shock\",\"crave\",\"spite\",\"valve\",\"skimp\",\"claim\",\"rainy\",\"musty\",\"pique\",\"daddy\",\"quasi\",\"arise\",\"aging\",\"valet\",\"opium\",\"avert\",\"stuck\",\"recut\",\"mulch\",\"genre\",\"plume\",\"rifle\",\"count\",\"incur\",\"total\",\"wrest\",\"mocha\",\"deter\",\"study\",\"lover\",\"safer\",\"rivet\",\"funny\",\"smoke\",\"mound\",\"undue\",\"sedan\",\"pagan\",\"swine\",\"guile\",\"gusty\",\"equip\",\"tough\",\"canoe\",\"chaos\",\"covet\",\"human\",\"udder\",\"lunch\",\"blast\",\"stray\",\"manga\",\"melee\",\"lefty\",\"quick\",\"paste\",\"given\",\"octet\",\"risen\",\"groan\",\"leaky\",\"grind\",\"carve\",\"loose\",\"sadly\",\"spilt\",\"apple\",\"slack\",\"honey\",\"final\",\"sheen\",\"eerie\",\"minty\",\"slick\",\"derby\",\"wharf\",\"spelt\",\"coach\",\"erupt\",\"singe\",\"price\",\"spawn\",\"fairy\",\"jiffy\",\"filmy\",\"stack\",\"chose\",\"sleep\",\"ardor\",\"nanny\",\"niece\",\"woozy\",\"handy\",\"grace\",\"ditto\",\"stank\",\"cream\",\"usual\",\"diode\",\"valor\",\"angle\",\"ninja\",\"muddy\",\"chase\",\"reply\",\"prone\",\"spoil\",\"heart\",\"shade\",\"diner\",\"arson\",\"onion\",\"sleet\",\"dowel\",\"couch\",\"palsy\",\"bowel\",\"smile\",\"evoke\",\"creek\",\"lance\",\"eagle\",\"idiot\",\"siren\",\"built\",\"embed\",\"award\",\"dross\",\"annul\",\"goody\",\"frown\",\"patio\",\"laden\",\"humid\",\"elite\",\"lymph\",\"edify\",\"might\",\"reset\",\"visit\",\"gusto\",\"purse\",\"vapor\",\"crock\",\"write\",\"sunny\",\"loath\",\"chaff\",\"slide\",\"queer\",\"venom\",\"stamp\",\"sorry\",\"still\",\"acorn\",\"aping\",\"pushy\",\"tamer\",\"hater\",\"mania\",\"awoke\",\"brawn\",\"swift\",\"exile\",\"birch\",\"lucky\",\"freer\",\"risky\",\"ghost\",\"plier\",\"lunar\",\"winch\",\"snare\",\"nurse\",\"house\",\"borax\",\"nicer\",\"lurch\",\"exalt\",\"about\",\"savvy\",\"toxin\",\"tunic\",\"pried\",\"inlay\",\"chump\",\"lanky\",\"cress\",\"eater\",\"elude\",\"cycle\",\"kitty\",\"boule\",\"moron\",\"tenet\",\"place\",\"lobby\",\"plush\",\"vigil\",\"index\",\"blink\",\"clung\",\"qualm\",\"croup\",\"clink\",\"juicy\",\"stage\",\"decay\",\"nerve\",\"flier\",\"shaft\",\"crook\",\"clean\",\"china\",\"ridge\",\"vowel\",\"gnome\",\"snuck\",\"icing\",\"spiny\",\"rigor\",\"snail\",\"flown\",\"rabid\",\"prose\",\"thank\",\"poppy\",\"budge\",\"fiber\",\"moldy\",\"dowdy\",\"kneel\",\"track\",\"caddy\",\"quell\",\"dumpy\",\"paler\",\"swore\",\"rebar\",\"scuba\",\"splat\",\"flyer\",\"horny\",\"mason\",\"doing\",\"ozone\",\"amply\",\"molar\",\"ovary\",\"beset\",\"queue\",\"cliff\",\"magic\",\"truce\",\"sport\",\"fritz\",\"edict\",\"twirl\",\"verse\",\"llama\",\"eaten\",\"range\",\"whisk\",\"hovel\",\"rehab\",\"macaw\",\"sigma\",\"spout\",\"verve\",\"sushi\",\"dying\",\"fetid\",\"brain\",\"buddy\",\"thump\",\"scion\",\"candy\",\"chord\",\"basin\",\"march\",\"crowd\",\"arbor\",\"gayly\",\"musky\",\"stain\",\"dally\",\"bless\",\"bravo\",\"stung\",\"title\",\"ruler\",\"kiosk\",\"blond\",\"ennui\",\"layer\",\"fluid\",\"tatty\",\"score\",\"cutie\",\"zebra\",\"barge\",\"matey\",\"bluer\",\"aider\",\"shook\",\"river\",\"privy\",\"betel\",\"frisk\",\"bongo\",\"begun\",\"azure\",\"weave\",\"genie\",\"sound\",\"glove\",\"braid\",\"scope\",\"wryly\",\"rover\",\"assay\",\"ocean\",\"bloom\",\"irate\",\"later\",\"woken\",\"silky\",\"wreck\",\"dwelt\",\"slate\",\"smack\",\"solid\",\"amaze\",\"hazel\",\"wrist\",\"jolly\",\"globe\",\"flint\",\"rouse\",\"civil\",\"vista\",\"relax\",\"cover\",\"alive\",\"beech\",\"jetty\",\"bliss\",\"vocal\",\"often\",\"dolly\",\"eight\",\"joker\",\"since\",\"event\",\"ensue\",\"shunt\",\"diver\",\"poser\",\"worst\",\"sweep\",\"alley\",\"creed\",\"anime\",\"leafy\",\"bosom\",\"dunce\",\"stare\",\"pudgy\",\"waive\",\"choir\",\"stood\",\"spoke\",\"outgo\",\"delay\",\"bilge\",\"ideal\",\"clasp\",\"seize\",\"hotly\",\"laugh\",\"sieve\",\"block\",\"meant\",\"grape\",\"noose\",\"hardy\",\"shied\",\"drawl\",\"daisy\",\"putty\",\"strut\",\"burnt\",\"tulip\",\"crick\",\"idyll\",\"vixen\",\"furor\",\"geeky\",\"cough\",\"naive\",\"shoal\",\"stork\",\"bathe\",\"aunty\",\"check\",\"prime\",\"brass\",\"outer\",\"furry\",\"razor\",\"elect\",\"evict\",\"imply\",\"demur\",\"quota\",\"haven\",\"cavil\",\"swear\",\"crump\",\"dough\",\"gavel\",\"wagon\",\"salon\",\"nudge\",\"harem\",\"pitch\",\"sworn\",\"pupil\",\"excel\",\"stony\",\"cabin\",\"unzip\",\"queen\",\"trout\",\"polyp\",\"earth\",\"storm\",\"until\",\"taper\",\"enter\",\"child\",\"adopt\",\"minor\",\"fatty\",\"husky\",\"brave\",\"filet\",\"slime\",\"glint\",\"tread\",\"steal\",\"regal\",\"guest\",\"every\",\"murky\",\"share\",\"spore\",\"hoist\",\"buxom\",\"inner\",\"otter\",\"dimly\",\"level\",\"sumac\",\"donut\",\"stilt\",\"arena\",\"sheet\",\"scrub\",\"fancy\",\"slimy\",\"pearl\",\"silly\",\"porch\",\"dingo\",\"sepia\",\"amble\",\"shady\",\"bread\",\"friar\",\"reign\",\"dairy\",\"quill\",\"cross\",\"brood\",\"tuber\",\"shear\",\"posit\",\"blank\",\"villa\",\"shank\",\"piggy\",\"freak\",\"which\",\"among\",\"fecal\",\"shell\",\"would\",\"algae\",\"large\",\"rabbi\",\"agony\",\"amuse\",\"bushy\",\"copse\",\"swoon\",\"knife\",\"pouch\",\"ascot\",\"plane\",\"crown\",\"urban\",\"snide\",\"relay\",\"abide\",\"viola\",\"rajah\",\"straw\",\"dilly\",\"crash\",\"amass\",\"third\",\"trick\",\"tutor\",\"woody\",\"blurb\",\"grief\",\"disco\",\"where\",\"sassy\",\"beach\",\"sauna\",\"comic\",\"clued\",\"creep\",\"caste\",\"graze\",\"snuff\",\"frock\",\"gonad\",\"drunk\",\"prong\",\"lurid\",\"steel\",\"halve\",\"buyer\",\"vinyl\",\"utile\",\"smell\",\"adage\",\"worry\",\"tasty\",\"local\",\"trade\",\"finch\",\"ashen\",\"modal\",\"gaunt\",\"clove\",\"enact\",\"adorn\",\"roast\",\"speck\",\"sheik\",\"missy\",\"grunt\",\"snoop\",\"party\",\"touch\",\"mafia\",\"emcee\",\"array\",\"south\",\"vapid\",\"jelly\",\"skulk\",\"angst\",\"tubal\",\"lower\",\"crest\",\"sweat\",\"cyber\",\"adore\",\"tardy\",\"swami\",\"notch\",\"groom\",\"roach\",\"hitch\",\"young\",\"align\",\"ready\",\"frond\",\"strap\",\"puree\",\"realm\",\"venue\",\"swarm\",\"offer\",\"seven\",\"dryer\",\"diary\",\"dryly\",\"drank\",\"acrid\",\"heady\",\"theta\",\"junto\",\"pixie\",\"quoth\",\"bonus\",\"shalt\",\"penne\",\"amend\",\"datum\",\"build\",\"piano\",\"shelf\",\"lodge\",\"suing\",\"rearm\",\"coral\",\"ramen\",\"worth\",\"psalm\",\"infer\",\"overt\",\"mayor\",\"ovoid\",\"glide\",\"usage\",\"poise\",\"randy\",\"chuck\",\"prank\",\"fishy\",\"tooth\",\"ether\",\"drove\",\"idler\",\"swath\",\"stint\",\"while\",\"begat\",\"apply\",\"slang\",\"tarot\",\"radar\",\"credo\",\"aware\",\"canon\",\"shift\",\"timer\",\"bylaw\",\"serum\",\"three\",\"steak\",\"iliac\",\"shirk\",\"blunt\",\"puppy\",\"penal\",\"joist\",\"bunny\",\"shape\",\"beget\",\"wheel\",\"adept\",\"stunt\",\"stole\",\"topaz\",\"chore\",\"fluke\",\"afoot\",\"bloat\",\"bully\",\"dense\",\"caper\",\"sneer\",\"boxer\",\"jumbo\",\"lunge\",\"space\",\"avail\",\"short\",\"slurp\",\"loyal\",\"flirt\",\"pizza\",\"conch\",\"tempo\",\"droop\",\"plate\",\"bible\",\"plunk\",\"afoul\",\"savoy\",\"steep\",\"agile\",\"stake\",\"dwell\",\"knave\",\"beard\",\"arose\",\"motif\",\"smash\",\"broil\",\"glare\",\"shove\",\"baggy\",\"mammy\",\"swamp\",\"along\",\"rugby\",\"wager\",\"quack\",\"squat\",\"snaky\",\"debit\",\"mange\",\"skate\",\"ninth\",\"joust\",\"tramp\",\"spurn\",\"medal\",\"micro\",\"rebel\",\"flank\",\"learn\",\"nadir\",\"maple\",\"comfy\",\"remit\",\"gruff\",\"ester\",\"least\",\"mogul\",\"fetch\",\"cause\",\"oaken\",\"aglow\",\"meaty\",\"gaffe\",\"shyly\",\"racer\",\"prowl\",\"thief\",\"stern\",\"poesy\",\"rocky\",\"tweet\",\"waist\",\"spire\",\"grope\",\"havoc\",\"patsy\",\"truly\",\"forty\",\"deity\",\"uncle\",\"swish\",\"giver\",\"preen\",\"bevel\",\"lemur\",\"draft\",\"slope\",\"annoy\",\"lingo\",\"bleak\",\"ditty\",\"curly\",\"cedar\",\"dirge\",\"grown\",\"horde\",\"drool\",\"shuck\",\"crypt\",\"cumin\",\"stock\",\"gravy\",\"locus\",\"wider\",\"breed\",\"quite\",\"chafe\",\"cache\",\"blimp\",\"deign\",\"fiend\",\"logic\",\"cheap\",\"elide\",\"rigid\",\"false\",\"renal\",\"pence\",\"rowdy\",\"shoot\",\"blaze\",\"envoy\",\"posse\",\"brief\",\"never\",\"abort\",\"mouse\",\"mucky\",\"sulky\",\"fiery\",\"media\",\"trunk\",\"yeast\",\"clear\",\"skunk\",\"scalp\",\"bitty\",\"cider\",\"koala\",\"duvet\",\"segue\",\"creme\",\"super\",\"grill\",\"after\",\"owner\",\"ember\",\"reach\",\"nobly\",\"empty\",\"speed\",\"gipsy\",\"recur\",\"smock\",\"dread\",\"merge\",\"burst\",\"kappa\",\"amity\",\"shaky\",\"hover\",\"carol\",\"snort\",\"synod\",\"faint\",\"haunt\",\"flour\",\"chair\",\"detox\",\"shrew\",\"tense\",\"plied\",\"quark\",\"burly\",\"novel\",\"waxen\",\"stoic\",\"jerky\",\"blitz\",\"beefy\",\"lyric\",\"hussy\",\"towel\",\"quilt\",\"below\",\"bingo\",\"wispy\",\"brash\",\"scone\",\"toast\",\"easel\",\"saucy\",\"value\",\"spice\",\"honor\",\"route\",\"sharp\",\"bawdy\",\"radii\",\"skull\",\"phony\",\"issue\",\"lager\",\"swell\",\"urine\",\"gassy\",\"trial\",\"flora\",\"upper\",\"latch\",\"wight\",\"brick\",\"retry\",\"holly\",\"decal\",\"grass\",\"shack\",\"dogma\",\"mover\",\"defer\",\"sober\",\"optic\",\"crier\",\"vying\",\"nomad\",\"flute\",\"hippo\",\"shark\",\"drier\",\"obese\",\"bugle\",\"tawny\",\"chalk\",\"feast\",\"ruddy\",\"pedal\",\"scarf\",\"cruel\",\"bleat\",\"tidal\",\"slush\",\"semen\",\"windy\",\"dusty\",\"sally\",\"igloo\",\"nerdy\",\"jewel\",\"shone\",\"whale\",\"hymen\",\"abuse\",\"fugue\",\"elbow\",\"crumb\",\"pansy\",\"welsh\",\"syrup\",\"terse\",\"suave\",\"gamut\",\"swung\",\"drake\",\"freed\",\"afire\",\"shirt\",\"grout\",\"oddly\",\"tithe\",\"plaid\",\"dummy\",\"broom\",\"blind\",\"torch\",\"enemy\",\"again\",\"tying\",\"pesky\",\"alter\",\"gazer\",\"noble\",\"ethos\",\"bride\",\"extol\",\"decor\",\"hobby\",\"beast\",\"idiom\",\"utter\",\"these\",\"sixth\",\"alarm\",\"erase\",\"elegy\",\"spunk\",\"piper\",\"scaly\",\"scold\",\"hefty\",\"chick\",\"sooty\",\"canal\",\"whiny\",\"slash\",\"quake\",\"joint\",\"swept\",\"prude\",\"heavy\",\"wield\",\"femme\",\"lasso\",\"maize\",\"shale\",\"screw\",\"spree\",\"smoky\",\"whiff\",\"scent\",\"glade\",\"spent\",\"prism\",\"stoke\",\"riper\",\"orbit\",\"cocoa\",\"guilt\",\"humus\",\"shush\",\"table\",\"smirk\",\"wrong\",\"noisy\",\"alert\",\"shiny\",\"elate\",\"resin\",\"whole\",\"hunch\",\"pixel\",\"polar\",\"hotel\",\"sword\",\"cleat\",\"mango\",\"rumba\",\"puffy\",\"filly\",\"billy\",\"leash\",\"clout\",\"dance\",\"ovate\",\"facet\",\"chili\",\"paint\",\"liner\",\"curio\",\"salty\",\"audio\",\"snake\",\"fable\",\"cloak\",\"navel\",\"spurt\",\"pesto\",\"balmy\",\"flash\",\"unwed\",\"early\",\"churn\",\"weedy\",\"stump\",\"lease\",\"witty\",\"wimpy\",\"spoof\",\"saner\",\"blend\",\"salsa\",\"thick\",\"warty\",\"manic\",\"blare\",\"squib\",\"spoon\",\"probe\",\"crepe\",\"knack\",\"force\",\"debut\",\"order\",\"haste\",\"teeth\",\"agent\",\"widen\",\"icily\",\"slice\",\"ingot\",\"clash\",\"juror\",\"blood\",\"abode\",\"throw\",\"unity\",\"pivot\",\"slept\",\"troop\",\"spare\",\"sewer\",\"parse\",\"morph\",\"cacti\",\"tacky\",\"spool\",\"demon\",\"moody\",\"annex\",\"begin\",\"fuzzy\",\"patch\",\"water\",\"lumpy\",\"admin\",\"omega\",\"limit\",\"tabby\",\"macho\",\"aisle\",\"skiff\",\"basis\",\"plank\",\"verge\",\"botch\",\"crawl\",\"lousy\",\"slain\",\"cubic\",\"raise\",\"wrack\",\"guide\",\"foist\",\"cameo\",\"under\",\"actor\",\"revue\",\"fraud\",\"harpy\",\"scoop\",\"climb\",\"refer\",\"olden\",\"clerk\",\"debar\",\"tally\",\"ethic\",\"cairn\",\"tulle\",\"ghoul\",\"hilly\",\"crude\",\"apart\",\"scale\",\"older\",\"plain\",\"sperm\",\"briny\",\"abbot\",\"rerun\",\"quest\",\"crisp\",\"bound\",\"befit\",\"drawn\",\"suite\",\"itchy\",\"cheer\",\"bagel\",\"guess\",\"broad\",\"axiom\",\"chard\",\"caput\",\"leant\",\"harsh\",\"curse\",\"proud\",\"swing\",\"opine\",\"taste\",\"lupus\",\"gumbo\",\"miner\",\"green\",\"chasm\",\"lipid\",\"topic\",\"armor\",\"brush\",\"crane\",\"mural\",\"abled\",\"habit\",\"bossy\",\"maker\",\"dusky\",\"dizzy\",\"lithe\",\"brook\",\"jazzy\",\"fifty\",\"sense\",\"giant\",\"surly\",\"legal\",\"fatal\",\"flunk\",\"began\",\"prune\",\"small\",\"slant\",\"scoff\",\"torus\",\"ninny\",\"covey\",\"viper\",\"taken\",\"moral\",\"vogue\",\"owing\",\"token\",\"entry\",\"booth\",\"voter\",\"chide\",\"elfin\",\"ebony\",\"neigh\",\"minim\",\"melon\",\"kneed\",\"decoy\",\"voila\",\"ankle\",\"arrow\",\"mushy\",\"tribe\",\"cease\",\"eager\",\"birth\",\"graph\",\"odder\",\"terra\",\"weird\",\"tried\",\"clack\",\"color\",\"rough\",\"weigh\",\"uncut\",\"ladle\",\"strip\",\"craft\",\"minus\",\"dicey\",\"titan\",\"lucid\",\"vicar\",\"dress\",\"ditch\",\"gypsy\",\"pasta\",\"taffy\",\"flame\",\"swoop\",\"stock\",\"intense\",\"canny\",\"cause\",\"serve\",\"study\",\"wrote\",\"light\",\"found\",\"later\",\"round\",\"house\",\"world\",\"should\",\"below\"];\n\n// Valid guess words (10,657 words) - additional words accepted as guesses but not used as answers\nexport const OFFICIAL_WORDLE_GUESSES = [\"aahed\",\"aalii\",\"aargh\",\"aarti\",\"abaca\",\"abaci\",\"abacs\",\"abaft\",\"abaka\",\"abamp\",\"aband\",\"abash\",\"abask\",\"abaya\",\"abbas\",\"abbed\",\"abbes\",\"abcee\",\"abeam\",\"abear\",\"abele\",\"abers\",\"abets\",\"abies\",\"abler\",\"ables\",\"ablet\",\"ablow\",\"abmho\",\"abohm\",\"aboil\",\"aboma\",\"aboon\",\"abord\",\"abore\",\"abram\",\"abray\",\"abrim\",\"abrin\",\"abris\",\"absey\",\"absit\",\"abuna\",\"abune\",\"abuts\",\"abuzz\",\"abyes\",\"abysm\",\"acais\",\"acari\",\"accas\",\"accoy\",\"acerb\",\"acers\",\"aceta\",\"achar\",\"ached\",\"aches\",\"achoo\",\"acids\",\"acidy\",\"acing\",\"acini\",\"ackee\",\"acker\",\"acmes\",\"acmic\",\"acned\",\"acnes\",\"acock\",\"acold\",\"acred\",\"acres\",\"acros\",\"acted\",\"actin\",\"acton\",\"acyls\",\"adaws\",\"adays\",\"adbot\",\"addax\",\"added\",\"adder\",\"addio\",\"addle\",\"adeem\",\"adhan\",\"adieu\",\"adios\",\"adits\",\"adman\",\"admen\",\"admix\",\"adobo\",\"adown\",\"adoze\",\"adrad\",\"adred\",\"adsum\",\"aduki\",\"adunc\",\"adust\",\"advew\",\"adyta\",\"adzed\",\"adzes\",\"aecia\",\"aedes\",\"aegis\",\"aeons\",\"aerie\",\"aeros\",\"aesir\",\"afald\",\"afara\",\"afars\",\"afear\",\"aflaj\",\"afore\",\"afrit\",\"afros\",\"agama\",\"agami\",\"agars\",\"agast\",\"agave\",\"agaze\",\"agene\",\"agers\",\"agger\",\"aggie\",\"aggri\",\"aggro\",\"aggry\",\"aghas\",\"agila\",\"agios\",\"agism\",\"agist\",\"agita\",\"aglee\",\"aglet\",\"agley\",\"agloo\",\"aglus\",\"agmas\",\"agoge\",\"agone\",\"agons\",\"agood\",\"agria\",\"agrin\",\"agros\",\"agued\",\"agues\",\"aguna\",\"aguti\",\"aheap\",\"ahent\",\"ahigh\",\"ahind\",\"ahing\",\"ahint\",\"ahold\",\"ahull\",\"ahuru\",\"aidas\",\"aided\",\"aides\",\"aidoi\",\"aidos\",\"aiery\",\"aigas\",\"aight\",\"ailed\",\"aimed\",\"aimer\",\"ainee\",\"ainga\",\"aioli\",\"aired\",\"airer\",\"airns\",\"airth\",\"airts\",\"aitch\",\"aitus\",\"aiver\",\"aiyee\",\"aizle\",\"ajies\",\"ajiva\",\"ajuga\",\"ajwan\",\"akees\",\"akela\",\"akene\",\"aking\",\"akita\",\"akkas\",\"alaap\",\"alack\",\"alamo\",\"aland\",\"alane\",\"alang\",\"alans\",\"alant\",\"alapa\",\"alaps\",\"alary\",\"alate\",\"alays\",\"albas\",\"albee\",\"alcid\",\"alcos\",\"aldea\",\"alder\",\"aldol\",\"aleck\",\"alecs\",\"alefs\",\"aleft\",\"aleph\",\"alews\",\"aleye\",\"alfas\",\"algal\",\"algas\",\"algid\",\"algin\",\"algor\",\"algum\",\"alias\",\"alifs\",\"aline\",\"alist\",\"aliya\",\"alkie\",\"alkos\",\"alkyd\",\"alkyl\",\"allee\",\"allel\",\"allis\",\"allod\",\"allyl\",\"almah\",\"almas\",\"almeh\",\"almes\",\"almud\",\"almug\",\"alods\",\"aloed\",\"aloes\",\"aloha\",\"aloin\",\"aloos\",\"alowe\",\"altho\",\"altos\",\"alula\",\"alums\",\"alure\",\"alvar\",\"alway\",\"amahs\",\"amain\",\"amate\",\"amaut\",\"amban\",\"ambit\",\"ambos\",\"ambry\",\"ameba\",\"ameer\",\"amene\",\"amens\",\"ament\",\"amias\",\"amice\",\"amici\",\"amide\",\"amido\",\"amids\",\"amies\",\"amiga\",\"amigo\",\"amine\",\"amino\",\"amins\",\"amirs\",\"amlas\",\"amman\",\"ammon\",\"ammos\",\"amnia\",\"amnic\",\"amnio\",\"amoks\",\"amole\",\"amort\",\"amour\",\"amove\",\"amowt\",\"amped\",\"ampul\",\"amrit\",\"amuck\",\"amyls\",\"anana\",\"anata\",\"ancho\",\"ancle\",\"ancon\",\"andro\",\"anear\",\"anele\",\"anent\",\"angas\",\"anglo\",\"anigh\",\"anile\",\"anils\",\"anima\",\"animi\",\"anion\",\"anise\",\"anker\",\"ankhs\",\"ankus\",\"anlas\",\"annal\",\"annas\",\"annat\",\"anoas\",\"anole\",\"anomy\",\"ansae\",\"antae\",\"antar\",\"antas\",\"anted\",\"antes\",\"antis\",\"antra\",\"antre\",\"antsy\",\"anura\",\"anyon\",\"apace\",\"apage\",\"apaid\",\"apayd\",\"apays\",\"apeak\",\"apeek\",\"apers\",\"apert\",\"apery\",\"apgar\",\"aphis\",\"apian\",\"apiol\",\"apish\",\"apism\",\"apode\",\"apods\",\"apoop\",\"aport\",\"appal\",\"appay\",\"appel\",\"appro\",\"appui\",\"appuy\",\"apres\",\"apses\",\"apsis\",\"apsos\",\"apted\",\"apter\",\"aquae\",\"aquas\",\"araba\",\"araks\",\"arame\",\"arars\",\"arbas\",\"arced\",\"archi\",\"arcos\",\"arcus\",\"ardeb\",\"ardri\",\"aread\",\"areae\",\"areal\",\"arear\",\"areas\",\"areca\",\"aredd\",\"arede\",\"arefy\",\"areic\",\"arene\",\"arepa\",\"arere\",\"arete\",\"arets\",\"arett\",\"argal\",\"argan\",\"argil\",\"argle\",\"argol\",\"argon\",\"argot\",\"argus\",\"arhat\",\"arias\",\"ariel\",\"ariki\",\"arils\",\"ariot\",\"arish\",\"arked\",\"arled\",\"arles\",\"armed\",\"armer\",\"armet\",\"armil\",\"arnas\",\"arnut\",\"aroba\",\"aroha\",\"aroid\",\"arpas\",\"arpen\",\"arrah\",\"arras\",\"arret\",\"arris\",\"arroz\",\"arsed\",\"arses\",\"arsey\",\"arsis\",\"artal\",\"artel\",\"artic\",\"artis\",\"aruhe\",\"arums\",\"arval\",\"arvee\",\"arvos\",\"aryls\",\"asana\",\"ascon\",\"ascus\",\"asdic\",\"ashed\",\"ashes\",\"ashet\",\"asked\",\"asker\",\"askoi\",\"askos\",\"aspen\",\"asper\",\"aspic\",\"aspie\",\"aspis\",\"aspro\",\"assai\",\"assam\",\"asses\",\"assez\",\"assot\",\"aster\",\"astir\",\"astun\",\"asura\",\"asway\",\"aswim\",\"asyla\",\"ataps\",\"ataxy\",\"atigi\",\"atilt\",\"atimy\",\"atlas\",\"atman\",\"atmas\",\"atmos\",\"atocs\",\"atoke\",\"atoks\",\"atoms\",\"atomy\",\"atony\",\"atopy\",\"atria\",\"atrip\",\"attap\",\"attar\",\"atuas\",\"audad\",\"auger\",\"aught\",\"aulas\",\"aulic\",\"auloi\",\"aulos\",\"aumil\",\"aunes\",\"aunts\",\"aurae\",\"aural\",\"aurar\",\"auras\",\"aurei\",\"aures\",\"auric\",\"auris\",\"aurum\",\"autos\",\"auxin\",\"avale\",\"avant\",\"avast\",\"avels\",\"avens\",\"avers\",\"avgas\",\"avine\",\"avion\",\"avise\",\"aviso\",\"avize\",\"avows\",\"avyze\",\"awarn\",\"awato\",\"awave\",\"aways\",\"awdls\",\"aweel\",\"aweto\",\"awing\",\"awmry\",\"awned\",\"awner\",\"awols\",\"awork\",\"axels\",\"axile\",\"axils\",\"axing\",\"axite\",\"axled\",\"axles\",\"axman\",\"axmen\",\"axoid\",\"axone\",\"axons\",\"ayahs\",\"ayaya\",\"ayelp\",\"aygre\",\"ayins\",\"ayont\",\"ayres\",\"ayrie\",\"azans\",\"azide\",\"azido\",\"azine\",\"azlon\",\"azoic\",\"azole\",\"azons\",\"azote\",\"azoth\",\"azuki\",\"azurn\",\"azury\",\"azygy\",\"azyme\",\"azyms\",\"baaed\",\"baals\",\"babas\",\"babel\",\"babes\",\"babka\",\"baboo\",\"babul\",\"babus\",\"bacca\",\"bacco\",\"baccy\",\"bacha\",\"bachs\",\"backs\",\"baddy\",\"baels\",\"baffs\",\"baffy\",\"bafts\",\"baghs\",\"bagie\",\"bahts\",\"bahus\",\"bahut\",\"bails\",\"bairn\",\"baisa\",\"baith\",\"baits\",\"baiza\",\"baize\",\"bajan\",\"bajra\",\"bajri\",\"bajus\",\"baked\",\"baken\",\"bakes\",\"bakra\",\"balas\",\"balds\",\"baldy\",\"baled\",\"bales\",\"balks\",\"balky\",\"balls\",\"bally\",\"balms\",\"baloo\",\"balsa\",\"balti\",\"balun\",\"balus\",\"bambi\",\"banak\",\"banco\",\"bancs\",\"banda\",\"bandh\",\"bands\",\"bandy\",\"baned\",\"banes\",\"bangs\",\"bania\",\"banks\",\"banns\",\"bants\",\"bantu\",\"banty\",\"banya\",\"bapus\",\"barbe\",\"barbs\",\"barby\",\"barca\",\"barde\",\"bardo\",\"bards\",\"bardy\",\"bared\",\"barer\",\"bares\",\"barfi\",\"barfs\",\"baric\",\"barks\",\"barky\",\"barms\",\"barmy\",\"barns\",\"barny\",\"barps\",\"barra\",\"barre\",\"barro\",\"barry\",\"barye\",\"basan\",\"based\",\"basen\",\"baser\",\"bases\",\"basho\",\"basij\",\"basks\",\"bason\",\"basse\",\"bassi\",\"basso\",\"bassy\",\"basta\",\"basti\",\"basto\",\"basts\",\"bated\",\"bates\",\"baths\",\"batik\",\"batta\",\"batts\",\"battu\",\"bauds\",\"bauks\",\"baulk\",\"baurs\",\"bavin\",\"bawds\",\"bawks\",\"bawls\",\"bawns\",\"bawrs\",\"bawty\",\"bayed\",\"bayer\",\"bayes\",\"bayle\",\"bayts\",\"bazar\",\"bazoo\",\"beads\",\"beaks\",\"beaky\",\"beals\",\"beams\",\"beamy\",\"beano\",\"beans\",\"beany\",\"beare\",\"bears\",\"beath\",\"beats\",\"beaty\",\"beaus\",\"beaut\",\"beaux\",\"bebop\",\"becap\",\"becke\",\"becks\",\"bedad\",\"bedel\",\"bedes\",\"bedew\",\"bedim\",\"bedye\",\"beedi\",\"beefs\",\"beeps\",\"beers\",\"beery\",\"beets\",\"befog\",\"begad\",\"begar\",\"begem\",\"begot\",\"begum\",\"beige\",\"beigy\",\"beins\",\"bekah\",\"belah\",\"belar\",\"belay\",\"belee\",\"belga\",\"bells\",\"belon\",\"belts\",\"bemad\",\"bemas\",\"bemix\",\"bemud\",\"bends\",\"bendy\",\"benes\",\"benet\",\"benga\",\"benis\",\"benne\",\"benni\",\"benny\",\"bento\",\"bents\",\"benty\",\"bepat\",\"beray\",\"beres\",\"bergs\",\"berko\",\"berks\",\"berme\",\"berms\",\"berob\",\"beryl\",\"besat\",\"besaw\",\"besee\",\"beses\",\"besit\",\"besom\",\"besot\",\"besti\",\"bests\",\"betas\",\"beted\",\"betes\",\"beths\",\"betid\",\"beton\",\"betta\",\"betty\",\"bever\",\"bevor\",\"bevue\",\"bevvy\",\"bewet\",\"bewig\",\"bezes\",\"bezil\",\"bezzy\",\"bhais\",\"bhaji\",\"bhang\",\"bhats\",\"bhels\",\"bhoot\",\"bhuna\",\"bhuts\",\"biach\",\"biali\",\"bialy\",\"bibbs\",\"bibes\",\"biccy\",\"bices\",\"bided\",\"bider\",\"bides\",\"bidet\",\"bidis\",\"bidon\",\"bield\",\"biers\",\"biffo\",\"biffs\",\"biffy\",\"bifid\",\"bigae\",\"biggs\",\"biggy\",\"bigha\",\"bight\",\"bigly\",\"bigos\",\"bijou\",\"biked\",\"biker\",\"bikes\",\"bikie\",\"bilbo\",\"bilby\",\"biled\",\"biles\",\"bilgy\",\"bilks\",\"bills\",\"bimah\",\"bimas\",\"bimbo\",\"binal\",\"bindi\",\"binds\",\"biner\",\"bines\",\"bings\",\"bingy\",\"binit\",\"binks\",\"bints\",\"biogs\",\"biont\",\"biota\",\"biped\",\"bipod\",\"birds\",\"birks\",\"birle\",\"birls\",\"biros\",\"birrs\",\"birse\",\"birsy\",\"bises\",\"bisks\",\"bisom\",\"biter\",\"bites\",\"bitos\",\"bitou\",\"bitsy\",\"bitte\",\"bitts\",\"bivia\",\"bivvy\",\"bizes\",\"bizzo\",\"bizzy\",\"blabs\",\"blads\",\"blady\",\"blaer\",\"blaes\",\"blaff\",\"blags\",\"blahs\",\"blain\",\"blams\",\"blart\",\"blase\",\"blash\",\"blate\",\"blats\",\"blatt\",\"blaud\",\"blawn\",\"blaws\",\"blays\",\"blear\",\"blebs\",\"blech\",\"blees\",\"blent\",\"blert\",\"blest\",\"blets\",\"bleys\",\"blimy\",\"bling\",\"blini\",\"blins\",\"bliny\",\"blips\",\"blist\",\"blite\",\"blits\",\"blive\",\"blobs\",\"blocs\",\"blogs\",\"blook\",\"bloop\",\"blore\",\"blots\",\"blows\",\"blowy\",\"blubs\",\"blude\",\"bluds\",\"bludy\",\"blued\",\"blues\",\"bluet\",\"bluey\",\"bluid\",\"blume\",\"blunk\",\"blurs\",\"blype\",\"boabs\",\"boaks\",\"boars\",\"boart\",\"boats\",\"bobac\",\"bobak\",\"bobas\",\"bobol\",\"bobos\",\"bocca\",\"bocce\",\"bocci\",\"boche\",\"bocks\",\"boded\",\"bodes\",\"bodge\",\"bodhi\",\"bodle\",\"boeps\",\"boets\",\"boeuf\",\"boffo\",\"boffs\",\"bogan\",\"bogey\",\"boggy\",\"bogie\",\"bogle\",\"bogue\",\"bogus\",\"bohea\",\"bohos\",\"boils\",\"boing\",\"boink\",\"boite\",\"boked\",\"bokeh\",\"bokes\",\"bokos\",\"bolar\",\"bolas\",\"bolds\",\"boles\",\"bolix\",\"bolls\",\"bolos\",\"bolts\",\"bolus\",\"bomas\",\"bombe\",\"bombo\",\"bombs\",\"bonce\",\"bonds\",\"boned\",\"boner\",\"bones\",\"bongs\",\"bonie\",\"bonks\",\"bonne\",\"bonny\",\"bonza\",\"bonze\",\"booai\",\"booay\",\"boobs\",\"boody\",\"booed\",\"boofy\",\"boogy\",\"boohs\",\"books\",\"booky\",\"bools\",\"booms\",\"boomy\",\"boong\",\"boons\",\"boord\",\"boors\",\"boose\",\"boots\",\"boppy\",\"borak\",\"boral\",\"boras\",\"borde\",\"bords\",\"bored\",\"boree\",\"borel\",\"borer\",\"bores\",\"borgo\",\"boric\",\"borks\",\"borms\",\"borna\",\"boron\",\"borts\",\"borty\",\"bortz\",\"bosie\",\"bosks\",\"bosky\",\"boson\",\"bosun\",\"botas\",\"botel\",\"botes\",\"bothy\",\"botte\",\"botts\",\"botty\",\"bouge\",\"bouks\",\"boult\",\"bouns\",\"bourd\",\"bourg\",\"bourn\",\"bouse\",\"bousy\",\"bouts\",\"bovid\",\"bowat\",\"bowed\",\"bower\",\"bowes\",\"bowet\",\"bowie\",\"bowls\",\"bowne\",\"bowrs\",\"bowse\",\"boxed\",\"boxen\",\"boxes\",\"boxla\",\"boxty\",\"boyar\",\"boyau\",\"boyed\",\"boyfs\",\"boygs\",\"boyla\",\"boyos\",\"boysy\",\"bozos\",\"braai\",\"brach\",\"brack\",\"bract\",\"brads\",\"braes\",\"brags\",\"brail\",\"braks\",\"braky\",\"brame\",\"brane\",\"brank\",\"brans\",\"brant\",\"brast\",\"brats\",\"brava\",\"bravi\",\"braws\",\"braxy\",\"brays\",\"braza\",\"braze\",\"bream\",\"brede\",\"breds\",\"breem\",\"breer\",\"brees\",\"breid\",\"breis\",\"breme\",\"brens\",\"brent\",\"brere\",\"brers\",\"breve\",\"brews\",\"breys\",\"brier\",\"bries\",\"brigs\",\"briki\",\"briks\",\"brill\",\"brims\",\"brins\",\"brios\",\"brise\",\"briss\",\"brith\",\"brits\",\"britt\",\"brize\",\"broch\",\"brock\",\"brods\",\"brogh\",\"brogs\",\"brome\",\"bromo\",\"bronc\",\"brond\",\"brool\",\"broos\",\"brose\",\"brosy\",\"brows\",\"brugh\",\"bruin\",\"bruit\",\"brule\",\"brume\",\"brung\",\"brusk\",\"brust\",\"bruts\",\"buats\",\"buaze\",\"bubal\",\"bubas\",\"bubba\",\"bubbe\",\"bubby\",\"bubus\",\"buchu\",\"bucko\",\"bucks\",\"bucku\",\"budas\",\"budis\",\"budos\",\"buffa\",\"buffe\",\"buffi\",\"buffo\",\"buffs\",\"buffy\",\"bufos\",\"bufty\",\"buhls\",\"buhrs\",\"buiks\",\"buist\",\"bukes\",\"bulbs\",\"bulgy\",\"bulks\",\"bulla\",\"bulls\",\"bulse\",\"bumbo\",\"bumfs\",\"bumph\",\"bumps\",\"bumpy\",\"bunas\",\"bunce\",\"bunco\",\"bunde\",\"bundh\",\"bunds\",\"bundt\",\"bundu\",\"bundy\",\"bungs\",\"bungy\",\"bunia\",\"bunje\",\"bunjy\",\"bunko\",\"bunks\",\"bunns\",\"bunts\",\"bunty\",\"bunya\",\"buoys\",\"buppy\",\"buran\",\"buras\",\"burbs\",\"burds\",\"buret\",\"burfi\",\"burgh\",\"burgs\",\"burin\",\"burka\",\"burke\",\"burks\",\"burls\",\"burns\",\"buroo\",\"burps\",\"burqa\",\"burro\",\"burrs\",\"burry\",\"bursa\",\"burse\",\"busby\",\"buses\",\"busks\",\"busky\",\"bussu\",\"busti\",\"busts\",\"busty\",\"buteo\",\"butes\",\"butle\",\"butoh\",\"butts\",\"butty\",\"butut\",\"butyl\",\"buzzy\",\"bwana\",\"bwazi\",\"byded\",\"bydes\",\"byked\",\"bykes\",\"byres\",\"byrls\",\"byssi\",\"bytes\",\"byway\",\"caaed\",\"cabas\",\"caber\",\"cabob\",\"caboc\",\"cabre\",\"cacas\",\"cacks\",\"cacky\",\"cadee\",\"cades\",\"cadge\",\"cadgy\",\"cadie\",\"cadis\",\"cadre\",\"caeca\",\"caese\",\"cafes\",\"caffs\",\"caged\",\"cager\",\"cages\",\"cagot\",\"cahow\",\"caids\",\"cains\",\"caird\",\"cajon\",\"cajun\",\"caked\",\"cakes\",\"cakey\",\"calfs\",\"calid\",\"calif\",\"calix\",\"calks\",\"calla\",\"calls\",\"calms\",\"calmy\",\"calos\",\"calpa\",\"calps\",\"calve\",\"calyx\",\"caman\",\"camas\",\"cames\",\"camis\",\"camos\",\"campi\",\"campo\",\"camps\",\"campy\",\"camus\",\"caned\",\"caneh\",\"caner\",\"canes\",\"cangs\",\"canid\",\"canna\",\"canns\",\"canso\",\"canst\",\"canto\",\"cants\",\"canty\",\"capas\",\"caped\",\"capes\",\"capex\",\"caphs\",\"capiz\",\"caple\",\"capon\",\"capos\",\"capot\",\"capri\",\"capul\",\"carap\",\"carbo\",\"carbs\",\"carby\",\"cardi\",\"cards\",\"cardy\",\"cared\",\"carer\",\"cares\",\"caret\",\"carex\",\"carks\",\"carle\",\"carls\",\"carns\",\"carny\",\"carob\",\"carom\",\"caron\",\"carpi\",\"carps\",\"carrs\",\"carse\",\"carta\",\"carte\",\"carts\",\"carvy\",\"casas\",\"casco\",\"cased\",\"cases\",\"casks\",\"casky\",\"casts\",\"casus\",\"cates\",\"cauda\",\"cauks\",\"cauld\",\"cauls\",\"caums\",\"caups\",\"cauri\",\"causa\",\"cavas\",\"caved\",\"cavel\",\"caver\",\"caves\",\"cavie\",\"cawed\",\"cawks\",\"caxon\",\"ceaze\",\"cebid\",\"cecal\",\"cecum\",\"ceded\",\"ceder\",\"cedes\",\"cedis\",\"ceiba\",\"ceili\",\"ceils\",\"celeb\",\"cella\",\"celli\",\"cells\",\"celom\",\"celts\",\"cense\",\"cento\",\"cents\",\"centu\",\"ceorl\",\"cepes\",\"cerci\",\"cered\",\"ceres\",\"cerge\",\"ceria\",\"ceric\",\"cerne\",\"ceroc\",\"ceros\",\"certs\",\"certy\",\"cesse\",\"cesta\",\"cesti\",\"cetes\",\"cetyl\",\"cezve\",\"chace\",\"chack\",\"chaco\",\"chado\",\"chads\",\"chaft\",\"chais\",\"chals\",\"chams\",\"chana\",\"chang\",\"chank\",\"chape\",\"chaps\",\"chapt\",\"chara\",\"chare\",\"chark\",\"charr\",\"chars\",\"chary\",\"chats\",\"chave\",\"chavs\",\"chawk\",\"chaws\",\"chaya\",\"chays\",\"cheep\",\"chefs\",\"cheka\",\"chela\",\"chelp\",\"chemo\",\"chems\",\"chere\",\"chert\",\"cheth\",\"chevy\",\"chews\",\"chewy\",\"chiao\",\"chias\",\"chibs\",\"chica\",\"chich\",\"chico\",\"chics\",\"chiel\",\"chiks\",\"chile\",\"chimb\",\"chimo\",\"chimp\",\"chine\",\"ching\",\"chino\",\"chins\",\"chips\",\"chirk\",\"chirl\",\"chirm\",\"chiro\",\"chirr\",\"chirt\",\"chiru\",\"chits\",\"chive\",\"chivs\",\"chivy\",\"chizz\",\"choco\",\"chocs\",\"chode\",\"chogs\",\"choil\",\"choko\",\"choky\",\"chola\",\"choli\",\"cholo\",\"chomp\",\"chons\",\"choof\",\"chook\",\"choom\",\"choon\",\"chops\",\"chota\",\"chott\",\"chout\",\"choux\",\"chowk\",\"chows\",\"chubs\",\"chufa\",\"chuff\",\"chugs\",\"chums\",\"churl\",\"churr\",\"chuse\",\"chuts\",\"chyle\",\"chyme\",\"chynd\",\"cibol\",\"cided\",\"cides\",\"ciels\",\"ciggy\",\"cilia\",\"cills\",\"cimar\",\"cimex\",\"cinct\",\"cines\",\"cinqs\",\"cions\",\"cippi\",\"circs\",\"cires\",\"cirls\",\"cirri\",\"cisco\",\"cissy\",\"cists\",\"cital\",\"cited\",\"citer\",\"cites\",\"cives\",\"civet\",\"civie\",\"civvy\",\"clach\",\"clade\",\"clads\",\"claes\",\"clags\",\"clame\",\"clams\",\"clans\",\"claps\",\"clapt\",\"claro\",\"clart\",\"clary\",\"clast\",\"clats\",\"claut\",\"clave\",\"clavi\",\"claws\",\"clays\",\"cleck\",\"cleek\",\"cleep\",\"clefs\",\"clegs\",\"cleik\",\"clems\",\"clepe\",\"clept\",\"cleve\",\"clews\",\"clied\",\"clies\",\"clift\",\"clime\",\"cline\",\"clint\",\"clipe\",\"clips\",\"clipt\",\"clits\",\"cloam\",\"clods\",\"cloff\",\"clogs\",\"cloke\",\"clomb\",\"clomp\",\"clonk\",\"clons\",\"cloop\",\"cloot\",\"clops\",\"clote\",\"clots\",\"clour\",\"clous\",\"clows\",\"cloye\",\"cloys\",\"cloze\",\"clubs\",\"clues\",\"cluey\",\"clunk\",\"clype\",\"cnida\",\"coact\",\"coady\",\"coala\",\"coals\",\"coaly\",\"coapt\",\"coarb\",\"coate\",\"coati\",\"coats\",\"cobbs\",\"cobby\",\"cobia\",\"coble\",\"cobza\",\"cocas\",\"cocci\",\"cocco\",\"cocks\",\"cocky\",\"cocos\",\"codas\",\"codec\",\"coded\",\"coden\",\"coder\",\"codes\",\"codex\",\"codon\",\"coeds\",\"coffs\",\"cogie\",\"cogon\",\"cogue\",\"cohab\",\"cohen\",\"cohoe\",\"cohog\",\"cohos\",\"coifs\",\"coign\",\"coils\",\"coins\",\"coirs\",\"coits\",\"coked\",\"cokes\",\"colas\",\"colby\",\"colds\",\"coled\",\"coles\",\"coley\",\"colic\",\"colin\",\"colls\",\"colly\",\"colog\",\"colts\",\"colza\",\"comae\",\"comal\",\"comas\",\"combe\",\"combi\",\"combo\",\"combs\",\"comby\",\"comer\",\"comes\",\"comix\",\"commo\",\"comms\",\"commy\",\"compo\",\"comps\",\"compt\",\"comte\",\"comus\",\"coned\",\"cones\",\"coney\",\"conga\",\"conge\",\"congo\",\"conia\",\"conic\",\"conin\",\"conks\",\"conky\",\"conne\",\"conns\",\"conte\",\"conto\",\"conus\",\"cooch\",\"cooed\",\"cooee\",\"cooer\",\"cooey\",\"coofs\",\"cooks\",\"cooky\",\"cools\",\"cooly\",\"coomb\",\"cooms\",\"coomy\",\"coons\",\"coops\",\"coopt\",\"coost\",\"coots\",\"cooze\",\"copal\",\"copay\",\"coped\",\"copen\",\"coper\",\"copes\",\"copra\",\"copse\",\"copsy\",\"coqui\",\"coram\",\"corbe\",\"corby\",\"cords\",\"cored\",\"corer\",\"cores\",\"corgi\",\"coria\",\"corks\",\"corky\",\"corms\",\"corns\",\"cornu\",\"corny\",\"corps\",\"corse\",\"corso\",\"cosec\",\"cosed\",\"coses\",\"coset\",\"cosey\",\"cosie\",\"costa\",\"coste\",\"costs\",\"cotan\",\"coted\",\"cotes\",\"coths\",\"cotta\",\"cotts\",\"couch\",\"coude\",\"cough\",\"could\",\"couls\",\"count\",\"coupe\",\"coups\",\"courb\",\"courd\",\"coure\",\"cours\",\"court\",\"couta\",\"couth\",\"coves\",\"covin\",\"cowal\",\"cowan\",\"cowed\",\"cower\",\"cowks\",\"cowls\",\"cowps\",\"cowry\",\"coxae\",\"coxal\",\"coxed\",\"coxes\",\"coypu\",\"coypu\",\"cozes\",\"cozey\",\"cozie\",\"craal\",\"crabs\",\"crack\",\"craft\",\"crags\",\"craic\",\"craig\",\"crake\",\"crame\",\"cramp\",\"crams\",\"crane\",\"crank\",\"crans\",\"crape\",\"craps\",\"crapy\",\"crare\",\"crash\",\"crass\",\"crate\",\"crave\",\"crawl\",\"craws\",\"craze\",\"crazy\",\"creak\",\"cream\",\"creat\",\"creds\",\"creed\",\"creek\",\"creel\",\"creep\",\"crees\",\"creme\",\"crems\",\"crena\",\"crepe\",\"creps\",\"crepy\",\"cress\",\"crest\",\"crewe\",\"crews\",\"crias\",\"cribs\",\"crick\",\"cried\",\"crier\",\"cries\",\"crime\",\"crimp\",\"crims\",\"crine\",\"crink\",\"crios\",\"cripe\",\"crisp\",\"crits\",\"croak\",\"croci\",\"crock\",\"crocs\",\"croft\",\"crogs\",\"cromb\",\"crome\",\"crone\",\"cronk\",\"crons\",\"crony\",\"crook\",\"crool\",\"croon\",\"crops\",\"crore\",\"cross\",\"crost\",\"croup\",\"crout\",\"crowd\",\"crowl\",\"crown\",\"crows\",\"croze\",\"cruck\",\"crude\",\"cruds\",\"crudy\",\"cruel\",\"crues\",\"cruet\",\"cruft\",\"crumb\",\"crump\",\"crums\",\"crunk\",\"crura\",\"cruse\",\"crush\",\"crust\",\"crusy\",\"cruts\",\"crwth\",\"cryal\",\"cryer\",\"crypt\",\"ctene\",\"cuban\",\"cubby\",\"cubeb\",\"cubed\",\"cuber\",\"cubes\",\"cubic\",\"cubit\",\"cuddy\",\"cuffo\",\"cuffs\",\"cuifs\",\"cuing\",\"cuish\",\"cuits\",\"cukes\",\"culch\",\"culex\",\"culls\",\"cully\",\"culms\",\"culpa\",\"culti\",\"cults\",\"culty\",\"cumec\",\"cumin\",\"cumyl\",\"cunts\",\"cupel\",\"cupid\",\"cuppa\",\"cuppy\",\"curds\",\"curdy\",\"cured\",\"curer\",\"cures\",\"curfs\",\"curia\",\"curie\",\"curio\",\"curli\",\"curls\",\"curly\",\"curns\",\"curny\",\"currs\",\"curry\",\"curse\",\"cursi\",\"curst\",\"curve\",\"curvy\",\"cusec\",\"cushy\",\"cusks\",\"cusps\",\"cuspy\",\"cusso\",\"cutch\",\"cuted\",\"cuter\",\"cutes\",\"cutey\",\"cutie\",\"cutin\",\"cutis\",\"cutto\",\"cutty\",\"cutup\",\"cuvee\",\"cuzes\",\"cwtch\",\"cyano\",\"cyans\",\"cyber\",\"cycad\",\"cycas\",\"cycle\",\"cyclo\",\"cyder\",\"cymas\",\"cymes\",\"cymol\",\"cynic\",\"cysts\",\"cytes\",\"cyton\",\"czars\",\"daals\",\"dabba\",\"daces\",\"dacha\",\"dacks\",\"dadah\",\"dadas\",\"daddy\",\"dados\",\"daffs\",\"daffy\",\"dagga\",\"daggy\",\"dagos\",\"dahls\",\"daily\",\"daine\",\"daint\",\"dairy\",\"daisy\",\"daker\",\"dales\",\"dalis\",\"dalle\",\"dalts\",\"daman\",\"damar\",\"dames\",\"damme\",\"damns\",\"damps\",\"dampy\",\"dance\",\"dandy\",\"dangs\",\"danio\",\"danks\",\"danny\",\"danse\",\"dants\",\"daraf\",\"darbs\",\"darcy\",\"dared\",\"darer\",\"dares\",\"darga\",\"dargs\",\"daric\",\"darks\",\"darky\",\"darns\",\"darre\",\"darts\",\"darzi\",\"dashi\",\"dashy\",\"datal\",\"dated\",\"dater\",\"dates\",\"datos\",\"datto\",\"datum\",\"daube\",\"daubs\",\"dauby\",\"dauds\",\"dault\",\"daunt\",\"daurs\",\"dauts\",\"daven\",\"davit\",\"dawah\",\"dawds\",\"dawed\",\"dawen\",\"dawks\",\"dawns\",\"dawts\",\"dayan\",\"daych\",\"daynt\",\"daze\",\"dazed\",\"dazer\",\"dazes\",\"deads\",\"deafs\",\"dealt\",\"deans\",\"deare\",\"dearn\",\"dears\",\"deary\",\"deash\",\"death\",\"deave\",\"deaws\",\"deawy\",\"debag\",\"debar\",\"debby\",\"debel\",\"debes\",\"debit\",\"debts\",\"debug\",\"debus\",\"debut\",\"debye\",\"decaf\",\"decal\",\"decay\",\"decko\",\"decks\",\"decor\",\"decos\",\"decoy\",\"decry\",\"dedal\",\"deeds\",\"deedy\",\"deely\",\"deems\",\"deens\",\"deeps\",\"deere\",\"deers\",\"deets\",\"deeve\",\"deevs\",\"defen\",\"defer\",\"deffo\",\"defis\",\"defog\",\"degas\",\"degum\",\"degus\",\"deice\",\"deids\",\"deify\",\"deign\",\"deils\",\"deink\",\"deism\",\"deist\",\"deity\",\"deked\",\"dekes\",\"dekko\",\"deles\",\"delfs\",\"delft\",\"delis\",\"dells\",\"delly\",\"delos\",\"delph\",\"delts\",\"delve\",\"deman\",\"demes\",\"demic\",\"demit\",\"demob\",\"demon\",\"demos\",\"dempt\",\"demur\",\"denar\",\"dench\",\"denes\",\"denet\",\"dengs\",\"denim\",\"dense\",\"dents\",\"deoxy\",\"depot\",\"depth\",\"derat\",\"deray\",\"derby\",\"dered\",\"deres\",\"derks\",\"derma\",\"derms\",\"derns\",\"derny\",\"derro\",\"derry\",\"derth\",\"dervs\",\"desex\",\"deshi\",\"desks\",\"desse\",\"deter\",\"detox\",\"deuce\",\"deuck\",\"deuks\",\"deva\",\"devel\",\"devil\",\"devon\",\"devot\",\"dewan\",\"dewar\",\"dewds\",\"dewed\",\"dexes\",\"dexie\",\"dhaba\",\"dhaks\",\"dhals\",\"dhikr\",\"dhobi\",\"dhole\",\"dholl\",\"dhols\",\"dhoti\",\"dhows\",\"dhrti\",\"diazo\",\"dibbs\",\"diced\",\"dicer\",\"dices\",\"dicey\",\"dicht\",\"dicks\",\"dicky\",\"dicot\",\"dicta\",\"dicts\",\"dictu\",\"diddy\",\"didie\",\"didos\",\"didst\",\"diebs\",\"diced\",\"diets\",\"diffs\",\"dight\",\"digit\",\"dikas\",\"diked\",\"diker\",\"dikes\",\"dikey\",\"dildo\",\"dills\",\"dilly\",\"dimer\",\"dimes\",\"dimly\",\"dimps\",\"dinar\",\"dined\",\"diner\",\"dines\",\"dinge\",\"dings\",\"dingy\",\"dinic\",\"dinks\",\"dinky\",\"dinna\",\"dinos\",\"dints\",\"diode\",\"diols\",\"dipod\",\"dippy\",\"dipso\",\"diram\",\"direr\",\"dirge\",\"dirgr\",\"dirks\",\"dirls\",\"dirts\",\"dirty\",\"disas\",\"disci\",\"disco\",\"discs\",\"dishy\",\"disks\",\"disme\",\"dital\",\"ditas\",\"dited\",\"dites\",\"ditsy\",\"ditto\",\"ditts\",\"ditty\",\"divan\",\"divas\",\"dived\",\"diver\",\"dives\",\"divet\",\"divot\",\"divvy\",\"diwan\",\"dizen\",\"djinn\",\"djins\",\"doabs\",\"doats\",\"dobby\",\"dobra\",\"dobro\",\"docht\",\"docks\",\"docos\",\"docus\",\"doddy\",\"dodos\",\"doeks\",\"doers\",\"doest\",\"doeth\",\"doffs\",\"dogan\",\"dogas\",\"dogbo\",\"doge\",\"doggo\",\"doggy\",\"dogie\",\"dogma\",\"dohyo\",\"doido\",\"doily\",\"doing\",\"doits\",\"dojos\",\"dolce\",\"dolci\",\"doled\",\"doles\",\"dolls\",\"dolly\",\"dolma\",\"dolor\",\"dolos\",\"dolts\",\"domal\",\"domed\",\"domes\",\"domic\",\"donah\",\"donas\",\"donee\",\"doner\",\"dongs\",\"donko\",\"donna\",\"donne\",\"donny\",\"donsy\",\"donut\",\"doobs\",\"dooce\",\"doodo\",\"doods\",\"doody\",\"doofe\",\"doofs\",\"dooks\",\"doole\",\"dools\",\"dooly\",\"dooms\",\"doomy\",\"doona\",\"doorn\",\"doors\",\"doozy\",\"dopas\",\"doped\",\"doper\",\"dopes\",\"dopey\",\"dopis\",\"dopo\",\"dopus\",\"dored\",\"doree\",\"dores\",\"doric\",\"dorky\",\"dorms\",\"dormy\",\"dorps\",\"dorrs\",\"dorsa\",\"dorse\",\"dorts\",\"dorty\",\"dosed\",\"doseh\",\"doser\",\"doses\",\"doted\",\"doter\",\"dotes\",\"dotty\",\"douar\",\"doubt\",\"douce\",\"douck\",\"dough\",\"douks\",\"doula\",\"douma\",\"doums\",\"doups\",\"doura\",\"douse\",\"douts\",\"doven\",\"dover\",\"doves\",\"dowaf\",\"dowar\",\"dowds\",\"dowdy\",\"dowed\",\"dowel\",\"dower\",\"dowie\",\"dowls\",\"dowly\",\"downa\",\"downs\",\"downy\",\"dowps\",\"dowry\",\"dowse\",\"dowts\",\"doyeb\",\"doyen\",\"doyly\",\"dozed\",\"dozen\",\"dozer\",\"dozes\",\"drabs\",\"drack\",\"draco\",\"draff\",\"drags\",\"drail\",\"drain\",\"drake\",\"drama\",\"drams\",\"drank\",\"drant\",\"drape\",\"draps\",\"drats\",\"drave\",\"drawl\",\"drawn\",\"draws\",\"drays\",\"dread\",\"dream\",\"drear\",\"dreck\",\"dredd\",\"dreds\",\"dreed\",\"dreer\",\"drees\",\"dregs\",\"dreks\",\"drent\",\"drere\",\"dress\",\"drest\",\"dreys\",\"dribs\",\"drice\",\"dried\",\"drier\",\"dries\",\"drift\",\"drill\",\"drily\",\"drims\",\"drink\",\"drips\",\"dript\",\"drive\",\"droit\",\"droke\",\"droll\",\"drome\",\"drone\",\"drony\",\"droog\",\"drook\",\"drool\",\"droon\",\"droop\",\"drops\",\"dropt\",\"dross\",\"drouk\",\"droup\",\"drout\",\"drove\",\"drown\",\"drows\",\"drubs\",\"drugs\",\"druid\",\"drums\",\"drunk\",\"drupe\",\"druse\",\"drusy\",\"druxy\",\"dryad\",\"dryas\",\"dryer\",\"dryly\",\"dryth\",\"dsomo\",\"duads\",\"duals\",\"duams\",\"duans\",\"duars\",\"dubbo\",\"ducal\",\"ducat\",\"ducks\",\"ducky\",\"ducts\",\"duddy\",\"duded\",\"dudes\",\"duels\",\"duend\",\"duets\",\"duffs\",\"dufus\",\"duing\",\"duits\",\"dukas\",\"duked\",\"dukes\",\"dukka\",\"dulce\",\"dules\",\"dulia\",\"dulls\",\"dully\",\"dulse\",\"dumas\",\"dumbo\",\"dumbs\",\"dumka\",\"dumky\",\"dumps\",\"dumpy\",\"dunam\",\"dunce\",\"dunch\",\"dunes\",\"dungs\",\"dungy\",\"dunks\",\"dunno\",\"dunny\",\"dunsh\",\"dunts\",\"duomo\",\"duped\",\"duper\",\"dupes\",\"duple\",\"dural\",\"duras\",\"dured\",\"dures\",\"durga\",\"durns\",\"duroc\",\"duros\",\"durra\",\"durrs\",\"durry\",\"durst\",\"durum\",\"dusks\",\"dusky\",\"dusts\",\"dusty\",\"dutch\",\"duvet\",\"duvets\",\"dwaal\",\"dwale\",\"dwalm\",\"dwams\",\"dwang\",\"dwarf\",\"dweeb\",\"dwell\",\"dwelt\",\"dwile\",\"dwine\",\"dyads\",\"dyers\",\"dying\",\"dyked\",\"dykes\",\"dykey\",\"dynel\",\"dynes\",\"dzhos\",\"eados\",\"eaged\",\"eagle\",\"eagre\",\"eales\",\"eaned\",\"eards\",\"eared\",\"earls\",\"early\",\"earns\",\"earnt\",\"earps\",\"earst\",\"earth\",\"eased\",\"easel\",\"easer\",\"eases\",\"easle\",\"easts\",\"eaten\",\"eater\",\"eathe\",\"eaved\",\"eaves\",\"ebbed\",\"ebbet\",\"ebons\",\"ebony\",\"ebook\",\"ecads\",\"ecash\",\"eccle\",\"ecdys\",\"eched\",\"eches\",\"echos\",\"ecigs\",\"ecker\",\"eclat\",\"eclog\",\"ecoal\",\"ecods\",\"ecrus\",\"edema\",\"edged\",\"edger\",\"edges\",\"edict\",\"edify\",\"edile\",\"edits\",\"educe\",\"educt\",\"eeven\",\"eever\",\"effed\",\"egads\",\"egers\",\"egest\",\"egged\",\"egger\",\"egmas\",\"ehing\",\"eider\",\"eidos\",\"eiges\",\"eight\",\"eigne\",\"eikon\",\"eilds\",\"eisel\",\"ejido\",\"eking\",\"ekpow\",\"elain\",\"eland\",\"elans\",\"elate\",\"elbow\",\"elchi\",\"elder\",\"eldin\",\"eleds\",\"elect\",\"elegy\",\"elemi\",\"elfed\",\"elfen\",\"elfin\",\"eliad\",\"elide\",\"elids\",\"elint\",\"elite\",\"elks\",\"ells\",\"elmen\",\"elmos\",\"eloin\",\"elope\",\"elops\",\"elsin\",\"elude\",\"elute\",\"elvan\",\"elven\",\"elver\",\"elves\",\"elymi\",\"email\",\"embar\",\"embay\",\"embed\",\"ember\",\"embog\",\"embow\",\"embox\",\"embrue\",\"embus\",\"emcee\",\"emeer\",\"emend\",\"emerg\",\"emery\",\"emeus\",\"emics\",\"emirs\",\"emits\",\"emmas\",\"emmer\",\"emmet\",\"emmys\",\"emoji\",\"emong\",\"emote\",\"emove\",\"empts\",\"empty\",\"emule\",\"emure\",\"emyde\",\"enact\",\"enarm\",\"enate\",\"ended\",\"ender\",\"endew\",\"endow\",\"endue\",\"enema\",\"enemy\",\"enews\",\"enfix\",\"engas\",\"engin\",\"engle\",\"engyn\",\"eniac\",\"enlit\",\"enmew\",\"ennog\",\"enoki\",\"enols\",\"enorm\",\"enosh\",\"enows\",\"enrol\",\"ensew\",\"ensky\",\"ensue\",\"entad\",\"ental\",\"ented\",\"enter\",\"entia\",\"entry\",\"enure\",\"enurn\",\"envoi\",\"envoy\",\"enzym\",\"eorls\",\"eosin\",\"epact\",\"epals\",\"epand\",\"eparch\",\"ephas\",\"ephod\",\"ephor\",\"epics\",\"epoch\",\"epode\",\"epopt\",\"epoxy\",\"eprom\",\"equal\",\"equid\",\"equip\",\"erase\",\"erbia\",\"erect\",\"erekt\",\"erevs\",\"ergal\",\"ergon\",\"ergos\",\"ergot\",\"erhus\",\"erica\",\"erick\",\"eriks\",\"ering\",\"erned\",\"ernes\",\"erode\",\"erose\",\"erred\",\"erses\",\"eruct\",\"erugo\",\"erupt\",\"erven\",\"ervil\",\"ervs\",\"erytl\",\"escar\",\"escot\",\"esile\",\"eskar\",\"esker\",\"esnes\",\"esraj\",\"essay\",\"essed\",\"esses\",\"estoc\",\"estop\",\"estro\",\"etage\",\"etape\",\"etats\",\"etens\",\"ethal\",\"ether\",\"ethic\",\"ethne\",\"ethos\",\"ethyl\",\"etics\",\"etnas\",\"etrog\",\"ettas\",\"ettin\",\"ettle\",\"etude\",\"etuis\",\"etwee\",\"etyma\",\"eughs\",\"euked\",\"eukes\",\"eupad\",\"euros\",\"eusol\",\"evade\",\"evans\",\"evars\",\"evens\",\"event\",\"evers\",\"evert\",\"every\",\"evets\",\"evhoe\",\"evict\",\"evils\",\"evite\",\"evits\",\"evoked\",\"evohe\",\"evoke\",\"ewers\",\"ewest\",\"ewhow\",\"ewked\",\"ewoks\",\"exact\",\"exalt\",\"exams\",\"exang\",\"exarch\",\"exeat\",\"execs\",\"exede\",\"exeme\",\"exeat\",\"exeme\",\"exens\",\"exert\",\"exfol\",\"exies\",\"exifs\",\"exign\",\"exile\",\"exine\",\"exing\",\"exist\",\"exits\",\"exman\",\"exmem\",\"exode\",\"exody\",\"exome\",\"exons\",\"expat\",\"expel\",\"expos\",\"expro\",\"exput\",\"exude\",\"exuls\",\"exult\",\"exurb\",\"eyass\",\"eyers\",\"eying\",\"eyots\",\"eyras\",\"eyres\",\"eyrie\",\"eyrir\",\"ezine\",\"ezzes\",\"fable\",\"faced\",\"facer\",\"faces\",\"facet\",\"facia\",\"facil\",\"facts\",\"faddy\",\"faded\",\"fader\",\"fades\",\"fadge\",\"faena\",\"faery\",\"faffs\",\"faggy\",\"fagin\",\"fagot\",\"faiks\",\"fails\",\"faine\",\"fains\",\"faint\",\"faire\",\"fairs\",\"fairy\",\"faith\",\"faked\",\"faker\",\"fakes\",\"fakey\",\"fakie\",\"fakir\",\"falaj\",\"false\",\"famed\",\"fames\",\"famil\",\"famly\",\"fancy\",\"fands\",\"fanes\",\"fanga\",\"fangs\",\"fanks\",\"fanny\",\"fanon\",\"fanos\",\"fanum\",\"faqir\",\"farad\",\"farce\",\"farci\",\"farcy\",\"fards\",\"fared\",\"farer\",\"fares\",\"farle\",\"farls\",\"farms\",\"faros\",\"farse\",\"farts\",\"fasci\",\"fasti\",\"fasts\",\"fatal\",\"fated\",\"fates\",\"fatly\",\"fatso\",\"fatty\",\"fatwa\",\"fauch\",\"fauld\",\"fault\",\"fauna\",\"fauns\",\"faurd\",\"fauts\",\"fauve\",\"favas\",\"favel\",\"faver\",\"faves\",\"favus\",\"fawns\",\"fawny\",\"faxed\",\"faxes\",\"fayed\",\"fayne\",\"fayre\",\"fazed\",\"fazer\",\"fazes\",\"feal\",\"fears\",\"feart\",\"feast\",\"feats\",\"feaze\",\"fecal\",\"feces\",\"fecht\",\"fecit\",\"fecks\",\"fedex\",\"feebs\",\"feeds\",\"feels\",\"feens\",\"feers\",\"feese\",\"feest\",\"feeze\",\"fehme\",\"feign\",\"feint\",\"feist\",\"felch\",\"felid\",\"fells\",\"felly\",\"felon\",\"felts\",\"felty\",\"femes\",\"femme\",\"femmy\",\"femur\",\"fence\",\"fends\",\"fendy\",\"fenis\",\"fenny\",\"fents\",\"feods\",\"feoff\",\"feral\",\"ferar\",\"feres\",\"feria\",\"ferly\",\"fermi\",\"ferns\",\"ferny\",\"ferry\",\"fesse\",\"festa\",\"fests\",\"fetal\",\"fetas\",\"fetch\",\"feted\",\"fetes\",\"fetid\",\"fetor\",\"fetta\",\"fetts\",\"fetus\",\"fetwa\",\"feuar\",\"feuds\",\"feued\",\"fever\",\"fewer\",\"feyed\",\"feyer\",\"feyly\",\"fezes\",\"fezzy\",\"fiars\",\"fiats\",\"fibbs\",\"fiber\",\"fibre\",\"fibro\",\"fices\",\"fiche\",\"fichu\",\"ficin\",\"ficos\",\"ficus\",\"fidge\",\"fidos\",\"fiefs\",\"field\",\"fiend\",\"fient\",\"fiere\",\"fiers\",\"fiery\",\"fifed\",\"fifer\",\"fifes\",\"fifth\",\"fifty\",\"figgy\",\"fight\",\"figos\",\"fiked\",\"fikes\",\"filar\",\"filch\",\"filed\",\"filer\",\"files\",\"filet\",\"fille\",\"fillo\",\"fills\",\"filly\",\"films\",\"filmy\",\"filos\",\"filth\",\"filum\",\"final\",\"finca\",\"finch\",\"finds\",\"fined\",\"finer\",\"fines\",\"finis\",\"finks\",\"finny\",\"finos\",\"fiord\",\"fiqhs\",\"fique\",\"fired\",\"firer\",\"fires\",\"firie\",\"firks\",\"firms\",\"firns\",\"firry\",\"first\",\"fiscs\",\"fishy\",\"fisks\",\"fists\",\"fisty\",\"fitch\",\"fitly\",\"fitna\",\"fitte\",\"fitts\",\"fiver\",\"fives\",\"fixed\",\"fixer\",\"fixes\",\"fixit\",\"fizzy\",\"fjard\",\"fjeld\",\"fjord\",\"flabs\",\"flack\",\"flacs\",\"flags\",\"flail\",\"flair\",\"flaks\",\"flaky\",\"flame\",\"flams\",\"flamy\",\"flane\",\"flank\",\"flans\",\"flaps\",\"flare\",\"flary\",\"flash\",\"flask\",\"flats\",\"flatt\",\"flatus\",\"flava\",\"flawn\",\"flaws\",\"flawy\",\"flaxy\",\"flays\",\"flead\",\"fleam\",\"fleas\",\"fleck\",\"fleed\",\"fleer\",\"flees\",\"fleet\",\"flegs\",\"fleme\",\"flesh\",\"fleta\",\"flets\",\"fleur\",\"flews\",\"flexe\",\"flexo\",\"fleys\",\"flick\",\"flics\",\"flied\",\"flier\",\"flies\",\"flimp\",\"fling\",\"flink\",\"flint\",\"flips\",\"flirs\",\"flirt\",\"flisk\",\"flite\",\"flits\",\"flitt\",\"float\",\"flock\",\"flocs\",\"floes\",\"flogs\",\"flong\",\"flood\",\"floor\",\"flops\",\"flora\",\"flors\",\"flory\",\"flosh\",\"floss\",\"flota\",\"flote\",\"flour\",\"flout\",\"flown\",\"flows\",\"flubs\",\"flued\",\"fluer\",\"flues\",\"fluey\",\"fluff\",\"fluid\",\"fluke\",\"fluky\",\"flume\",\"flump\",\"flung\",\"flunk\",\"fluor\",\"flurt\",\"flush\",\"flute\",\"fluty\",\"fluyt\",\"flyby\",\"flyer\",\"flyes\",\"flype\",\"flyte\",\"foals\",\"foams\",\"foamy\",\"fobby\",\"focal\",\"focht\",\"focus\",\"foehn\",\"fogey\",\"foggy\",\"fogie\",\"fogle\",\"fogou\",\"fohns\",\"foids\",\"foils\",\"foins\",\"foist\",\"fokes\",\"folia\",\"folic\",\"folie\",\"folio\",\"folks\",\"folky\",\"folly\",\"fomes\",\"fonds\",\"fondu\",\"fonts\",\"foods\",\"foody\",\"fools\",\"fooms\",\"foons\",\"foots\",\"footy\",\"foram\",\"foray\",\"forbs\",\"forby\",\"force\",\"fordo\",\"fords\",\"forel\",\"fores\",\"forex\",\"forge\",\"forgo\",\"forks\",\"forky\",\"forme\",\"forms\",\"forte\",\"forth\",\"forts\",\"forty\",\"forum\",\"forza\",\"forze\",\"fosse\",\"fouat\",\"fouds\",\"fouer\",\"fouet\",\"fouga\",\"fough\",\"fouks\",\"foule\",\"fouls\",\"foulx\",\"found\",\"fount\",\"fours\",\"fouth\",\"fovea\",\"fowls\",\"fowth\",\"foxed\",\"foxes\",\"foxie\",\"foyer\",\"foyle\",\"foyls\",\"foyne\",\"fozed\",\"fozer\",\"fozes\",\"frabs\",\"frack\",\"fract\",\"frags\",\"frail\",\"fraim\",\"frame\",\"franc\",\"frank\",\"frape\",\"fraps\",\"frass\",\"frate\",\"frati\",\"frats\",\"fraud\",\"fraus\",\"frays\",\"fraze\",\"freak\",\"freed\",\"freer\",\"frees\",\"freit\",\"fremd\",\"frena\",\"freon\",\"frere\",\"fresh\",\"fress\",\"frets\",\"freux\",\"fribs\",\"fried\",\"frier\",\"fries\",\"frigs\",\"frill\",\"frise\",\"frisk\",\"frist\",\"frith\",\"frits\",\"fritt\",\"fritz\",\"frize\",\"frizz\",\"frock\",\"froes\",\"frogs\",\"froid\",\"frond\",\"frons\",\"front\",\"frore\",\"frorn\",\"frosh\",\"frost\",\"froth\",\"frows\",\"froze\",\"frugs\",\"fruit\",\"frump\",\"frush\",\"frust\",\"fryer\",\"fubar\",\"fubby\",\"fubsy\",\"fucks\",\"fucus\",\"fuddy\",\"fudge\",\"fudgy\",\"fuels\",\"fuero\",\"fuffs\",\"fuffy\",\"fugal\",\"fuggy\",\"fugie\",\"fugle\",\"fugue\",\"fugus\",\"fujis\",\"fulah\",\"fulga\",\"fulls\",\"fully\",\"fultz\",\"fumar\",\"fumed\",\"fumer\",\"fumes\",\"fumet\",\"fundi\",\"funds\",\"fundy\",\"fungo\",\"fungs\",\"funks\",\"funky\",\"funny\",\"fural\",\"furan\",\"furca\",\"furls\",\"furol\",\"furor\",\"furrs\",\"furry\",\"furth\",\"furze\",\"furzy\",\"fused\",\"fusee\",\"fusel\",\"fuses\",\"fusil\",\"fusks\",\"fussy\",\"fusts\",\"fusty\",\"futah\",\"futon\",\"fuzed\",\"fuzee\",\"fuzes\",\"fuzil\",\"fuzz\",\"fuzzy\",\"fyces\",\"fyked\",\"fykes\",\"fylfot\",\"fynbos\",\"fyons\",\"fytte\",\"gaban\",\"gabba\",\"gabby\",\"gable\",\"gabon\",\"gaddi\",\"gades\",\"gadge\",\"gadid\",\"gadis\",\"gadje\",\"gadjo\",\"gadso\",\"gadzo\",\"gaffs\",\"gaged\",\"gager\",\"gages\",\"gaine\",\"gains\",\"gairs\",\"gaita\",\"gaits\",\"gaitt\",\"gajos\",\"galah\",\"galas\",\"galax\",\"galea\",\"galed\",\"gales\",\"galls\",\"gally\",\"galop\",\"galut\",\"galvo\",\"gamas\",\"gamay\",\"gamba\",\"gambe\",\"gambo\",\"gambs\",\"gamed\",\"gamer\",\"games\",\"gamey\",\"gamic\",\"gamin\",\"gamma\",\"gamme\",\"gammy\",\"gamps\",\"gamut\",\"ganch\",\"gandy\",\"ganef\",\"ganev\",\"gangs\",\"ganja\",\"ganks\",\"gants\",\"gaoyi\",\"gaped\",\"gaper\",\"gapes\",\"gapos\",\"gappy\",\"garab\",\"garba\",\"garbe\",\"garbo\",\"garbs\",\"garda\",\"gards\",\"gared\",\"garef\",\"gares\",\"garis\",\"garms\",\"garni\",\"garre\",\"garth\",\"garus\",\"gases\",\"gasps\",\"gaspy\",\"gasps\",\"gassy\",\"gasts\",\"gatch\",\"gated\",\"gater\",\"gates\",\"gaths\",\"gator\",\"gauch\",\"gauje\",\"gaulk\",\"gauls\",\"gaums\",\"gaunt\",\"gaups\",\"gaurs\",\"gauss\",\"gauve\",\"gavag\",\"gavel\",\"gaver\",\"gaves\",\"gavey\",\"gavot\",\"gawcy\",\"gawds\",\"gawks\",\"gawky\",\"gawps\",\"gayal\",\"gayda\",\"gayed\",\"gayer\",\"gayly\",\"gayno\",\"gazal\",\"gazar\",\"gazed\",\"gazer\",\"gazes\",\"gazoo\",\"gazum\",\"geans\",\"geare\",\"gears\",\"geats\",\"geber\",\"gecks\",\"gecko\",\"gecky\",\"gedds\",\"geeks\",\"geeky\",\"geeps\",\"geese\",\"geest\",\"geez\",\"gegos\",\"geids\",\"geiks\",\"geins\",\"geist\",\"geits\",\"gekko\",\"gells\",\"gelly\",\"gelts\",\"gemas\",\"gemed\",\"gemes\",\"gemma\",\"gemmy\",\"gemot\",\"genes\",\"genet\",\"genic\",\"genii\",\"genip\",\"genos\",\"genre\",\"genro\",\"gents\",\"genua\",\"genus\",\"geode\",\"geoid\",\"gerah\",\"gerbe\",\"geres\",\"gerks\",\"gerle\",\"germs\",\"germy\",\"gerne\",\"geros\",\"gesse\",\"gesso\",\"gests\",\"getae\",\"getas\",\"getup\",\"geums\",\"geyan\",\"geyer\",\"ghast\",\"ghats\",\"ghaut\",\"ghazi\",\"ghees\",\"ghost\",\"ghoti\",\"ghoul\",\"ghyll\",\"giant\",\"giapo\",\"gibba\",\"gibbs\",\"gibed\",\"giber\",\"gibes\",\"gibli\",\"gibli\",\"gibus\",\"giddy\",\"gifts\",\"gigas\",\"gighe\",\"gigot\",\"gigue\",\"gilas\",\"gilds\",\"gills\",\"gilly\",\"gilpy\",\"gilts\",\"gimbo\",\"gimel\",\"gimme\",\"gimps\",\"gimpy\",\"ginch\",\"ginep\",\"ginks\",\"ginko\",\"ginny\",\"ginzo\",\"gipon\",\"gippo\",\"gipsy\",\"girds\",\"girls\",\"girly\",\"girns\",\"giron\",\"giros\",\"girrs\",\"girsh\",\"girts\",\"gismo\",\"gisms\",\"gists\",\"gitch\",\"gites\",\"giust\",\"gived\",\"given\",\"giver\",\"gives\",\"gizmo\",\"gizzy\",\"glade\",\"glads\",\"glady\",\"glaik\",\"glair\",\"glams\",\"gland\",\"glans\",\"glare\",\"glary\",\"glass\",\"glaum\",\"glaur\",\"glaze\",\"glazy\",\"gleam\",\"glean\",\"gleba\",\"glebe\",\"gleby\",\"glede\",\"gleds\",\"gleed\",\"gleek\",\"glees\",\"gleet\",\"gleid\",\"gleig\",\"gleis\",\"glens\",\"glent\",\"glere\",\"gleta\",\"gletz\",\"gleys\",\"glial\",\"glias\",\"glibs\",\"glide\",\"gliff\",\"glift\",\"glike\",\"glime\",\"glims\",\"glint\",\"glisk\",\"glits\",\"glitz\",\"gloam\",\"gloat\",\"globe\",\"globs\",\"glogg\",\"gloms\",\"gloom\",\"gloop\",\"glops\",\"glory\",\"gloss\",\"glost\",\"glout\",\"glove\",\"glows\",\"gloze\",\"glued\",\"gluer\",\"glues\",\"gluey\",\"glugs\",\"glume\",\"glums\",\"glung\",\"glunk\",\"glute\",\"gluts\",\"glyph\",\"gnago\",\"gnams\",\"gnari\",\"gnarl\",\"gnars\",\"gnash\",\"gnats\",\"gnave\",\"gnawn\",\"gnaws\",\"gnome\",\"gnomy\",\"goads\",\"goals\",\"goans\",\"goary\",\"goats\",\"goaty\",\"goban\",\"gobas\",\"gobbo\",\"gobby\",\"gobis\",\"gobos\",\"godet\",\"godly\",\"godso\",\"goels\",\"goers\",\"goest\",\"goeth\",\"goety\",\"goffs\",\"gogga\",\"goggo\",\"gogol\",\"gohus\",\"goier\",\"going\",\"gojis\",\"gokus\",\"golan\",\"golas\",\"golda\",\"golds\",\"goldy\",\"goles\",\"golfs\",\"golly\",\"golpe\",\"golps\",\"gomas\",\"gombo\",\"gomer\",\"gomes\",\"gompa\",\"gonch\",\"gondi\",\"gonds\",\"goner\",\"gongs\",\"gonna\",\"gonzo\",\"goods\",\"goody\",\"gooey\",\"goofa\",\"goofs\",\"goofy\",\"googs\",\"gooks\",\"gools\",\"gooly\",\"goons\",\"goony\",\"goops\",\"goopy\",\"goory\",\"goose\",\"goosy\",\"gopak\",\"gopas\",\"gopik\",\"goral\",\"goras\",\"gored\",\"gores\",\"gorge\",\"goris\",\"gorki\",\"gorms\",\"gorps\",\"gorse\",\"gorsy\",\"gosht\",\"gosse\",\"gotch\",\"gotha\",\"goths\",\"gothy\",\"gotta\",\"gouch\",\"gouge\",\"gouks\",\"goura\",\"gourd\",\"gouts\",\"gouty\",\"govan\",\"govds\",\"gowai\",\"gowan\",\"gowds\",\"gowfs\",\"gowks\",\"gowls\",\"gowns\",\"goxes\",\"goyim\",\"goyls\",\"gozan\",\"graal\",\"grabs\",\"grace\",\"grade\",\"grads\",\"graft\",\"grail\",\"grain\",\"graip\",\"grama\",\"grame\",\"gramp\",\"grams\",\"grana\",\"grand\",\"grans\",\"grant\",\"grapy\",\"grasp\",\"grass\",\"grate\",\"grave\",\"gravy\",\"grays\",\"graze\",\"great\",\"grebe\",\"grebo\",\"grece\",\"greed\",\"greek\",\"green\",\"grees\",\"greet\",\"grefs\",\"greig\",\"grein\",\"grens\",\"grese\",\"greve\",\"grews\",\"greys\",\"gribe\",\"grice\",\"gride\",\"grids\",\"grief\",\"griff\",\"grift\",\"grigs\",\"grike\",\"grill\",\"grime\",\"grimy\",\"grind\",\"grins\",\"griot\",\"gripe\",\"grips\",\"gript\",\"gripy\",\"grise\",\"grist\",\"grisy\",\"grith\",\"grits\",\"grize\",\"groan\",\"groat\",\"grobs\",\"groce\",\"grody\",\"grogs\",\"groin\",\"groks\",\"groma\",\"grone\",\"groof\",\"grool\",\"groom\",\"grope\",\"grosz\",\"grots\",\"group\",\"grout\",\"grove\",\"growl\",\"grown\",\"grows\",\"groys\",\"groza\",\"grubs\",\"grued\",\"gruel\",\"grues\",\"grufe\",\"gruff\",\"grugs\",\"grume\",\"grump\",\"grunt\",\"grupe\",\"gurge\",\"gurks\",\"gurls\",\"gurns\",\"gurry\",\"gursh\",\"gurus\",\"gushy\",\"gusla\",\"gusle\",\"gusli\",\"gussy\",\"gusto\",\"gusts\",\"gusty\",\"gutsy\",\"gutta\",\"gutty\",\"guyde\",\"guyed\",\"guyer\",\"guyot\",\"guyse\",\"guzul\",\"gwine\",\"gyals\",\"gyans\",\"gybes\",\"gynos\",\"gyppo\",\"gyppy\",\"gypsy\",\"gyral\",\"gyred\",\"gyres\",\"gyron\",\"gyros\",\"gyrus\",\"gytes\",\"gyved\",\"gyves\",\"haafs\",\"haars\",\"habas\",\"habbe\",\"habit\",\"hable\",\"habus\",\"hacek\",\"haced\",\"haces\",\"hache\",\"hacks\",\"hacky\",\"hadal\",\"haded\",\"hades\",\"hadji\",\"hadnt\",\"haems\",\"haets\",\"haffs\",\"hafiz\",\"hafts\",\"haggs\",\"hahas\",\"haick\",\"haids\",\"haika\",\"haiks\",\"haiku\",\"hails\",\"hains\",\"haint\",\"hairs\",\"hairy\",\"haith\",\"hajis\",\"hajja\",\"hajji\",\"hajes\",\"hakam\",\"hakas\",\"haked\",\"hakes\",\"hakim\",\"hakus\",\"halaf\",\"halah\",\"halal\",\"haled\",\"haler\",\"hales\",\"halfa\",\"halfs\",\"halid\",\"halis\",\"halks\",\"halla\",\"hallo\",\"halls\",\"halma\",\"halms\",\"halon\",\"halos\",\"halse\",\"halts\",\"halva\",\"halwa\",\"hamal\",\"hamba\",\"hamel\",\"hames\",\"hammy\",\"hamza\",\"hance\",\"hanch\",\"hands\",\"handy\",\"hangi\",\"hangs\",\"hanks\",\"hanky\",\"hansa\",\"hanse\",\"hants\",\"haole\",\"haoma\",\"hapax\",\"haply\",\"happy\",\"hapus\",\"haram\",\"hards\",\"hardy\",\"hared\",\"hares\",\"harfs\",\"harka\",\"harks\",\"harls\",\"harns\",\"haros\",\"harps\",\"harpy\",\"harre\",\"harry\",\"harsh\",\"harts\",\"hashy\",\"hasks\",\"hasps\",\"hasta\",\"haste\",\"hasty\",\"hatai\",\"hatch\",\"hated\",\"hater\",\"hates\",\"haugh\",\"haulm\",\"hauls\",\"haunt\",\"haute\",\"haven\",\"haver\",\"haves\",\"havoc\",\"hawai\",\"hawed\",\"hawks\",\"hawms\",\"hawse\",\"hayed\",\"hayey\",\"hayle\",\"hazan\",\"hazed\",\"hazel\",\"hazer\",\"hazes\",\"heads\",\"heady\",\"heald\",\"heals\",\"heame\",\"heaps\",\"heapy\",\"heard\",\"hears\",\"heart\",\"heast\",\"heath\",\"heats\",\"heave\",\"heavy\",\"hebes\",\"hecht\",\"hecks\",\"hecto\",\"hedda\",\"hedds\",\"hedge\",\"hedgy\",\"heeds\",\"heedy\",\"heels\",\"heeze\",\"hefte\",\"hefts\",\"hefty\",\"heids\",\"heigh\",\"heils\",\"heirs\",\"heist\",\"hejab\",\"hejra\",\"heled\",\"heles\",\"helio\",\"helix\",\"hello\",\"hells\",\"helms\",\"helos\",\"helot\",\"helps\",\"helve\",\"hemes\",\"hemic\",\"hemin\",\"hemps\",\"hempy\",\"hence\",\"hench\",\"hends\",\"henge\",\"henna\",\"henry\",\"hents\",\"hepar\",\"herbs\",\"herby\",\"herds\",\"heres\",\"herls\",\"herma\",\"herms\",\"herns\",\"heros\",\"herry\",\"herse\",\"hertz\",\"herye\",\"hesps\",\"hests\",\"hetes\",\"heths\",\"heuch\",\"heugh\",\"hevea\",\"hewed\",\"hewer\",\"hewgh\",\"hexad\",\"hexed\",\"hexes\",\"hexyl\",\"heyah\",\"heyed\",\"hiant\",\"hibla\",\"hicks\",\"hicky\",\"hidde\",\"hided\",\"hider\",\"hides\",\"hiems\",\"hight\",\"hijab\",\"hijra\",\"hiked\",\"hiker\",\"hikes\",\"hilar\",\"hild\",\"hillo\",\"hills\",\"hilly\",\"hilts\",\"hilum\",\"hilus\",\"himbo\",\"hinau\",\"hinds\",\"hinge\",\"hings\",\"hinky\",\"hinny\",\"hints\",\"hippo\",\"hippy\",\"hired\",\"hiree\",\"hirer\",\"hires\",\"hissy\",\"hists\",\"hitch\",\"hithe\",\"hived\",\"hiver\",\"hives\",\"hizzo\",\"hoaed\",\"hoagy\",\"hoars\",\"hoary\",\"hoast\",\"hobby\",\"hobos\",\"hocks\",\"hocus\",\"hodad\",\"hodds\",\"hodja\",\"hoers\",\"hogan\",\"hogen\",\"hoggs\",\"hoghs\",\"hohed\",\"hoick\",\"hoiks\",\"hoing\",\"hoist\",\"hokas\",\"hoked\",\"hokes\",\"hokey\",\"hokis\",\"hokku\",\"hokum\",\"holds\",\"holed\",\"holes\",\"holey\",\"holks\",\"holla\",\"hollo\",\"holls\",\"holly\",\"holme\",\"holms\",\"holon\",\"holos\",\"holps\",\"holts\",\"homas\",\"homed\",\"homer\",\"homes\",\"homey\",\"homie\",\"homos\",\"honan\",\"honce\",\"honda\",\"honds\",\"honed\",\"honer\",\"hones\",\"honey\",\"hongi\",\"hongs\",\"honks\",\"honky\",\"hooch\",\"hoods\",\"hoody\",\"hooey\",\"hoofs\",\"hooka\",\"hooks\",\"hooky\",\"hooly\",\"hoons\",\"hoops\",\"hoord\",\"hoors\",\"hoosh\",\"hoots\",\"hooty\",\"hoove\",\"hopak\",\"hoped\",\"hoper\",\"hopes\",\"hoppy\",\"horah\",\"horal\",\"horas\",\"horde\",\"horis\",\"horns\",\"horny\",\"horse\",\"horst\",\"horsy\",\"hosed\",\"hosel\",\"hosen\",\"hoser\",\"hoses\",\"hosta\",\"hosts\",\"hotch\",\"hotel\",\"hoten\",\"hotly\",\"hotty\",\"houff\",\"houfs\",\"hough\",\"houle\",\"hoult\",\"hound\",\"houpe\",\"houps\",\"hours\",\"house\",\"houts\",\"hovea\",\"hoved\",\"hovel\",\"hover\",\"hoves\",\"howbe\",\"howdy\",\"howes\",\"howff\",\"howfs\",\"howks\",\"howls\",\"howre\",\"howso\",\"hoxed\",\"hoxes\",\"hoyas\",\"hoyed\",\"hoyle\",\"hubby\",\"hubei\",\"hucks\",\"hudna\",\"hudud\",\"hufty\",\"huger\",\"huggy\",\"huhao\",\"huhus\",\"huias\",\"huite\",\"hukus\",\"hulak\",\"hulas\",\"hules\",\"hulks\",\"hulky\",\"hulla\",\"hullo\",\"hulls\",\"hulme\",\"hults\",\"humas\",\"humbo\",\"humfs\",\"humic\",\"humid\",\"humor\",\"humph\",\"humps\",\"humpy\",\"humus\",\"hunch\",\"hunks\",\"hunky\",\"hunts\",\"hurds\",\"hurdy\",\"hurls\",\"hurra\",\"hurry\",\"hurst\",\"hurts\",\"hushy\",\"husks\",\"husky\",\"hussy\",\"hutch\",\"hutia\",\"huzza\",\"huzzy\",\"hwyls\",\"hyads\",\"hyaea\",\"hyaed\",\"hydes\",\"hydra\",\"hyena\",\"hying\",\"hykes\",\"hylas\",\"hyleg\",\"hyles\",\"hylic\",\"hymns\",\"hynde\",\"hyoid\",\"hyped\",\"hyper\",\"hypes\",\"hypha\",\"hyphy\",\"hypos\",\"hypso\",\"hyrax\",\"hyson\",\"hythe\",\"iambi\",\"iambs\",\"icers\",\"iches\",\"ichor\",\"icing\",\"icker\",\"ickle\",\"icons\",\"ictic\",\"ictus\",\"idant\",\"ideas\",\"idees\",\"ident\",\"idiom\",\"idiot\",\"idled\",\"idler\",\"idles\",\"idola\",\"idols\",\"idyll\",\"idyls\",\"iftar\",\"igads\",\"igarr\",\"igloo\",\"iglus\",\"ihram\",\"ijmas\",\"ikaas\",\"ikats\",\"ikons\",\"ileac\",\"ileal\",\"ileum\",\"ileus\",\"iliad\",\"ilial\",\"ilias\",\"iller\",\"illth\",\"image\",\"imago\",\"imams\",\"imbed\",\"imbue\",\"imide\",\"imine\",\"imino\",\"immix\",\"immun\",\"imped\",\"impel\",\"impes\",\"impis\",\"imply\",\"inane\",\"inarm\",\"inbye\",\"incas\",\"incle\",\"incur\",\"incus\",\"index\",\"indol\",\"indow\",\"indri\",\"indue\",\"inear\",\"inept\",\"inert\",\"infer\",\"infix\",\"infra\",\"infos\",\"infra\",\"ingle\",\"ingo\",\"ings\",\"inion\",\"inked\",\"inkle\",\"inlaw\",\"inlay\",\"inlet\",\"inmix\",\"inned\",\"inner\",\"inorb\",\"input\",\"inrun\",\"insam\",\"inset\",\"insole\",\"inter\",\"intis\",\"intro\",\"inula\",\"inure\",\"inurn\",\"invar\",\"iodic\",\"iodin\",\"ionic\",\"irade\",\"irids\",\"iring\",\"irish\",\"irone\",\"irons\",\"irony\",\"islet\",\"isnae\",\"isobar\",\"issei\",\"issue\",\"istle\",\"itali\",\"itch\",\"itchy\",\"items\",\"ivied\",\"ivies\",\"ivory\",\"ixias\",\"ixnay\",\"ixora\",\"ixtle\",\"izard\",\"izars\",\"izzad\",\"jab\",\"jacks\",\"jacky\",\"jaded\",\"jades\",\"jafar\",\"jaffa\",\"jager\",\"jager\",\"jaggs\",\"jagir\",\"jagra\",\"jails\",\"jaina\",\"jains\",\"jaire\",\"jajis\",\"jakes\",\"jakun\",\"jalap\",\"jalop\",\"jaman\",\"jambe\",\"jambo\",\"jambs\",\"jambu\",\"james\",\"jammy\",\"jamon\",\"janes\",\"janky\",\"janny\",\"janty\",\"japan\",\"japed\",\"japer\",\"japes\",\"jarks\",\"jarls\",\"jarvy\",\"jaspe\",\"jasps\",\"jassy\",\"jatos\",\"jauks\",\"jaums\",\"jaunt\",\"jaups\",\"javas\",\"javel\",\"jawan\",\"jawed\",\"jaxie\",\"jeans\",\"jeath\",\"jebel\",\"jedis\",\"jeels\",\"jeeps\",\"jeers\",\"jeeze\",\"jefes\",\"jeffs\",\"jehad\",\"jelab\",\"jello\",\"jells\",\"jelly\",\"jembe\",\"jemmy\",\"jenny\",\"jeons\",\"jerid\",\"jerks\",\"jerky\",\"jerry\",\"jesse\",\"jests\",\"jesus\",\"jetay\",\"jetes\",\"jeton\",\"jetty\",\"jeune\",\"jever\",\"jewel\",\"jexes\",\"jezeb\",\"jhafs\",\"jhala\",\"jhana\",\"jihad\",\"jildi\",\"jills\",\"jilts\",\"jimbo\",\"jimmy\",\"jinar\",\"jingo\",\"jinks\",\"jinni\",\"jinns\",\"jirds\",\"jirks\",\"jirre\",\"jisms\",\"jists\",\"jitey\",\"jitty\",\"jiver\",\"jives\",\"jivey\",\"jizya\",\"jobed\",\"jobs\",\"jocko\",\"jocks\",\"jocose\",\"jodel\",\"jodhs\",\"joeys\",\"johns\",\"joins\",\"joint\",\"joist\",\"joked\",\"joker\",\"jokes\",\"jokey\",\"jokul\",\"jolly\",\"jolts\",\"jolty\",\"jomon\",\"jones\",\"jongs\",\"jonty\",\"jooks\",\"joram\",\"jorum\",\"jotun\",\"joual\",\"jougs\",\"jouks\",\"joule\",\"jours\",\"joust\",\"jowar\",\"jowed\",\"jowls\",\"jowly\",\"jowar\",\"joyai\",\"jozef\",\"juans\",\"juba\",\"jubah\",\"jubbe\",\"juco\",\"jucus\",\"judas\",\"judge\",\"judos\",\"jugal\",\"jugum\",\"juice\",\"juicy\",\"jujus\",\"juked\",\"jukes\",\"jukus\",\"julep\",\"jumbo\",\"jumby\",\"jumps\",\"jumpy\",\"junco\",\"junks\",\"junky\",\"junta\",\"junto\",\"jupas\",\"jupes\",\"jupon\",\"jural\",\"jurat\",\"jures\",\"juror\",\"jussi\",\"justs\",\"jutes\",\"jutty\",\"juves\",\"juvie\",\"kab\",\"kabab\",\"kabar\",\"kabas\",\"kabob\",\"kacha\",\"kacks\",\"kacke\",\"kadai\",\"kades\",\"kadis\",\"kaffs\",\"kafir\",\"kafue\",\"kagol\",\"kagos\",\"kagus\",\"kahal\",\"kahes\",\"kaids\",\"kaies\",\"kaifs\",\"kaiks\",\"kails\",\"kaims\",\"kaing\",\"kains\",\"kairu\",\"kaits\",\"kaiva\",\"kajar\",\"kajep\",\"kakas\",\"kakis\",\"kalam\",\"kales\",\"kalfs\",\"kalif\",\"kalis\",\"kalks\",\"kalla\",\"kalpa\",\"kamas\",\"kames\",\"kamhi\",\"kamik\",\"kamis\",\"kampf\",\"kamps\",\"kanar\",\"kanas\",\"kandy\",\"kanes\",\"kangs\",\"kanji\",\"kanns\",\"kants\",\"kanzu\",\"kaons\",\"kapas\",\"kaphs\",\"kapok\",\"kapow\",\"kappa\",\"kapus\",\"kaput\",\"karak\",\"karas\",\"karat\",\"karau\",\"karce\",\"karco\",\"kards\",\"karens\",\"karez\",\"karks\",\"karns\",\"karos\",\"karri\",\"karst\",\"karsy\",\"karts\",\"karvo\",\"kaset\",\"kasha\",\"kashi\",\"kasks\",\"katal\",\"katas\",\"katch\",\"kated\",\"kates\",\"katey\",\"katha\",\"kaths\",\"katis\",\"katti\",\"kaugh\",\"kauje\",\"kaull\",\"kauri\",\"kauru\",\"kaval\",\"kavas\",\"kavim\",\"kawai\",\"kawas\",\"kawau\",\"kawey\",\"kayak\",\"kayas\",\"kayed\",\"kayes\",\"kayos\",\"kazis\",\"kazoo\",\"kbars\",\"kebab\",\"kebar\",\"kebbe\",\"kebel\",\"kebes\",\"kecks\",\"kedge\",\"kedgy\",\"keech\",\"keeds\",\"keefs\",\"keeks\",\"keels\",\"keema\",\"keens\",\"keeps\",\"keets\",\"keffs\",\"kefir\",\"kefte\",\"kegek\",\"keggi\",\"kehoe\",\"keipt\",\"keirs\",\"keiss\",\"keks\",\"kelep\",\"kelim\",\"kells\",\"kelly\",\"kelps\",\"kelpy\",\"kelts\",\"kembo\",\"kemps\",\"kempt\",\"kempy\",\"kenaf\",\"kench\",\"kendo\",\"kendo\",\"kenks\",\"kenna\",\"kenos\",\"kente\",\"kents\",\"kepis\",\"kerbs\",\"kerel\",\"kerfs\",\"kerky\",\"kerma\",\"kerne\",\"kerns\",\"keros\",\"kerry\",\"kerve\",\"kerxy\",\"kesar\",\"keses\",\"ketol\",\"ketch\",\"ketes\",\"ketol\",\"ketti\",\"ketty\",\"keung\",\"kevon\",\"keway\",\"kexes\",\"keyed\",\"keyer\",\"keyet\",\"keyht\",\"khadi\",\"khafs\",\"khaki\",\"khang\",\"khans\",\"khaph\",\"khats\",\"khaya\",\"khazi\",\"kheda\",\"khedh\",\"kheth\",\"khets\",\"khich\",\"khies\",\"khoja\",\"khokh\",\"khors\",\"khoum\",\"khoya\",\"khufu\",\"kiang\",\"kiare\",\"kiaul\",\"kiaut\",\"kibbe\",\"kibed\",\"kibes\",\"kibei\",\"kibes\",\"kibit\",\"kibla\",\"kible\",\"kicks\",\"kiddo\",\"kiddy\",\"kided\",\"kidge\",\"kidol\",\"kiefs\",\"kiers\",\"kieve\",\"kifs\",\"kikoi\",\"kiley\",\"kilim\",\"kille\",\"kilns\",\"kilos\",\"kilps\",\"kilts\",\"kilty\",\"kimbo\",\"kinas\",\"kinda\",\"kinds\",\"kines\",\"kings\",\"kinin\",\"kinks\",\"kinky\",\"kinos\",\"kiore\",\"kipes\",\"kippa\",\"kipps\",\"kirby\",\"kirks\",\"kirns\",\"kirri\",\"kisan\",\"kissy\",\"kists\",\"kited\",\"kiter\",\"kites\",\"kithe\",\"kiths\",\"kitty\",\"kitul\",\"kivas\",\"kiver\",\"kiwis\",\"kizzy\",\"klang\",\"klaps\",\"klart\",\"klatz\",\"klava\",\"klaxe\",\"klaze\",\"kleds\",\"kleep\",\"kleff\",\"kleig\",\"klene\",\"klept\",\"klesi\",\"klick\",\"kliks\",\"kling\",\"klink\",\"klips\",\"klong\",\"kloof\",\"klomp\",\"klone\",\"kloof\",\"kluge\",\"klutz\",\"knaff\",\"knags\",\"knaps\",\"knarr\",\"knars\",\"knave\",\"knawe\",\"knead\",\"knear\",\"kneck\",\"kneed\",\"kneel\",\"knees\",\"knell\",\"knelt\",\"knife\",\"knish\",\"knits\",\"knive\",\"knobbs\",\"knobs\",\"knock\",\"knops\",\"knosp\",\"knots\",\"knoty\",\"knout\",\"known\",\"knows\",\"knubs\",\"knuck\",\"knude\",\"knurl\",\"knurr\",\"knurs\",\"knuts\",\"koala\",\"koans\",\"koaps\",\"koari\",\"kob\",\"kochs\",\"koels\",\"kofun\",\"kofta\",\"kogan\",\"kogal\",\"kohas\",\"kohei\",\"kohen\",\"kojah\",\"kokam\",\"kokas\",\"kokes\",\"kokra\",\"kokum\",\"kolas\",\"kolos\",\"kombu\",\"konbu\",\"konds\",\"konks\",\"kooey\",\"kooks\",\"kooky\",\"kooms\",\"koopa\",\"kopek\",\"kophs\",\"kopje\",\"koppa\",\"korfs\",\"korma\",\"koros\",\"korps\",\"korry\",\"korun\",\"korve\",\"korys\",\"koses\",\"kotch\",\"kotos\",\"kotow\",\"koudi\",\"koura\",\"kouri\",\"koutu\",\"kover\",\"koyas\",\"kozek\",\"krabs\",\"kraft\",\"krais\",\"krait\",\"krama\",\"krang\",\"krans\",\"kranz\",\"kraut\",\"krays\",\"kreel\",\"kreep\",\"kreis\",\"krems\",\"krewe\",\"krick\",\"kries\",\"kriks\",\"krill\",\"krimi\",\"kris\",\"kriss\",\"krone\",\"krons\",\"kroon\",\"kroot\",\"kropu\",\"krors\",\"krout\",\"kruds\",\"krugs\",\"krule\",\"krunk\",\"kryks\",\"ksar\",\"kthut\",\"kuala\",\"kuang\",\"kuata\",\"kuban\",\"kubie\",\"kubok\",\"kubos\",\"kuchs\",\"kudai\",\"kudes\",\"kudos\",\"kudzu\",\"kueis\",\"kueji\",\"kuffs\",\"kufte\",\"kugli\",\"kugri\",\"kulas\",\"kulak\",\"kulan\",\"kulas\",\"kulen\",\"kules\",\"kulis\",\"kulms\",\"kumas\",\"kumfi\",\"kumis\",\"kumme\",\"kumys\",\"kunar\",\"kunds\",\"kunes\",\"kungs\",\"kunju\",\"kupas\",\"kuper\",\"kupie\",\"kurfs\",\"kurma\",\"kurns\",\"kurre\",\"kurri\",\"kurry\",\"kurta\",\"kurus\",\"kusso\",\"kutas\",\"kutha\",\"kutis\",\"kutoa\",\"kutte\",\"kuyas\",\"kuzas\",\"kvass\",\"kvell\",\"kyack\",\"kyaks\",\"kyane\",\"kyans\",\"kyats\",\"kyaya\",\"kybes\",\"kybos\",\"kyled\",\"kyles\",\"kylie\",\"kylix\",\"kyloe\",\"kymes\",\"kynde\",\"kynds\",\"kyoto\",\"kyrie\",\"kysty\",\"kythe\"];\n\n// Combined word list for validation (includes both answers and guesses)\nexport const ALL_OFFICIAL_WORDS = [...OFFICIAL_WORDLE_ANSWERS, ...OFFICIAL_WORDLE_GUESSES];\n\n// Create a Set for fast lookup performance\nexport const OFFICIAL_WORDS_SET = new Set(ALL_OFFICIAL_WORDS);\n\n// Function to check if a word is valid according to official Wordle rules\nexport function isOfficialWordleWord(word: string): boolean {\n  return OFFICIAL_WORDS_SET.has(word.toLowerCase());\n}\n\n// Function to get a random answer word\nexport function getRandomAnswerWord(): string {\n  const randomIndex = Math.floor(Math.random() * OFFICIAL_WORDLE_ANSWERS.length);\n  return OFFICIAL_WORDLE_ANSWERS[randomIndex];\n}\n\n// Function to get the daily word (like official Wordle)\nexport function getDailyWord(date?: Date): string {\n  const startDate = new Date('2021-06-19'); // Original Wordle start date\n  const currentDate = date || new Date();\n  const daysSinceStart = Math.floor((currentDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n  const wordIndex = daysSinceStart % OFFICIAL_WORDLE_ANSWERS.length;\n  return OFFICIAL_WORDLE_ANSWERS[wordIndex];\n}\n\nexport default {\n  OFFICIAL_WORDLE_ANSWERS,\n  OFFICIAL_WORDLE_GUESSES,\n  ALL_OFFICIAL_WORDS,\n  OFFICIAL_WORDS_SET,\n  isOfficialWordleWord,\n  getRandomAnswerWord,\n  getDailyWord\n};","size_bytes":60872},"client/src/components/font-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Palette } from \"lucide-react\";\nimport { FontStoreAPI, Font, ColorOption } from \"./font-store-modal\";\n\nconst AVAILABLE_COLORS: ColorOption[] = [\n  { id: 'default', name: 'Black', value: '#000000', price: 0 },\n  { id: 'white', name: 'White', value: '#ffffff', price: 50 },\n  { id: 'yellow', name: 'Sunny Yellow', value: '#fbbf24', price: 75 },\n  { id: 'purple', name: 'Royal Purple', value: '#8b5cf6', price: 100 },\n  { id: 'cyan', name: 'Electric Cyan', value: '#06b6d4', price: 100 },\n  { id: 'red', name: 'Crimson Red', value: '#ef4444', price: 90 },\n  { id: 'green', name: 'Forest Green', value: '#10b981', price: 90 },\n  { id: 'orange', name: 'Sunset Orange', value: '#f97316', price: 85 },\n  { id: 'pink', name: 'Hot Pink', value: '#ec4899', price: 110 },\n  { id: 'blue', name: 'Ocean Blue', value: '#3b82f6', price: 95 },\n  { id: 'gold', name: 'Golden', value: '#d97706', price: 120 },\n  { id: 'silver', name: 'Silver', value: '#6b7280', price: 110 }\n];\n\nexport default function FontSettings() {\n  const [state, setState] = useState(FontStoreAPI.getState());\n\n  useEffect(() => {\n    const updateState = () => setState(FontStoreAPI.getState());\n    \n    // Listen for font store changes\n    const handleStorageChange = () => updateState();\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Listen for font changes\n    const handleFontChange = () => updateState();\n    window.addEventListener('fontChanged', handleFontChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('fontChanged', handleFontChange);\n    };\n  }, []);\n\n  const currentState = FontStoreAPI.getState();\n  const ownedFonts = currentState.ownedFonts.map(id => {\n    const allFonts = [\n      { id: 'default', name: 'Classic', family: 'Inter', fallback: 'system-ui, sans-serif', price: 0, category: 'sans' as const },\n      { id: 'playfair', name: 'Elegant', family: 'Playfair Display', fallback: 'Georgia, serif', price: 100, category: 'serif' as const },\n      { id: 'merriweather', name: 'Reader', family: 'Merriweather', fallback: 'Times, serif', price: 80, category: 'serif' as const },\n      { id: 'roboto-slab', name: 'Strong', family: 'Roboto Slab', fallback: 'Georgia, serif', price: 110, category: 'serif' as const },\n      { id: 'crimson-text', name: 'Literary', family: 'Crimson Text', fallback: 'Times, serif', price: 95, category: 'serif' as const },\n      { id: 'poppins', name: 'Modern', family: 'Poppins', fallback: 'Arial, sans-serif', price: 90, category: 'sans' as const },\n      { id: 'space-grotesk', name: 'Futuristic', family: 'Space Grotesk', fallback: 'Arial, sans-serif', price: 140, category: 'sans' as const },\n      { id: 'nunito', name: 'Friendly', family: 'Nunito', fallback: 'Arial, sans-serif', price: 85, category: 'sans' as const },\n      { id: 'montserrat', name: 'Clean', family: 'Montserrat', fallback: 'Arial, sans-serif', price: 100, category: 'sans' as const },\n      { id: 'fira-code', name: 'Code Style', family: 'Fira Code', fallback: 'Monaco, monospace', price: 150, category: 'mono' as const },\n      { id: 'jetbrains-mono', name: 'Terminal', family: 'JetBrains Mono', fallback: 'Courier, monospace', price: 160, category: 'mono' as const },\n      { id: 'source-code-pro', name: 'Developer', family: 'Source Code Pro', fallback: 'Courier, monospace', price: 140, category: 'mono' as const },\n      { id: 'comfortaa', name: 'Rounded', family: 'Comfortaa', fallback: 'Arial, sans-serif', price: 120, category: 'playful' as const },\n      { id: 'fredoka', name: 'Bubbly', family: 'Fredoka', fallback: 'Arial, sans-serif', price: 130, category: 'playful' as const },\n      { id: 'quicksand', name: 'Smooth', family: 'Quicksand', fallback: 'Arial, sans-serif', price: 110, category: 'playful' as const },\n      { id: 'bangers', name: 'Comic Book', family: 'Bangers', fallback: 'Arial, sans-serif', price: 180, category: 'fun' as const },\n      { id: 'luckiest-guy', name: 'Bold Fun', family: 'Luckiest Guy', fallback: 'Arial, sans-serif', price: 170, category: 'fun' as const },\n      { id: 'amatic-sc', name: 'Hand Drawn', family: 'Amatic SC', fallback: 'Arial, sans-serif', price: 160, category: 'fun' as const },\n      { id: 'bungee', name: 'Street Art', family: 'Bungee', fallback: 'Arial, sans-serif', price: 190, category: 'fun' as const },\n      { id: 'creepster', name: 'Spooky', family: 'Creepster', fallback: 'Arial, sans-serif', price: 200, category: 'fun' as const },\n      { id: 'kalam', name: 'Handwriting', family: 'Kalam', fallback: 'Arial, sans-serif', price: 150, category: 'fun' as const }\n    ];\n    return allFonts.find(f => f.id === id);\n  }).filter(Boolean);\n  const ownedColors = state.ownedColors.map(id => AVAILABLE_COLORS.find(c => c.id === id)).filter(Boolean);\n\n  const equipFont = (fontId: string) => {\n    const newState = { ...state, equippedFont: fontId };\n    localStorage.setItem('wordpop-font-store', JSON.stringify(newState));\n    setState(newState);\n    applyStyles(newState);\n  };\n\n  const equipColor = (colorId: string) => {\n    const newState = { ...state, equippedColor: colorId };\n    localStorage.setItem('wordpop-font-store', JSON.stringify(newState));\n    setState(newState);\n    applyStyles(newState);\n  };\n\n  const applyStyles = (currentState: any) => {\n    const font = FontStoreAPI.getEquippedFont();\n    const color = AVAILABLE_COLORS.find(c => c.id === currentState.equippedColor);\n    \n    if (font && color) {\n      const fontStack = `\"${font.family}\", ${font.fallback}`;\n      const colorValue = color.value;\n      \n      const style = document.getElementById('dynamic-font-style') || document.createElement('style');\n      style.id = 'dynamic-font-style';\n      \n      style.textContent = `\n        /* Game tiles - text content only */\n        .tile,\n        .tile-correct,\n        .tile-present, \n        .tile-absent,\n        .tile-current,\n        .tile-empty,\n        [data-testid*=\"tile\"] {\n          font-family: ${fontStack} !important;\n        }\n        \n        .tile *,\n        .tile-correct *,\n        .tile-present *,\n        .tile-absent *,\n        .tile-current *,\n        .tile-empty *,\n        [data-testid*=\"tile\"] * {\n          color: ${colorValue} !important;\n          font-family: ${fontStack} !important;\n          text-shadow: \n            -1px -1px 0 #000,\n            1px -1px 0 #000,\n            -1px 1px 0 #000,\n            1px 1px 0 #000,\n            0 -1px 0 #000,\n            0 1px 0 #000,\n            -1px 0 0 #000,\n            1px 0 0 #000 !important;\n        }\n        \n        /* Keyboard keys - text content only */\n        .keyboard-key,\n        .keyboard-key-default,\n        .keyboard-key-correct,\n        .keyboard-key-present,\n        .keyboard-key-absent,\n        .keyboard-key-special,\n        [data-testid*=\"key\"] {\n          font-family: ${fontStack} !important;\n        }\n        \n        .keyboard-key *,\n        .keyboard-key-default *,\n        .keyboard-key-correct *,\n        .keyboard-key-present *,\n        .keyboard-key-absent *,\n        .keyboard-key-special *,\n        [data-testid*=\"key\"] * {\n          color: ${colorValue} !important;\n          font-family: ${fontStack} !important;\n          text-shadow: \n            -1px -1px 0 #000,\n            1px -1px 0 #000,\n            -1px 1px 0 #000,\n            1px 1px 0 #000,\n            0 -1px 0 #000,\n            0 1px 0 #000,\n            -1px 0 0 #000,\n            1px 0 0 #000 !important;\n        }\n      `;\n      \n      if (!document.head.contains(style)) {\n        document.head.appendChild(style);\n      }\n      \n      window.dispatchEvent(new CustomEvent('stylesChanged', { detail: { font, color } }));\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Fonts Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Owned Fonts</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {ownedFonts.length === 0 ? (\n            <p className=\"text-gray-600 text-sm\">\n              No fonts owned yet. Visit the Style Store to purchase fonts!\n            </p>\n          ) : (\n            ownedFonts.map((font) => font && (\n              <div\n                key={font.id}\n                className={`flex items-center justify-between p-3 rounded-lg border transition-all ${\n                  state.equippedFont === font.id ? 'bg-blue-50 border-blue-200' : 'bg-gray-50'\n                }`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <div className=\"font-medium\">{font.name}</div>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {font.category}\n                    </Badge>\n                  </div>\n                  {state.equippedFont === font.id && (\n                    <Check className=\"w-4 h-4 text-green-500\" />\n                  )}\n                </div>\n                \n                <Button\n                  size=\"sm\"\n                  variant={state.equippedFont === font.id ? \"secondary\" : \"default\"}\n                  disabled={state.equippedFont === font.id}\n                  onClick={() => equipFont(font.id)}\n                >\n                  {state.equippedFont === font.id ? 'Equipped' : 'Equip'}\n                </Button>\n              </div>\n            ))\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Colors Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Palette className=\"w-4 h-4\" />\n            Owned Colors\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {ownedColors.length === 0 ? (\n            <p className=\"text-gray-600 text-sm\">\n              No colors owned yet. Visit the Style Store to purchase colors!\n            </p>\n          ) : (\n            ownedColors.map((color) => color && (\n              <div\n                key={color.id}\n                className={`flex items-center justify-between p-3 rounded-lg border transition-all ${\n                  state.equippedColor === color.id ? 'bg-blue-50 border-blue-200' : 'bg-gray-50'\n                }`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div \n                    className=\"w-6 h-6 rounded-full border-2 border-gray-300\"\n                    style={{ backgroundColor: color.value }}\n                  ></div>\n                  <div>\n                    <div className=\"font-medium\">{color.name}</div>\n                  </div>\n                  {state.equippedColor === color.id && (\n                    <Check className=\"w-4 h-4 text-green-500\" />\n                  )}\n                </div>\n                \n                <Button\n                  size=\"sm\"\n                  variant={state.equippedColor === color.id ? \"secondary\" : \"default\"}\n                  disabled={state.equippedColor === color.id}\n                  onClick={() => equipColor(color.id)}\n                >\n                  {state.equippedColor === color.id ? 'Equipped' : 'Equip'}\n                </Button>\n              </div>\n            ))\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11461},"client/src/hooks/use-audio.ts":{"content":"export function useAudio() {\n  // Placeholder audio hook - keeps the interface but removes actual audio and vibration\n  \n  // No-op functions for all audio actions\n  const playKeyPress = () => {};\n  const playWordSubmit = () => {};\n  const playCorrectGuess = () => {};\n  const playWrongGuess = () => {};\n  const playGameWin = () => {};\n  const playGameLose = () => {};\n  const playInvalidWord = () => {\n    // Removed vibration - no feedback for invalid words\n  };\n  const startBackgroundMusic = () => {};\n  const stopBackgroundMusic = () => {};\n  const vibrate = () => {\n    // Vibration disabled\n  };\n\n  return {\n    playKeyPress,\n    playWordSubmit,\n    playCorrectGuess,\n    playWrongGuess,\n    playGameWin,\n    playGameLose,\n    playInvalidWord,\n    startBackgroundMusic,\n    stopBackgroundMusic,\n    vibrate,\n  };\n}","size_bytes":821}}}